====================================== 基本設定及操作 ======================================
目前相關位址 :
\\10.69.99.252  <--
\\10.65.162.95
\\10.65.162.95\data		alstonlai/please
\\10.65.162.95\Release
設定 /etc/hosts    
	10.69.99.252	git-server.rtx.org

download firmware:
git clone ssh://gitolite@git-server.rtx.org/LTIB/MX6_LinuxBSP.git


編譯器相關環境設定 :	(目前project所使用的CROSS_COMPILE)
export ARCH=arm		
export CROSS_COMPILE=
(Wrapping machine)	/opt/freescale/usr/local/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/arm-none-linux-gnueabi-
(Android - SMARC)	/home/retronix/work/SMARC/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi-
(MX53-BISHOP)		/opt/freescale/usr/local/gcc-4.4.4-glibc-2.11.1-multilib-1.0/arm-fsl-linux-gnueabi/bin/arm-none-linux-gnueabi-
(BISHOP-Ubuntu)		/usr/bin/arm-linux-gnueabi-
(Xfce4 - SMARC)		arm-linux-gnueabihf-
(Linux - SMARC)		arm-linux-gnueabi-
(linux-imx-3.10.x)	/opt/freescale/usr/local/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin/arm-linux-gnueabihf-
(Adlink)		/opt/cross/rtx-gcc-4.9.3-glibc-2.19-hf-64bits/arm-rtx-linux-gnueabihf/bin/arm-rtx-linux-gnueabihf-

Ubuntu分享cmd:
sudo mount -t vboxsf Share /home/retronix/work/Linux/Share
sudo mount -t vboxsf 共用資料夾 /home/retronix/work/Linux/Share

uboot編譯步驟 ：	
make distclean
make mx6dl_sabresd_config(imx6 DualLite)(若make mx6q_sabresd_config, Dual/Quad)
make

kernel編譯步驟 ：
make distclean
make imx6_defconfig
make uImage

DD檔案 (IN):
sudo dd if=u-boot.bin of=/dev/sdc bs=512 seek=2 skip=2(1K)
sudo dd if=uImage of=/dev/sdc bs=512 seek=26624(13M)
sudo dd if=/dev/zero of=/dev/sdc bs=512 seek=24576 count=10(12M)

SDCARD Auto-Update :
sudo dd if=extsmagic of=/dev/sdb  (0)
sudo dd if=uImage-update of=/dev/sdb bs=512 seek=2048 (1M)
sudo dd if=uramdisk-imx53.img of=/dev/sdb bs=512 seek=12288 (6M)
sudo dd if=arch/arm/boot/dts/imx6q-q7.dtb of=/dev/sdc bs=512 seek=40960 (24M)

linux-imx-3.10.x :
sudo dd if=u-boot.imx of=/dev/sdc bs=512 seek=2
sudo dd if=arch/arm/boot/dts/imx6q-rtx-q7.dtb of=/dev/sdc bs=512 seek=26624 (13M)
sudo dd if=arch/arm/boot/uImage of=/dev/sdc bs=512 seek=26880 (13.125M)

DD資料 (OUT) : 
dd if=/dev/mmcblk0 of=ppp.txt bs=1024 skip=12288 count=10(12M)
cat ppp.txt (od -x ppp.txt,以 8 進位方式印出檔案中每個字組)

檔案partition/format :
sudo mkfs.ext4 -L AMD /dev/sdc1		(Format DISK, 給名稱)
sudo cp -avrf * /media/AMD		(複製所有資料到AMD去)
sudo tar -pcvf ../rootfs.tar *		(打包所有資料到rootfs.tar)
sudo tar -pczvf ../rootfs.tgz *		(打包壓縮所有資料到rootfs.tgz)
sudo tar -pcjvf ../rootfs.tar.bz2 *	(打包壓縮所有資料到rootfs.tar.bz2)

sudo tar -pxzvf rootfs.tgz -C /media/AMD	(解壓縮到 AMD資料夾裡）
sudo tar -pjxvf rootfs.tgz.bz -C /media/AMD	(解壓縮到 AMD資料夾裡）
sudo tar -jxvf linaro-12.09.tar.gz -C /media/linaro-12.09/

consol :
	ip addr : check ip
	a. ssh root@ip
	b. putty ip

Debug : 
	cat /var/log/Xorg.0.log
	cat /proc/kmsg	------抓取即時consol資料

mount : 
a. 	掛載 /proc : mount -n -t proc proc /proc
	掛載 /sys  : mount -n -t sysfs sys /sys
b. udev filesystem .. 

To change all the directories to 755 (-rwxr-xr-x):
find /opt/lampp/htdocs -type d -exec chmod 755 {} \;
To change all the files to 644 (-rw-r--r--):
find /opt/lampp/htdocs -type f -exec chmod 644 {} \;

partition: 單位 = 磁區 之於 1 * 512 = 512 位元組
所用裝置 開機      開始         結束      區塊   識別號  系統
/dev/sdc1           65536     7744511     3839488   83  Linux   <== 0x10000  (32M)

cpu freq : cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq
check task (CPU的使用率) : ps -aus
CPU的使用率 : 指令 : top
cpu info : cat /proc/cpuinfo
lscpu (list cpu) , nproc (list number)
clock : cat /proc/cpu/clocks
uboot : clk core 800

check loading : 
cat /proc/interrupts


搜尋 (/lib 資料夾的檔案名稱 ld* 相關檔案) : find /lib  -name ld*

相關debug information(clock) : 	/sys/kernel/debug
	mount -t debugfs nodev /sys/kernel/debug

====================================== GIT 相關問題及位置 ======================================
Download Linux Source code :
	a. https://10.65.162.95/htdocs/cgit/
	b. 確定下載位置 : Example (LinuxBSP -> MX53_LinuxBSP.git -> Q7)
	c. git clone ssh://gitolite@172.18.10.75/LinuxBSP/MX53_LinuxBSP.git -b Q7

GIT上傳 : (全部)
git commit -a -m "freescale-imx6"
切branch code (gitk) : Branch -> Visualize All Branches...
	點到要切的那一隻Branch(右鍵）-> Reset master branch to here -> Hard:Reset working tree and index
	(一般)
	a. git fetch	下載最新的資訊
	b. git status	觀察差異性
	c. git checkout 調整成相同(.config 若需要先複製,下載完再回貼)
	d. git pull	更新成最新的版本
git相關訊息及流程 : 
	git fetch -> 將Server資訊下載下來
	git status -> Check 目前更改狀況
	git checkout -- Path ->將有變動的地方還原..	(git reset --hard 若不行,就用此)
	git pull -> 更新與server相同

local 在建立一個新branch(Q7-AXIOMTEK)
	git checkout -b Q7-AXIOMTEK	(由現在的環境為基礎, 建立新的 branch )
	git checkout -b Q7-AXIOMTEK Q7	(由Q7環境為基礎, 建立新的 branch )
	git checkout -b A-iMX6-Q7 origin/iMX6-Q7(由Q7環境為基礎, 建立新的 branch )
遠端建立新的branch
	git push (遠端倉庫名) (分支名)：
	git push origin master:Ibase_Q7_Industry
	git push origin iMX6-Q7:IMX6-PITX (本地分支iMX6-Q7推送到某個命名不同的遠端分支：若想把遠端分支叫作IMX6-PITX)

git branch -a # 列出所有 branch
git branch -r	列出所有 Repository branch
  origin/HEAD -> origin/master
  origin/iMX6-A6
  origin/iMX6-Q7
  origin/iMX6-Wrapper
  origin/iMX6-Wrapper-old
  origin/iMX6-Wrapping-Machine
  origin/master

git checkout Q7 (切換到Q7 Branch)
.gitignore : 記錄不被版本控制追蹤的檔案

====================================== LTIB 相關設定 ======================================
Config setting :
	1 ./ltib -m config 
		=> Select "Freescale iMX reference board"
		=> platform type => imx6q
		profiles : Min profile
		=> uboot : mx6q_sabresd
		=> cp .config => defconfig.dev

Add Patch : (Example  pcre-6.3)
	a. pcre-6.3 （更改rpm/BUILD/pcre-6.3 -> pcre-6.3-new)
	b. ./ltib -m prep -p pcre (建立原先的pcre-6.3 有問題的)
	c. 使用Meld,比較兩個檔案. - 點選差異性(紅色部份)
	d. 文件(F) -> Format as patch -> cp to 文件 -> 改名為example : pcre-6.3-fix-pp.patch -> 放於pkgs/中
	e. 更改pcre-6.3.spec Add patch1 .. %patch1 -p1(原目錄下第幾層)
	f. 修改 pcre-6.3-fix-pp.patch
		--- (/home/retronix/work/linux/ppp/mx6_linuxBSP/rpm/BUILD/ 刪除)pcre-6.3/configure
		+++ (/home/retronix/work/linux/ppp/mx6_linuxBSP/rpm/BUILD/ 刪除)pcre-6.3-new/configure

Check Ltib Version
	a. ./ltib -m shell
	b. LTIB> gcc -v

ltib 重新Build,不變Config :
	a. sudo rm -rf rootfs
	b. rpm/RPMS/ 全砍掉

ltib PKGS 載入順序 :
config/userspace/pkg_map
config/platform/imx/pkg_map

ltib config執行順序 : .config -> imx5_defconfig.dev -> defconfig.dev
.config : 目前所使用的config
imx5_defconfig.dev : 是執行ltib時,在make前copy .config而成
defconfig.dev : 若沒有.config / imx5_defconfig.dev, 則執行此config

LTIB使用: compiler
./ltib -m prep -p rtx_setenv	(解pkgs)
./ltib -m shell 		(進LTIB shell裏)
	LTIB> cd rpm/Build/rtx_setenv-0.01/
	LTIB> make clean
	LTIB> make
或	LTIB> cc uart_server.c -o uart_server

uart port - pin test. (RTS-CTS)  kernel 3.14.28
uart.c  -> ioctl( uart_fd, TIOCMBIS, &w_iTIOCM_bit ) -> tty_io.c/tty_tiocmset()
	-> serial_core.c/uart_tiocmset() -> uart_update_mctrl() 
	-> iimx.c/mx_set_mctrl()/imx_get_mctrl()

LTIB : 套件管理程式(Synaptic)(os密碼:retronix)
透過 - sudo apt-get install php* (查詢相關套件) (Y/N) N
透過 - sudo apt-get source ZIP (下載相關套件 : ZIP)(下載 : a.Zip-3.0資料夾, b.Zip_3.0.orig.tar.gz, c.Zip_3.0-4.debian.tar.gz, d.Zip_3.0-4.dsc)
壓縮 Zip-3.0 => Zip-3.0.tar.gz
將Zip-3.0.tar.gz丟到pkgs,更改spec.

Add PKGS :
a. Google : pkgs - xfce4-4.8.0.3.tgz.gz => pkgs folder
b. Add dist/lfs-5.1/xfce4 folder
c. cp template.spec => dist/lfs-5.1/xfce4/xfce4_4.8.0.3.spec
d. change spec => Name / Version / Source
e. config/userspace/pkg_map => PKG_XFCE4 = xfce4_4.8.0.3
f. config/userspace/packages.lkc => config PKG_XFCE4

xorg.conf/ version/ mcu_version 參數修改置放在ltib : 
MX53_LinuxBSP/config/platform/imx/merge/etc/X11
MX53_LinuxBSP/config/platform/imx/merge/etc/

ltib debug : spec add debug message
print "alston : $RPM_BUILD_ROOT ///// %{pfx}\n"; 印出變數$RPM_BUILD_ROOT, 變數%{pfx}

====================================== PC 網路傳送檔案 (SCP 指令) ======================================
root檔案中
1. 先確定target ip :  ip addr
2. scp Battery_Test root@10.65.163.89:/home/ (上傳Battery_Test檔案到 主機/home/ 資料夾下)	
3. 若遇到.. (ssh-keygen -f "/home/retronix/.ssh/known_hosts" -R 10.65.163.101)
---------------------------------------------------------------------------------------------
#!/bin/sh
#delete uImage
rm -rf /home/retronix/work/Linux/Share/MFG/IMX5/BISHOP/Profiles/MX53 Linux Update/OS Firmware/files/BISHOP/linux/3.10.31/uImage

#get uImage
sudo scp rtx-3110@10.65.163.9:/home/rtx-3110/Work/Project/Linux/BISHOP/bishop-ltib/rpm/BUILD/linux/arch/arm/boot/uImage /home/retronix/work/Linux/Share/MFG/IMX5/BISHOP/Profiles/MX53\ Linux\ Update/OS\ Firmware/files/BISHOP/linux/3.10.31/
#get rtx-bishop-mx53.dtb
sudo scp rtx-3110@10.65.163.9:/home/rtx-3110/Work/Project/Linux/BISHOP/bishop-ltib/rpm/BUILD/linux/arch/arm/boot/dts/rtx-bishop-mx53.dtb /home/retronix/work/Linux/Share/MFG/IMX5/BISHOP/Profiles/MX53\ Linux\ Update/OS\ Firmware/files/BISHOP/linux/3.10.31/
#get u-boot.imx
sudo scp rtx-3110@10.65.163.9:/home/rtx-3110/Work/Project/Linux/BISHOP/bishop-ltib/rpm/BUILD/u-boot-local/u-boot.imx /home/retronix/work/Linux/Share/MFG/IMX5/BISHOP/Profiles/MX53\ Linux\ Update/OS\ Firmware/files/BISHOP/linux/3.10.31/
#get rootfs.tgz
sudo scp rtx-3110@10.65.163.9:/home/rtx-3110/Work/Project/Linux/BISHOP/bishop-ltib/rootfs.tgz /home/retronix/work/Linux/Share/MFG/IMX5/BISHOP/Profiles/MX53\ Linux\ Update/OS\ Firmware/files/BISHOP/linux/3.10.31/

====================================== Driver ======================================
Driver 基本架構 :
Init -> probe -> RUNtimefunction : Init / Idel/ Touch Data/

====================================== / uboot / kernel / rootfs 系統問題 ======================================
★★★★uboot★★★★ ltib
橋接 : 	
	a. MX6_LinuxBSP/config/platform/imx/main.lk (./ltib -m config) ==>  config BOARD_MX6DL_Q7
	b. MX6_LinuxBSP/dist/lfs-5.1/u-boot/u-boot-common.tmpl (.spec) ==>  PKG_U_BOOT_CONFIG_TYPE = mx6dl_q7_config
	c. MX6_LinuxBSP/u-boot/Makefile ==> board/freescale/mx6q_q7/config.tmp (..arm_cortexa8 mx6q_q7 freescale mx6..)
	d. MX6_LinuxBSP/u-boot/include/configs/mx6dl_q7.h ==> define要更改(#define CONFIG_MX6Q_Q7)
	g. MX6_LinuxBSP/u-boot/include/asm-arm/mach-types.h (#define MACH_TYPE_MX6Q_Q7	4480)
	e. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7 (folder)
	f. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7/u-boot.lds (need modify)
	h. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7/mx6q_q7.c (gd->bd->bi_arch_number = MACH_TYPE_MX6Q_Q7) ==> kernel
											   MACH_TYPE_MX6Q_SABRESD
	i. MX6_LinuxBSP/u-boot/include/config.mk (need modify)

console output :	(Example : UART2)
	a. mx6q_sabresd.h	#define CONFIG_UART_BASE_ADDR	UART2_BASE_ADDR
	b. mx6q_sabresd.c	setup_uart(){	mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D26__UART2_TXD)
						mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D27__UART2_RXD)	}
	c. mx6q_sabresd.h	#define	CONFIG_EXTRA_ENV_SETTINGS ... console=ttymxc1 ..

usb verify :
	a. 插入fat格式的隨身碟
	b. usb start	-> usb scan
	c. usb dev 0	-> 可見到隨身碟
	d. fatls usb 0	-> list usb data (usb 1)
	e. fatload usb 0 ${loadaddr} xxx	-> 將xxx檔載入
	f. md ${loadaddr}			-> 載入資料看

board for uboot : mx6q-q7
	a. include/config/mx6q_q7.h
	b. board/freescale/mx6q_q7 資料夾
	c. board/freescale/mx6q_q7/mx6q_q7.c
	d. mx6q_q7.c -> MACH_TYPE_MX6Q_SABRESD
	e. include/asm-arm/mach-types.h:3260: #define MACH_TYPE_MX6Q_SABRESD	       3980

GPIO test:(開機測試)
	a. start.S -> _start: b	reset (跳到reset)
	b. 若為無窮迴圈則寫 : _start: b	_start
	c.
		先定義 GPIO :
		.equ DEF_BASE_GPIO_GDIR		,0x0209C004	(GPIO direction register)
		.equ DEF_BASE_GPIO_DR		,0x0209C000	(GPIO data register)
		.equ DEF_BASE_GPIO_VALUE	,0x0000

		reset :
			ldr r0,	=DEF_BASE_GPIO_GDIR
			ldr r1,	=0xFFFFFFFF
			set r1, [r0]
			ldr r0, =DEF_BASE_GPIO_DR
			ldr r1,	=DEF_BASE_GPIO_VALUE
			set r1, [r0]
			b reset

★★★★kernel★★★★ 
橋接:
	a. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/board-mx6q_q7.c
	   MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/board-mx6q_q7.h
	   MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/mx6q_q7_pmic_pfuze100.c
	b. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/Kconfig (Kernel Configuration -> System Type -> 
			Freescale MXC Implementations -> Supporti.MX 6Quad platform -> Q7 platform)
	c. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/Makefile (CONFIG_MACH_MX6Q_Q7) (need modify)
	d. MX6_LinuxBSP/kernel_imx/arch/arm/plat-mxc/include/mach/common.h -> extern int mx6q_q7_init_pfuze100(u32 int_gpio);
	e. MX6_LinuxBSP/kernel_imx/arch/arm/tools/mach-types (mx6q_q7	MACH_MX6Q_Q7	MX6Q_Q7	  3980)
	f. MX6_LinuxBSP/kernel_imx/sound/soc/imx/Kconfig (config SND_SOC_IMX_SGTL5000 ..) (Driver有用到Machine-Type)
	   MX6_LinuxBSP/kernel_imx/sound/soc/imx/imx-sgtl5000.c (machine_is_mx6q_q7())
	g. MX6_LinuxBSP/kernel_imx/arch/arm/configs/imx6_android_defconfig(Kernel Config setting)
	h. MX6_LinuxBSP/kernel_imx/arch/arm/plat-mxc/include/mach/uncompress.h
	
console output :	(Example : UART2)
	a. board-mx6q_sabresd.c	--- mx6_sabresd_timerinit(){	..	UART2	..}
	b. board-mx6q_sabresd.h
	c. uncompress.h --- uart_base = MX6Q_UART2_BASE_ADDR

Debug : 
	make menuconfig : ----> kernel hacking  --->   Kernel debugging  ---> 
	Kernel low-level debugging functions ---> Early printk
	arch/arm/plat-mxc/include/mach/debug-macro.S #define UART_PADDR	MX6Q_UART2_BASE_ADDR

Debug Log : syslogd /klogd /rsyslogd
	/etc/syslog.cont
	/usr/bin/logger -t 'basename $0' -p local3.info "Output message" 
vpn.*
*.*	/var/log/debug
!ppp.*	/var/log/ppp.log


★★★★rootfs★★★★ 
system issue : 		(cp: write error: No space left on device)
	a. df -h (可以見到空間不足訊息) : rwfs 512.0K(Size) 512.0K(Used) 0(Available) 100%(Use%)
	b. 更改 /etc/rc.d/rc.conf : export TMPFS_SIZE="512k" -> "128m"(更改512K -> 128M)
	c. df -h : rwfs 128.0M(Size) 3.7M(Used)  124.3M(Available) 3%(Use%) (空間充足)
	d. du -h (check 檔案大小)

====================================== / Debug / Info / Environment 相關問題 ======================================
Debug Print相關輸出 : 
printk("%s(%d)\n",__FILE__,__LINE__);	(列印Debug Message)
printk("%s(%d) : cmd=%d, value=%d\n",__FILE__,__LINE__,cmd,value);

Net連線 :
ifconfig eth0 up (UP PHY HW)
udhcpc -i eth0 (Get IP)
ifconfig
dhclient eth0 (ubuntu Get ip)
dhclient -r eth0 (ubuntu release ip)

WIFI連線 : 
ifconfig wlan0 up
iwconfig
iwlist scan

io :
播放檔案 aplay -D plughw:0,0 /unit_tests/audio8k16S.wav -v (plughw : card number, device number)
錄音存檔 arecord -t wav -f cd -d 10 ./audio.wav (錄10 sec)
更改設定 amixer set "function" 狀態 (example : amixer set 'Jack Function' on)
更改聲音 amixer set "PCM" 145
Debug :
	1. 確定元件 aplay -l (list soundcards)
	2. cat /proc/asound/cards	(list card)
	
Vedio : 調整color
export TERM=linux
echo -n 32 > /sys/class/graphics/fb0/bits_per_pixel
setterm -inversescreen on > /dev/tty0
setterm -foreground green > /dev/tty0
setterm -clear all > /dev/tty0
fbdata顯示在螢幕上
dd if=fbdata of=/dev/fb0 bs=1024 count=768	(1024Byte * 768 = 768KByte)

fbset -fb /dev/fb0 (check framebuffer info)


mac : write mac(LAN 9514)
ethtool -E eth1 magic 0x9500 offset 1 value 0x22 (write address 1 = 0x22)
ethtool -E eth1 magic 0x9500 offset 2 value 0x33 ...(smsc95xx.c -> LAN95xx_EEPROM_MAGIC=0x9500)
ethtool -e eth1 (read info)

讀 MAC:
	ethtool -e eth1 offset 0x01 length 6
寫 MAC : (A1:A2:A3:A4:A5:A6)
	ethtool -E eth1 magic 0x9500 offset 1 A1
	ethtool -E eth1 magic 0x9500 offset 2 A2
	ethtool -E eth1 magic 0x9500 offset 3 A3
	ethtool -E eth1 magic 0x9500 offset 4 A4
	ethtool -E eth1 magic 0x9500 offset 5 A5
	ethtool -E eth1 magic 0x9500 offset 6 A6

★★★★Environment★★★★ 
MFG_TOOL : 	wrapping_machine(imx6)
	a. HID-compliant device, 硬體識別碼 : HID\VID-51A2 & PID_0061
	b. profiles/MX6Q Linux Update/OS Firmware/ucl2 : 原DL為 51A2:54(更改為vid=51A2 pid=0061)
	c. uboot(mfg uboot code for DualLite) 才能跑得動, 或從官網直接下載Dual-Lite MFG 最快!!

autologin : 自動登入
	a. /etc/inittab -> (::respawn:/etc/rc.d/rc_mxc.S)
	b. rc_mxc.S -> (/sbin/getty -n -l /sbin/autologin -L ttymxc3 115200 vt100)
	c. /sbin/autologin -> (chmod +x autologin)
			#!/bin/sh
			exec /bin/login -f root
ubuntu : 啟動
	a. copy to /bin/auto-serial-consol
	b. copy to /etc/init/auto-serial-consol.conf

/root/.profile : 個人設定 - 所要執行的程式.

console UART1 test:
	main.sh | tee /dev/ttymxc0

UART port Baud Rate設定 : 
stty -F /dev/ttymxc4 115200 (設定baudrate速率=115200)
stty -F /dev/ttymxc4 -echo (關閉回顯)
stty -F /dev/ttymxc4 raw (設置原始输入
stty -F /dev/ttymxc0 -crtscts (切換cts/rts enable)
stty -F /dev/ttymxc4 -a

搜(Sagasu) :
Editor command - gedit +%n %f	使用gedit編輯.

ln [-sf] 來源檔 目標檔

ln -s passwd passwd-so
passwd 為要指定之路徑資料夾，passwd-so 為產生出來之link名稱

====================================== video Info 相關問題 ======================================
cat /sys/class/graphics/fb0/mode  ===> S:1280x720p-60 (目前resolution)
cat /sys/class/graphics/fb0/modes ===> ...(所有support resolution)
echo S:1280x720p-50 > /sys/class/graphics/fb0/mode (切換)

Uboot設定 ：video=mxcfb1:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666 video=mxcfb2:off video=mxcfb3:off
fb0(uboot setting lvds) : echo 1 > /sys/class/graphics/fb0/blank (close lvds)
fb1(uboot setting hdmi) : echo 0 > /sys/class/graphics/fb2/blank (open hdmi)

IPU : 
fb0 => 	/sys/class/graphics/fb0/blank 背景
	/sys/class/graphics/fb1/blank 前景
fb1 => 	/sys/class/graphics/fb2/blank 背景
	/sys/class/graphics/fb3/blank 前景

VPU : 
fb0 =>	/dev/video16
	/dev/video17
fb1 =>	/dev/video18
	/dev/video19

執行 GStreamer : (script setting & ./t.sh /000.mp4 /001.mp4)
#!/bin/sh
gst-launch filesrc location=$1 typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video17 &
gst-launch filesrc location=$2 typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video19
(chase rootfs + uImage + uboot)

GStreamer測試 : 
a) gst-launch-0.10 playbin2 uri=file:///home/rtx/XXXX_xvid_8m_23fps_mpeg_320k_1920x1080.avi video-sink=mfw_v4lsink
b) gst-launch-0.10 filesrc location=輸出檔案 typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video17
c) 音效 : gst-launch-0.10 audiotestsrc ! alsasink
d) 音效 : gst-launch filesrc location=/home/rtx/XXXX_xvid_8m_23fps_mpeg_320k_1920x1080.avi typefind=true ! aiurdemux name=demux demux. ! queue max-size-buffers=0 max-size-time=0 ! vpudec ! mfw_v4lsink demux. ! queue max-size-buffers=0 max-size-time=0 ! beepdec ! audioconvert ! 'audio/x-raw-int, channels=2' ! alsasink device='hw:1,0'

	gst-launch filesrc location=/home/rtx/$1 typefind=true ! aiurdemux name=demux demux. ! queue max-size-buffers=0 max-size-time=0 ! vpudec ! mfw_v4lsink demux. ! queue max-size-buffers=0 max-size-time=0 ! beepdec ! audioconvert ! 'audio/x-raw-int, channels=2' ! alsasink

	gst-launch-0.10 filesrc location=/home/rtx/XXXX_xvid_8m_23fps_mpeg_320k_1920x1080.avi typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video17

若音效無輸出 : freescale 缺: /etc/asound.conf

====================================== I2C debug 相關問題 ======================================
i2cdetect -y -r 0 (detect i2c bus0 devices)
i2cdump -y -f 0 0x1c (dump i2c bus0 device addr = 0x1C 所有register的值)
i2cget -y -f 0 0x1c 0x02 (get i2c bus0 devices addr=0x1c register=0x02 的值
	ex: ./i2cget -y -f 2 0x46 0x01 w
i2cset -y -f 2 0x46 0x0F 0x000D w

16進位轉10進位 : echo $((16#c0))


audio: sgtl5000(reg read)
cat /sys/devices/platform/soc-audio.1/HiFi/codec_reg (讀出)
修改 sound/soc/soc-core.c  : codec_reg_set 加入(chmod 777 codev_reg) (才可寫入)
echo 0x0010 0x3c3c > /sys/devices/platform/soc-audio.1/HiFi/codec_reg (寫入 調大音量)
修改sgtl5000 (initial register) : sound/soc/codecs/sgtl5000.c 
修改imx 設定 for sgtl5000 : sound/soc/imx/imx-sgtl5000.c

GPIO button: (Keyboard button)
	cat /dev/input/by-path/platform-gpio-keys-event- (IMX6-Q7)
	printk("gpio_keys_report_event : %d, %d, %s \n",button->code,button->gpio,button->desc);(gpio_key_report_event function)
		button->code ==> SMARC/kernel_imx/include/linux/input.h (#define KEY_HOME		102 ...)

Check Event : hexdump -C /dev/input/event0

mcu_version

cat /sys/devices/platform/mcu_efm.0/mcu_version

lsusb : list usb device

Debug Print相關輸出 : 
printk("%s(%d)\n",__FILE__,__LINE__);	(列印Debug Message)
printk("%s(%d) : cmd=%d, value=%d\n",__FILE__,__LINE__,cmd,value);

尋找資料 : 
grep -r "cpu is" arch/
尋找檔案 :
find /lib  -name ld*


cat /proc/cmdline	cat cmdline參數

====================================== input device ======================================
touchscreen :
cat /dev/input/event1	(抓touch panel的info)
cat /sys/class/input/input1/name  (device = max11801_ts)

3-AXIS
cat /sys/class/input/input1/name  (device = mma845x)
echo 1 > /sys/class/input/input1/enable
echo 1 > /sys/class/input/input1/position
hexdump -C -n 128 /dev/input/event1 (get information)

====================================== 20140416 Q7-MP ======================================
Q7-Dual (WrappingMachine rootfs + LinuxBSP uImage + uboot)
	EFM - Q7-140410

====================================== Video Flow ======================================
1. board-mx6q_sabresd.c : 
	imx6q_add_ipuv3(0, &ipu_data[0]);		註冊 => devices-common.h => platform-imx_ipuv3.c => "imx-ipuv3"
	imx6q_add_ipuv3fb(i, &sabresd_fb_data[i]);	註冊 => devices-common.h => platform-imx_ipuv3.c => "mxc_sdc_fb"
	imx6q_add_ldb(&ldb_data);			註冊 => devices-imx6q.h	=> platform-imx_ldb.c => "mxc_ldb"
2. Driver :
	"imx-ipuv3"	=> ipu_common.c		(ipu : Image Process Unit)
	"mxc_sdc_fb"	=> mxc_ipuv3_fb.c	(fb : framebuffer)
	"mxc_ldb"	=> ldb.c		(LDB : lvds display bridge)
3. iobase :
	MX6Q_IPU1_ARB_BASE_ADDR		0x02400000

====================================== Video Debug ======================================
1. kernel define : 
	- imx6q_add_mxc_hdmi_core(&hdmi_core_data); 	---> IPU0/DISP1 (system default : HDMI use IPU0/DISP1)
	- imx6q_add_ldb(&ldb_data);			---> IPU1/DISP0		IPU1/DISP1 (system default : LVDS use IPU1/DISP1)
	- imx6q_add_ipuv3				---> Define IPU
	- imx6q_add_ipuv3fb(i, &q7_fb_data[i]);		---> Define fb0,fb1,fb2,fb3(ex:hdmi,ldb,lcd,
2. uboot define :
	- src=setenv bootargs ${bootargs} video=mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 video=mxcfb1:dev=ldb,LDB-XGA,if=RGB666 video=mxcfb2:off video=mxcfb3:off
		指定 : fb0 -> hdmi / fb1 -> ldb
	- fbmem=28M,28M,28M vmalloc=400M		---> framebuffer fb0=28M fb1=28M fb2=28M
3. mxc_ipuv3_fb.c : 
		fb0 ---> /sys/class/graphics/fb0/name	---> DISP3 BG (HDMI)
			 /sys/class/graphics/fb1/name	---> DISP3 FG (HDMI)
		fb1 ---> /sys/class/graphics/fb2/name	---> DISP4 BG (LDB)
			 /sys/class/graphics/fb3/name	---> DISP4 FG (LDB)
4.
	 	/sys/devices/platform/mxc_hdmi/fb_name	---> DISP3 BG
		/sys/devices/platform/mxc_ldb		--->
		/sys/devices/platform/mxc_hdmi_core	---> 

5.	xserver-xorg-video-imx-viv-3.0.35-4.0.0.tar.gz	===>	vivante_display.c
		xf86DrvMsg( 0, X_INFO , "Alston(vivDisplayPreInit) -'%s' \n" , vivPtr->mFB.fbDeviceName ) ;

============> ???? Configuration ??
1) Device Drivers -> Graphics Support -> <M> /dev/agpgart (AGP Support) ---> 
1a) and under /dev/agpgart (AGP Support) ---> <M> AMD Opteron/Athlon64 on-CPU GART support 

2) Device Drivers -> Graphics Support -> <M> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) ---> 
2a) and under Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) ---> <M> ATI Radeon 
                                                                                   [*]   Enable modesetting on radeon by default - NEW DRIVER3) Device Drivers -> Graphics Support -> {*} Support for frame buffer devices ---> 
3a) and under Support for frame buffer devices ---> [*]   Enable firmware EDID 
                                                    [ ]   Framebuffer foreign endianness support  ---> 
                                                    [*]   Enable Video Mode Handling Helpers 
                                                    [*]   Enable Tile Blitting Support 

and do not select any framebuffer drivers.
4) Device Drivers -> Generic Driver Options ---> -*- Userspace firmware loading support 
                                                  []    Include in-kernel firmware blobs in kernel binary 
                                                  ()    External firmware blobs to build into the kernel binary

====================================== MFG-Tool ======================================
  <LIST name="ubuntu-SabreSD-eMMC" desc="Choose eMMC android as media">
    <CMD state="BootStrap" type="boot" body="BootStrap" file ="files/linux/u-boot.bin" >Loading U-boot....Alston</CMD>
    <CMD state="BootStrap" type="jump" > Jumping to OS image. </CMD>
-----------> 跳到我們要的UBOOT

====================================== Uboot/reg read ======================================
Boot Mode Register --> HW
20D_8004 SRC Boot Mode Register 1 (SRC_SBMR1) 32 R 0000_0000h   
20D_801C SRC Boot Mode Register 2 (SRC_SBMR2) 32 R 0000_0000h
Uboot : ==>  md 20d8004 (讀register)
020d8004: 00001040 00000001 00000000 00000000    @...............
020d8014: 00000000 0000001f 3a000001 00000000    ...........:....
020d8024: 00000000 00000000 00000000 00000000    ................
020d8034: 00000000 00000000 00000000 00000000    ................

====================================== reg read/write ======================================
	Uboot : 
		md 2020000 1 (read Absolute Address 1個32bit)
		mw 2020040 41 (write UART1_UTXD 輸出A)

	kernel : ???
		ldb->reg = ioremap(base_addr, res->end - res->start + 1);
		ldb->control_reg = ldb->reg + 2;
		ldb->gpr3_reg = ldb->reg + 3;
		readl(ldb->control_reg);	(Read)
		writel(reg-value, ldb->control_reg);	(Write)
		writel(value, reg);	(Write)

	filesystem :
		/unit_tests# ./memtool 2184800 16	(read)
		/unit_tests# ./memtool 2184800=00031402	(write)
====================================== QC_Tool 程式解釋 ======================================
1. Host(X86 CPU) --> 系統 :X86(ARM)--> Compile GetDlgItem(Windows)(Linux Windows Compile )	---> elf(arm)/pe(Win32)
	X86(WINDOWS)--->Wine configuration(arm)
2. execute loader
3. WinMain() : Windows第一個執行檔 --> Loading resource.rc / resource.h(DLG_MAIN)
4. ResEdit : Resource 編輯器(Win32) -->產生 resource.rc / resource.h 視窗
5. resource 編輯器 --> .o
6. DlgMain() : WM_INITDIALOG 第一個承接的message
7. Rs232 pc顯示錯誤 : 登錄編輯程式(regedit) - HKEY_LOCAL_MACHINE - HARDWARE - DEVICEMAP - SERIALCOMM - Winachsf0 刪除

====================================== VirtualBox ======================================
first install流程 : VirtualBox 相關更動
1. VirtualBox - 存放裝置"加入硬碟" example : Linux.vdi
2. StartUp - Terminal : ls /dev/sd* - 可以查詢到 example :/dev/sda /dev/sda1 /dev/sda2 /dev/sdb(新加入硬碟)
3. sudo mkfs.ext4 /dev/sdb (對新硬碟format)
	mkfs.vfat -F 32 -n Hdd_name /dev/sdd1 (fat32)

4. 透過ls -l /dev/disk/by-uuid (查詢UUID)	example : b0b35dc8-0297-4a87-bc39-ba9ba863b1e0
5. 修改 /etc/fstab	UUID=b0b35dc8-0297-4a87-bc39-ba9ba863b1e0 /home/retronix/work/Linux   auto  defaults 0 2
		或	UUID=b0b35dc8-0297-4a87-bc39-ba9ba863b1e0 /home/retronix/work/Linux   ext4  error=remout-ro 0 2	(前)
	XXXXa. 掛上VM VirtualBox - Second HDD : /home/retronix/work/Linux
	XXXXb. /etc/fstab : uuid ---位置 ext4 default 0 2 (無效)
	XXXXc. sudo chown root:retronix Linux (更改為home權限)

Virtual Box : 硬體描述檔掛了
	1. New 一個 , Linux - Ubuntu 64 Bit 選取現有硬碟.
	2. 再進去Virtual Box硬體描述檔設定裡調整 - First HDD(IMX6) / 新增的 Second HDD(Linux)
	3. 掛載VBoxGuestAdditions.iso, 再進去Linux中,直接執行光碟autorun.sh即可(root權限)
	4. 已經回復完成

====================================== Driver Print info ======================================
	xf86Msg(X_ERROR,"Alston (xf86BusConfig) layout->screen->device :  %s --------->\n", layout->screen->id);
	xf86DrvMsg( 0, X_INFO , "Alston(xf86BusConfig) --------'%s''%s''%d''%s'\n" , xf86ConfigLayout.id,xf86ConfigLayout.screens->screen->id
			 , xf86ConfigLayout.screens->screen->screennum, xf86ConfigLayout.screens->screen->device) ;

====================================== 使能linux驱动中的dev_dbg ======================================
linux设备驱动调试，我们在内核中看到内核使用dev_dbg来控制输出信息，这个函数的实质是调用 printk(KERN_DEBUG )来输出打印信息。要打开这个开关需要下面两步。
1、打開調適開關： 你調適的文件中必然包含了<linux/device.h>，或者《linux /paltforam_device.h》，後者包含了前者，
		使用#define DEBUG 1 來打開調適開關，在包含此頭文件之前
2、修改文件kernel/printk文件 : 
	其中DEFAULT_CONSOLE_LOGLEVEL 为终端console输出的最低级别，比这严重的都将输出。原来该值为7，则调试信息无法输出，修改为8则全部有输出
3. linux/kernel文件中 
	#define    KERN_EMERG    	"<0>"    	/* system is unusable            	*/ 
	#define    KERN_ALERT    	"<1>"   	/* action must be taken immediately    	*/ 
	#define    KERN_CRIT    	"<2>"    	/* critical conditions            	*/ 
	#define    KERN_ERR    		"<3>"    	/* error conditions            		*/ 
	#define    KERN_WARNING    	"<4>"    	/* warning conditions            	*/ 
	#define    KERN_NOTICE    	"<5>"    	/* normal but significant condition    	*/ 
	#define    KERN_INFO    	"<6>"   	/* informational            		*/ 
	#define    KERN_DEBUG    	"<7>"   	/* debug-level messages        		*/

====================================== Wrapping Machine - BSP BIN 製作 ======================================
0. 外卡 SDCARD - kernel 要先將protection機制移除 （drivers/mmc/card/block.c) -( mmc_blk_alloc_parts -> //if (!mmc_card_mmc(card)) )
1. 清除emmc資料	(外卡開機 : 	1. dd if=/dev/zero of=/dev/mmcblk0 bs=1024)	(od -x /dev/mmcblk0   check mmcblk0內容)
				2. echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				3. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=1 count=1023
				4. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
2. MFG 重新燒錄 (燒錄BSP)
3. emmc dd到檔案 (取BSP檔)	1. mount /dev/sda1 /mnt (8G USB mount)
				2. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 count=1 		(先dd 0-1k)
				3. echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				4. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 seek=1 skip=1 count=767	(再dd 1K-768K)
				5. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				6. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 seek=768 skip=768	(dd 768K-4G)
4. 清除emmc資料			1. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 count=1 （清 0 - 1K)
				2. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=768 (清 768K - )
				3. echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				4. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=1 count=767 (清 1K - 768K)
				5. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config

5. 檔案dd到emmc (驗證BSP)

附	-dd zero 進入emmc,使用mini-SD開機失敗,eth0要插著網路線? 再試一次 OK!!
	-dd zero 進入emmc時,出現infomation: dd: writing '/dev/mmcblk0':No space left on device

For: freescale iMx6-kernel protection機制
(註 : 先移除掉 mmcblk0boot0/mmcblk0boot1,避免變更emmc設定時,當機)
cat /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_info	查看目前emmc設定
echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config 設定emmc - PARTITION_ACCESS : 1
	=> 	才可以read/write,及dd 1K-1M(emmc)
	a. dd if=/dev/mmcblk0 of=/mnt/WR_PVT_BSP.bin bs=1M (emmc dd到檔案)
	b. (dd if=/dev/zero of=/dev/mmcblk0 bs=1M)清除
	c. (dd if=/mnt/WR_PVT_BSP.bin of=/dev/mmcblk0 bs=1M count=1) (檔案dd到emmc)
echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config 設定emmc - PARTITION_ACCESS : 0
	=>	才可以read/write,及dd  0-1K和1M-以後(emmc)
	a. dd if=/dev/mmcblk0 of=/mnt/WR_PVT_BSP.bin bs=1M seek=1 skip=1 (emmc dd到檔案)
	b. (dd if=/dev/zero of=/dev/mmcblk0 bs=1M seek=1)清除
	c. (dd if=/mnt/WR_PVT_BSP.bin of=/dev/mmcblk0 bs=1M seek=1 skip=1) (檔案dd到emmc)
要切回 - 設定emmc - PARTITION_ACCESS : 0  才可以開機

小程式 : ddmmcblk0.c	(清除mmcblk0前面1K, 8Byte*128=1KByte)
compile : ubuntu terminal --> arm-linux-gnueabi-gcc -static ddmmcblk0.c -o ddmmcblk0
#include <sys/types.h>
#include <sys/time.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <stdlib.h>
int main()
{
	int loop,size=128;
	char cbuf[8]={1,2,3,4,5,6,7,8};
	int fp;
	fp=open("/dev/mmcblk0", O_RDWR | O_NOCTTY );
        printf("OPEN mmcblk0 OK\n");  
	if(fp){	
		for(loop=0;loop<size;loop++)
			write(fp,cbuf,8);			
        	printf("write mmcblk0 OK\n");    								
    	}
	close(fp);
}
回讀: dd if=/dev/mmcblk0 of=value.txt bs=1024 count=1 (回讀 1024Byte*1=1KByte)
顯示: od -x value.txt (可以check value)
顯示: hexdump /dev/mmcblk3 -n 2048 (mmcblk3 2048bytes contents)
====================================== Wrapping Machine - MP測試相關問題 ======================================
udhcpc -b -i eth0	//獲取eth0的ip地址 (-b : udhcpc切换到后台,避免script停住)
date 022812402016	//設定系統時鐘 2016年2月28日12時40分
busybox hwclock -w	//将系统時鐘寫入硬件時鐘
timedatectl status  (顯示系統的當前時間和日期)
timedatectl set-timezone Asia/Taipei (設定本地時區)
timedatectl set-local-rtc 1 （硬體時鐘設定為本地時區）
timedatectl set-local-rtc 0 （硬體時鐘設定為協調世界時（UTC）)
timedatectl set-time "2014-11-08 06:40:00" (設定日期 時間)

包裝機,外卡MP測試 (Flow 變更)	---------------------------
a. 配合客戶 : 變更uboot ->	1. #define CONFIG_ENV_OFFSET	(768 * 1024)
				2. mmc read ${loadaddr} 0x800 0x2000    Kernel位置變更為1M
b. 內卡 : MFG燒錄客戶FW ->	1. /dev/zero -> 768K
				2. uImage -> 1M
				3. 開機一次,save uboot參數!!!
c. 變更 rtx_setenv -> 		1. /dev/mmcblk0 -> 12M 變更為 768K
	rtx_setenv_mmcblk1 ->	2. /dev/mmcblk1 -> 12M 變更為 768K
d. MP測試程式變更 ->		1. MP_Test -> 設定內/外卡 -> Mem_Test=Redo (set serial_number後)
				2. func_DDR() -> 讀外卡 Mem_Test -> 寫內卡Mem_Test -> 清除外卡 Mem_Test
e. miniSD card -> 		1. uboot -> a.
				2. kernel -> dd 1M位置
				3. /dev/zero -> 768K
				4. rootfs -> 不變
				5. cp MP_Test
				6. mkdir SDCARD_TEST
				7. cp rtx_setenv/rtx_setenv_mmcblk1 ->/usr/bin/
包裝機,外卡MP測試 (SD-AutoUpdate 變更) ---------------------
a. 外卡 : uboot ->		1. 原位置 #define CONFIG_ENV_OFFSET	(12 * 1024 * 1024)
				2. mmc read ${loadaddr} 0x6800 0x2000 Kernel原位置 13M
b. 內卡 : 原MFG燒錄客戶FW ->	1. /dev/zero -> 12M
				2. uImage -> 13M
				3. 開機自動會寫入參數
c. 變更 rtx_setenv -> 		1. /dev/mmcblk0 -> 12M 
	rtx_setenv_mmcblk1 ->	2. /dev/mmcblk1 -> 12M
d. MP測試程式變更 ->		1. MP_Test -> 設定內/外卡 -> Mem_Test=Redo (set serial_number後)
				2. func_DDR() -> 讀外卡 Mem_Test -> 寫內卡Mem_Test -> 清除外卡 Mem_Test
e. miniSD card -> 		1. uboot -> a.
				2. kernel -> dd 13M位置
				3. /dev/zero -> 12M
				4. rootfs -> 不變
				5. cp MP_Test
				6. mkdir SDCARD_TEST
				7. cp rtx_setenv/rtx_setenv_mmcblk1 ->/usr/bin/

====================================== Wrapping Machine - MP ======================================
1. uboot.bin + uImage + rootfs + parameter change(external SD card boot)
	開關機測試 : (runintest)
	a. /etc/rc.d/rcS <- Add rcS
	b. /home/user <- Add file runintest (count計數)
	c. /home/user <- Add file mmc_2M_count (write count to emmc 2M position)
	d. 紀錄 : 	(1) /home/user/mmc_2M_count -l (程式透過rtx_setenv-0.0.1實現)
			(2) /etc/count 也有備份
	f. 製作 : 	(1) cfg select name = i.MX6DL-SABRESD-MINISD
			(2) mfg - > OK
			(3) uboot parameter - > bootcmd=run bootcmd_microsd
			(4) add a,b,c,(a1,b1,c1)
	MP測試 : 製作注意事項
	a1. MP_Test -> Add folder /MP_Test/	(MP_Test_config need modify)
	b1. SDCARD_TEST -> Add /SDCARD_TEST/
	c1. rtx_setenv_mmcblk1 -> Add /usr/bin/
	d1. wdgdis -> Add /usr/bin

====================================== Wrapping Machine - MP Test card 20140317 ======================================
1. uboot.bin	-	20140107 - mtest_10sec		
2. kernel	-	20131230 - kernel
3. rootfs	-	20140102 - rootfs
4. rtx_setenv	-	20131128 MP - 12M	-	-> Add /usr/bin/
   rtx_setenv_mmcblk1		-> 	Add /usr/bin/
5. Add folder /MP_Test/		->	MP_Test_config need modify
6. uboot parameter 		->	run bootcmd_microsd
7. Add folder /SDCARD_TEST	->	/

====================================== Wrapping Machine - MP Test card 20140429 ======================================
1. uboot.bin	-	20140429 - uboot
2. kernel	-	20140429 - kernel
3. rootfs	-	20140102 - rootfs
4. rtx_setenv	-	20131128 MP - 12M	-	-> Add /usr/bin/
   rtx_setenv_mmcblk1		-> 	Add /usr/bin/
   wdgdis	-	20140429 - MCU		-	-> Add /usr/bin/
5. Add folder /MP_Test/		->	MP_Test_config need modify
6. uboot parameter 		->	run bootcmd_microsd
7. Add folder /SDCARD_TEST	->	/
8. rcS		-	20140429 - RUNIN	-	-> Modify /etc/rc.d/rcS
   mmc_2M_Count - 	20140429 - RUNIN	- 	-> Add /home/usr/
   runintest	-	20140429 - RUNIN	- 	-> Add /home/usr/

====================================== uboot GPIO Debug ======================================
cpu/arm_cortexa8/start.S 

+.equ DEF_BASE_GPIO_ADRESS , 0x209C000
+.equ DEF_BASE_GPIO_ADRESS1 , 0x209C004
+.equ DEF_BASE_GPIO_VALUE  , 0x00000000
 
 .globl _start
 _start: b	reset
@@ -101,6 +104,14 @@ FIQ_STACK_START:
  */

 reset:
+
+	ldr r0 ,=DEF_BASE_GPIO_ADRESS1
+	ldr r1 ,=0xFFFFFFFF
+	str r1,[r0]
+	ldr r0 ,=DEF_BASE_GPIO_ADRESS
+	ldr r1 ,=DEF_BASE_GPIO_VALUE
+	str r1,[r0]
+/*	b reset	*/

====================================== UBOOT MCU COUNT DEBUG ======================================
lib_arm/board.c

@@ -445,6 +445,8 @@ void start_armboot (void)
 #if defined(CONFIG_VFD) || defined(CONFIG_LCD)
 	unsigned long addr;
 #endif
+	ulong MCUcount=0;
+	uint8_t mcu_count[4];
 
 	/* Pointer is writable since we allocated a register for it */
 	gd = (gd_t*)(_armboot_start - CONFIG_SYS_MALLOC_LEN - sizeof(gd_t));
@@ -611,8 +613,14 @@ extern void davinci_eth_set_mac_addr (const u_int8_t *addr);
 //		usb_stor_scan(1);
 //	}

+	i2c_read(0x0C,0xEB,1,&mcu_count,4);
+	MCUcount = mcu_count[0]+mcu_count[1]*256+mcu_count[2]*256*256;
+	printf("\n\n MCU_COUNT = %d \n\n",MCUcount);
+
 	s = getenv ("Mem_Test");
 	if (!strcmp(s,"Redo")) {
+//	for(MCUcount=1;MCUcount<999999;MCUcount++){
+//		printf("\nMemory_Test_COUNT = %d \n",MCUcount); 
 		mem_test(6, 0, 0, 0);
 	}
====================================== Uboot Auto Update ======================================
a. SDCARD - autorun.sh / check_code / uImage-recovery / uramdisk-imx6.img / 更新的code
b. Uboot - bootsel.c / makefile + bootsel.o /  CONFIG_BOOT_SYSTEM(define)
c. Config - Selsec 
		General setup ---> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
		Device Drivers  ---> [*] Block devices  ---> <*>   RAM block device support : 	(1)     Default number of RAM disks)
												(4096)  Default RAM disk size (kbytes)
d. kernel - 把EFM-i2C註冊 mask掉.(因為開機會當機) -> 更名 uImage-recovery (i2c_register_board_info(1, mxc_i2c1_board_info,...)
e. 開機 -> miniSD_CARD -> check_code -> autorun.sh -> 更新code -> OK!!
f. (需要 autorun.sh -> 建立 /tmp/restart -> 才不至於重複開機2次)

====================================== Memory Test ======================================
a. include/config/mx6dl_sabresd.h -->  uboot parameter
			1. bootcmd=run bootcmd_microsd
			2. Mem_Test=Mem_Test
b. lib_arm/board.c
	if (!strcmp(s,"Redo")) 
 		mem_test(6, 0, 0, 0);
	else if (!strcmp(s,"Test_2_Hours")) {				//Check Mem_Test = Test_2_Hours (start test)
		printf("\nMem_Test = %s ",s); 				//Print uboot parameter setting	
		for(MCUcount=1;MCUcount<21;MCUcount++){			//Memory Test 20 times
			printf("\nMemory_Test_COUNT = %d ",MCUcount); 
			mem_test(6, 0, 0, 0);
		}
		setenv ("Test", "FINISH 2 HOURS !!");			//finish test & Mem_Test = FINISH 2 HOURSE !!
		printf("\n TEST FINISH !!! \n"); 
		saveenv();
 	}

====================================== Android ======================================
橋接 : 
1. SMARC/device/fsl/sabresd_6dq/init-R064.rc
2. SMARC/device/fsl/sabresd_6dq/recovery-SMARC.fstab
3. SMARC/device/fsl/sabresd_6dq/vold-SMARC.fstab

Download Android Source code :
a. https://172.18.10.75/trac/StarFish -> Howto -> Attachments -> repo -> download.sh(download_Android.sh -> imx6)
b. https://172.18.10.75/cgi-bin/cgit.cgi/platform/manifest.git/?h=AAI4.2.2-1(預先知道要下載哪一個 search mani -> AAI4.2.2-1)
c. ./download.sh SMARC AAI4.2.2-1 (建SMARC folder, 自AAI4.2.2-1 branch下載)
d. ./build_4.2.2.sh all(cp build_4.2.2.sh SMARC folder)
e. error ----------> (z, lzo2, uuid, m, c)incompatible衝突
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libz.so when searching for -lz
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libz.a when searching for -lz
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/liblzo2.so when searching for -llzo2
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/liblzo2.a when searching for -llzo2
	/usr/bin/ld: cannot find -llzo2
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libuuid.so when searching for -luuid
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libuuid.a when searching for -luuid
	/usr/bin/ld: cannot find -luuid
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libm.so when searching for -lm
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libm.a when searching for -lm
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libc.so when searching for -lc
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libc.a when searching for -lc
	collect2: ld 回傳 1
	make: *** [out/host/linux-x86/obj/EXECUTABLES/mkfs.ubifs_intermediates/mkfs.ubifs] Error 1
f. 	(libz.so -> /lib/x86_64-linux-gnu/libz.so.1.2.3.4)
	(libm.so -> /lib/x86_64-linux-gnu/libm.so.6)
	(libc.so)
	(liblzo2.so -> liblzo2.so.2.0.0)
	(libuuid.so -> /lib/x86_64-linux-gnu/libuuid.so.1.3.0)
	安裝ubuntu12.04所需pkgs==> http://source.android.com/source/initializing.html.
g.
	下列的額外套件將被安裝：
  	libc-bin libc-dev-bin libc6 libc6:i386 libc6-dev:i386 libc6-dev-i386 libc6-i386 libgl1-mesa-glx libglapi-mesa libglapi-mesa:i386 libx11-6
  	libx11-6:i386 libx11-dev mesa-common-dev
	建議套件：
  	gnupg-curl gnupg-doc glibc-doc glibc-doc:i386 locales:i386 manpages-dev:i386 ncurses-doc:i386
	推薦套件：
  	gcc:i386 c-compiler:i386
	下列套件將會被【移除】：
  	lib32ncurses5-dev libkaya-ncurses-dev libncurses5-dbg libncurses5-dev
	下列【新】套件將會被安裝：
  	libncurses5-dev:i386
	下列套件將會被升級：
  	curl gnupg libc-bin libc-dev-bin libc6 libc6:i386 libc6-dev libc6-dev:i386 libc6-dev-i386 libc6-i386 libgl1-mesa-dev libgl1-mesa-glx
  	libgl1-mesa-glx:i386 libglapi-mesa libglapi-mesa:i386 libx11-6 libx11-6:i386 libx11-dev libx11-dev:i386 libxml2-utils mesa-common-dev
  	x11proto-core-dev xsltproc
	安裝 => sudo apt-get install uuid

	?? sudo apt-get install liblzo2-dev uuid-dev (無效)
h.
	更改external/mtd-utils/mkfs.ubifs/Android.mk
		#LOCAL_CFLAGS+= -Wmissing-prototypes -Winline
		LOCAL_CFLAGS+= -Wmissing-prototypes -Winline -m64
		LOCAL_LDFLAGS += -L/usr/lib/x86_64-linux-gnu
		#LOCAL_LDLIBS:= -lz -llzo2 -lm -luuid
		LOCAL_LDLIBS:= -lz -llzo2 -lm -lc -lgcc -luuid -m64

i.
	./repo forall -c git reset --hard (checkout all)
	./repo forall -c git status

j. 切換BRANCH:
git checkout -b Q7-AXIOMTEK Q7	(由Q7環境為基礎, 建立新的 branch )

====================================== Android Update Tool ======================================
1. https://192.168.4.44/trac/StarFish/wiki 	--> alstonlai / please
2. wiki  -->  OS-Release Note
3. ----> Download file, Please search ticket 355. 
4. Attachments  --> Attach file  -->  Add attachment

====================================== Android uart issue ======================================
SMARC/device/fsl/imx6/etc/ueventd.freescale.rc  -- 更改 mask : #/dev/ttymxc4              0660   bluetooth  bluetooth    XX無效

====================================== Wifi driver ======================================
android :
1. insmod /mnt/mmcblk1p1/MP_Test/rt2800usb.ko (SMARC/hardware/imx/wlan/rt2800/os/linux/rt2800usb.ko)
2. /system/etc/wifiRT/RT2870STA.dat (Initialized need)
3. ifconfig wlan0 up
4. /usr/sbin/wpa_supplicant -iwlan0 -c/etc/wpa_supplicant/wpa_supplicant.conf &
wep method :
wpa_cli -iwlan0 -p/var/run/wpa_supplicant add_network
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 ssid \"Air_Remote\"
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 key_mgmt NONE
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 wep_key0 \"1234567890123\"
wpa_cli -iwlan0 -p/var/run/wpa_supplicant enable_network 0
udhcpc -i wlan0 &
ping 8.8.8.8

====================================== SATA Enable ======================================
1. kernel config :
	<*> ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
		[*]   Support for SATA (deprecated; conflicts with libata SATA driver)
		[*]     ATA disk support
	<*> Serial ATA and Parallel ATA drivers  --->
		[ ]   SATA Port Multiplier support 
		<*>   Platform AHCI SATA support
2. read information
	cat /sys/block/sda/device/model
3. SATA info :
	cat /sys/devices/platform/ahci.0/host0/target0\:0\:0/0\:0\:0\:0/block/sda/sda1/size

====================================== smarc-android (linux) ======================================
kernel : 紀錄--
#	arch/arm/configs/imx6_SC64_android_defconfig (Linux)
#	arch/arm/mach-mx6/Kconfig (Linux)
#	arch/arm/mach-mx6/Makefile (Linux)
#	arch/arm/mach-mx6/board-mx6dl_smarc (Linux).h
#	arch/arm/mach-mx6/board-mx6q_smarc (Linux).h
#	arch/arm/mach-mx6/board-mx6q_smarc (Linux).c
#	arch/arm/mach-mx6/mx6q_smarc_pmic_pfuze100 (Linux).c
#	arch/arm/plat-mxc/include/mach/common (Linux).h
#	arch/arm/tools/mach-types (Linux)
#	sound/soc/imx/Kconfig (Linux)
#	sound/soc/imx/imx-sgtl5000 (Linux).c
uboot : 紀錄--
#	Makefile (Linux)
#	board/freescale/mx6q_smarc (Linux)/	資料夾中檔案要更改
#	include/asm-arm/mach-types (Linux).h
#	include/configs/mx6_SC64_android (Linux).h

====================================== command issue ======================================
mount	(util-linux - X)(busybox - O)
setterm (util-linux - O)
所以path : 可以決定我使用的是busybox or util-linux mount 
透過spec --> rm util-linux (mount) --> rm $RPM_BUILD_ROOT/%{pfx}/bin/mount

====================================== 包裝機 MP 測試步驟  ======================================
A. Board Ready :
	Jump : 56 ON (Serial Download)
	MFG : cfg(name = Teraoka-eMMC) 燒錄.
	Jump : 12367 ON (Emmc Boot)
	開機1次.
	關機,移除RTC battery.
B. MP Test :
	Jump : 27 ON (MiniSD Boot)
	Connect 接上, UART線接上, RTC battery 接上, 電錶接上, OTG線接上, USB storage接上..
	external SD - FTP IP / Passward 要正確. (runintest)

	Runintest : 
		開關機120次.
	紀錄: /home/user/mmc_2M_Count -l (check次數)

	PC QC8 開啟 :
		開始測試 - - 移除runintets程式.
		1. Power On - Console有顯示.
		2. serial number / mac1 / mac2
		3. restart - DDR test (6-7min)
		1. HW測試 - FAN 燈, 13 Voltage
		2. RTC測試 - time(開機系統時間)
		3. LED測試 - LED flash
		4. GPIO測試 - RIO / DSR GPIO
		5. Audio測試 - Mic / LineIn / HP / Speaker
		6. 3AXIS測試 - 
		7. TouchPanel -
		8. USB
		9. WIFI
		10. Net0
		11. Net1
		12. RS232
		13. DDR
		14. SDCARD
	紀錄..
	J9 	jump拿掉
	J36	電池上.
	J32 x40
	MiniSD x40
	UART issue ( regedit ): HKET_LOCAL_MACHINE/HARDWARE/DEVICEMAP/SERIALCOMM 移除
====================================== PMIC register ======================================
		pfuze_reg_read(pfuze, 0x6c , &value);
		printk("vgen1 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6d , &value);
		printk("vgen2 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6e , &value);
		printk("vgen3 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6f , &value);
		printk("vgen4 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x70 , &value);
		printk("vgen5 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x71 , &value);
		printk("vgen6 = %2x \n",value);

====================================== install xfce4 ======================================
1. ubuntu - initial 
2. lightdm (視窗管理系統)-(管理-桌面管理器)
3. xfce4 (桌面管理器)
4. gmone - lib (美觀 - icon)

install : cmd (記得接網路線)
ip addr 
1. apt-get install xfce4
2. apt-get update (install fail)
3. apt-get install  lightdm
4. passwd admin(更改admin的密碼)
apt-get install gnome-session* (顯示相關pkg)(密碼輸入錯誤)
5. apt-get install gnome-session ( X )
5. apt-get install xfce4-session
6. apt-get install synaptic (套件管理程式)

check:
/etc/network# vi interfaces
#auto eth0 (mask)
#iface eth0 inet loopback (mask)
ping www.google.com (OK)
/etc/hosts
/etc/resolv.conf
/etc/resolvconf/resolv.conf.d/tail
sudo firefox (OK - 提高權限)  ==========> kernel config 所造成 ===> (CROSS_COMPILE選)arm-linux-gnueabihf-
=> SMARC/kernel_imx/net/ipv4/af_inet.c  => current_has_network(void) => CONFIG_ANDROID_PARANOID_NETWORK (X)
	=> SMARC/kernel_imx/security/commoncap.c => AID_NET_RAW (91) / AID_NET_ADMIN (93) Mask掉

=> sudo apt-get install ubuntu-restricted-extras (flash player) ??

-----------------------------------------權限-----------------------------------
cat /etc/group  
cat /etc/passwd
ls -l /etc
cat securetty
cat /etc/security/access.conf

cat /etc/pam.conf
cat /etc/pam.d/ ....
cat /etc/pam.d/login
cat /etc/default/locale
cat /etc/environment
cat /etc/login.defs
cat /etc/shadow

--------------------------------------------------------------------------------
fcitx - 中文化
====================================== xfce4 已裝 ======================================
modify  /etc/hosts
	/etc/hostname
install	ibus
	ibus-chewing
	gnome-icon-theme-full
	fonts-arphic-uming	中文字型
====================================== freescale ubuntu : upgrade ======================================
1. rm /var/cache/apt/archives/*.deb (空間太大,先移除)
2. depmod -a
3. add console : 
			/etc/init/serial-auto-detect-console.conf	(或 auto-serial-consol.conf)
			/bin/serial-console				(或 auto-serial-consol)
4. module
		:	make uImage
		:	make modules
		: 	make DEPMOD=/bin/true INSTALL_MOD_PATH=../tmp/kernel modules_install 
		:	make DEPMOD=/bin/true INSTALL_HDR_PATH=../tmp/kernel/usr/src/linux headers_install
		:	sudo chown -R root:root ../tmp/kernel/*
		:	sudo cp -avrf ./tmp/kernel/* ./rootfs/.
4.1. upgrade	:	do-release-upgrade
5. 登入 
		:	sudo passwd linaro -> admin
6. ssh
		: 	ps -A | grep ssh
7. ip addr	
		:	inet 192.168.4.60
8. 另台電腦
		:	putty : SSH : 192.168.4.60
				login : linaro / admin

====================================== Network services ======================================
/etc/services (Network services ) domain 這個關鍵字，就可以查到 53 這個 port 啦(DNS 使用的 port number)

====================================== Pkgs Compile 順序 ======================================
1. patch -p1 patch-file		(Patch file)
2. ./configure --prefix=/usr	(創建Makefile)
3. make				(Compile)
4. make install			(Install)

5. export PATH=$UNSPOOF_PATH (只切換到Host環境編譯)
	export PATH=$SPOOF_PATH (到目前資料夾編譯 ?)

====================================== Building Info ======================================
uboot : 
	make distclean
	make mx6q_q7_config
	make
kernel :
	make distclean
	make imx6_defconfig
	make menuconfig
	make uImage

建立LVDS : 1024x600
struct fb_videomode {
	const char *name;	/* optional */
	u32 refresh;		/* optional */
	u32 xres;
	u32 yres;
	u32 pixclock;
	u32 left_margin;
	u32 right_margin;
	u32 upper_margin;
	u32 lower_margin;
	u32 hsync_len;
	u32 vsync_len;
	u32 sync;
	u32 vmode;
	u32 flag;
};
	static struct fb_videomode ldb_modedb[] = {
	 	"LDB-SMARC", 60, 1024, 600, 19528,
		160, 80,
	 	18, 10,
	 	80, 7,
	 	0,
	 	FB_VMODE_NONINTERLACED,
	 	B_MODE_IS_DETAILED,},	

名稱 : LDB-SMARC	刷新頻率 : 60
分辨率 : 1024 x 600	時鐘 : 10^12 / (1024+160+80+80)*(600+18+10+7)*60=19528
sync : 0		vmode : FB_VMODE_NONINTERLACED
flag : B_MODE_IS_DETAILED

ldb問題 : kernel setting 要正確 RGB24 (不然只靠uboot設定RGB24,還是無法正確)
目前設定 RGB24, bpp=16, ldb=1024x600
ubuntu : dd if=/dev/zero of=/dev/fb0 bs=1024 count=600 (擦拭半張圖)
android : dd if=/dev/zero of=/dev/graphics/fb0 bs=1024 count=600 (擦拭半張圖)

====================================== Q7-Quad Android ======================================
(借助SMARC android)
Android : Q7 --> Q064 --> ./build_4.2.2.sh
IMX6Q : 
	uboot : 
		1. MX6_Q064_android.h
			"set_display=run lvds\0" \
			"lvds=setenv bootargs ${bootargs} video=mxcfb0:dev=ldb,LDB-1024x600,if=RGB666,bpp=32 video=mxcfb1:off video=mxcfb2:off fbmem=28M vmalloc=400M\0" \

	kernel :
		1. board-mx6q_q7.c
			.mode_str = "LDB-1024x600",
		2. ldb.c
			"LDB-1024x600", 60, 1024, 600, 19528,
		3. hid-multitouch.c
			USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352) },
		4. hid-ids.h
			#define USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352	0x7352
		5. hid-core.c
			{ HID_USB_DEVICE(USB_VENDOR_ID_DWAV, USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352) },

====================================== Q7 Solo Android ======================================
New PC :
1. Download Android Source : ./download.sh SMARC AAI4.2.2-1
	a. Download download.sh and modify git ip -> server (192.168.4.44)
		ssh://gitolite@192.168.4.44/android/platform/manifest.git...
	b. Download repo and modify git ip
	c. Add .ssh (copy ssh to new pc)
	d. new pc update : .13.10 -> http://forum.xda-developers.com/showthread.php?t=2464683
		install Android Environment
		-> update error -> change /etc/apt/sources.list server
			-> sudo gedit -> /etc/apt/sources.list ->  us.archive.ubuntu.com(replace -> tw.archive.ubuntu.com)
		->Update environment and Start Download
	e. git config --global user.email "alston_lai@aai.com.tw"
	f. Start download success (user name : rtx-3110)
2. Building Code : ./build_4.2.2.sh all
	a. copy build_4.2.2.sh to SMARC folder
	b. new kernel-imx/arch/arm/config/imx6_Q062_android_defconfig (same as imx6_Q064_android_defconfig)
	c. compile : fatal error: uuid/uuid.h: --> need modify /external/mtd-utils/mkfs.ubifs/Android.mk
			LOCAL_CFLAGS+= -Wmissing-prototypes -Winline -m64	(Add -m64)
			LOCAL_LDLIBS:= -lz -llzo2 -lm -luuid -m64		(Add -m64)
	d. sudo apt-get install uuid uuid-dev liblzo2-dev --> uuid-dev:i386 / zib1g-dev:i386 / liblzo2-dev:i386
	e. compile success
3. install android
	a. sudo apt-get install git-cola
	b. sudo apt-get install Meld
	c. modify build_4.2.2.sh to Q061
	d. building finish
	e. copy bin to MFG and Update system
4. install apk
	a. copy apk to storage (fat32)
	b. Use AAI Tools - Install APK from storage

5. install touch-driver
	ldb.c add ldvs=1024x600
	add (__set_bit(INPUT_PROP_DIRECT, ts..)
	setting panel - lvds 1024x600 : LDB-Q7, RGB24

6. memory
	fbmem =  1920 * 1080 * 4(RGB alpha) * 3（預留 swapper) = 23.7M
	      =  1024 *600 * 4 *3 = 7.37M ( fbmem=8M )
	vmalloc=256M (DMA virtual memory ) 動態 效能 (128M X)
	gpu_memory=32M (給gpu使用) (64M X)



7. (vmalloc=256M gpu_memory=32M) 
	apk - wait 5 min - stable.

8. check memory	(free, vmstat, ps -aux, top, watch cat /proc/meminfo)
	cat /proc/meminfo
	ps



9. Android performace tunning (free memory..) - Android infrastructures
	- imx6.mk (device/fsl/imx6/) 需要調整
	- generic.mk (build/target/product/)
	- mini.mk 
	- full.mk
	
====================================== SMARC Quad LInux ======================================
uboot : 
	mx6_SC64_linux_defconfig
kernel :
	modules 調整
rootfs :
	1. mask vivita
		/etc/X11/xorg.conf	
	2. sudo gedit /etc/group
		add mlocate::124:root
====================================== SMARC Quad Ubuntu ======================================
New PC :
uboot-imx
	cp configs/mx6_SC64_android.h (need modify parameter, usb-keyboard need plug-out)
#	include/asm-arm/mach-types (Linux).h

kernal-imx :
	cp mach-mx6/Kconfig Makefile board-mx6dl_smarc.h board-mx6q_smarc.h board-mx6q_smarc.c mx6q_smarc_pmic_pfuze100.c
	cp sound/soc/imx/Kconfig imx-sgtl5000.c 
	cp tools/mach-types
	cp include/mach/common.h
	cp configs/imx6_SC64_linux_defconfig

	make menuconfig : <*> Switch class support
	process.c --> #ifdef CONFIG_RTC_DRV_EFM32
	"mkimage" command not found --> sudo apt-get install u-boot-tools
ubuntu :
	1. kernel : make modules --> cp /usr /lib to filesystem
	2. depmod -a
	3. mask vivita -> /etc/X11/xorg.conf (尚未連結成功)
	4. alt+ctrl+F1 -> passwd root -> change passwd
			  passwd linaro -> change passwd
	5. apt-get update
	6. apt-get upgrade
	7. do-release-upgrade 	(X)
Test :
	keyboard - no response!!
	1. uboot - keyboard detect .Fail (usb info)
	2. plug-out mouse - reboot to uboot - keyboard detect OK
	3. Boot to filesystem - plug-in mouse
	4. keyboard / mouse is OK

GPU : (Fail Pkgs)
	1. CP GPU hardfp/usr/include -> /usr/include
		  hardfp/usr/lib     -> /usr/lib
	2. ldd /hardfp/opt/viv_samples/vdk/tutorial1 (link is OK)
	3. find opengl ES2 sample code
	4. modify file /usr/include/EGL/eglvivante.h (#define LINUX , #define EGL_API_FB)
	5. gcc Hello.c -o Hello -lX11 -lEGL -lGLESv2 (compile)
	6. gdb ./Hello (debug)
	7. change GPU pkgs --> Fail
Linux-kernel :
	1. rebuild linux kernel+uboot
GPU : (OK)
	1. gpu-viv-wl-bin-mx6q-3.0.35-4.0.0 --> opt/viv_samples/vdk/tutorial1 --> success  !!!!!
	2. change link to X11
		/usr/lib/libVIVANTE.so  -->x11	
		/usr/lib/libGAL.so
		/usr/lib/libEGL.so
		/usr/lib/libEGL.so.1

			synaptic : install ntp / quicksynergy
			ntpd -q -n -p time.stdtime.gov.tw
			ntpdate time.stdtime.gov.tw

			sudo cp -avrf lib/* /lib/.
			sudo cp -avrf include/* /usr/include/.
			sync

			ls -la /usr/lib/libVIVANTE*
			sudo rm /usr/lib/libVIVANTE.so
			sudo ln -s /usr/lib/libVIVANTE-x11.so /usr/lib/libVIVANTE.so

			ls -la /usr/lib/libGA*
			sudo rm /usr/lib/libGAL.so
			sudo ln -s /usr/lib/libGAL-x11.so /usr/lib/libGAL.so

			ls -la /usr/lib/libEGL*
			sudo rm /usr/lib/libEGL.so
			sudo rm /usr/lib/libEGL.so.1
			sudo ln -s /usr/lib/libEGL-x11.so /usr/lib/libEGL.so
			sudo ln -s /usr/lib/libEGL-x11.so /usr/lib/libEGL.so.1

	3. build xserve-xorg-video-imx-viv-3.0.35-4.0.0.tar.gz (原生) -> "XFree86-DRI" missing on display ":0"
		((synaptic : install ntp : time setting ok / synergy)
		./build.sh --> 	(sudo ./build.sh)
				EXA :
					-> RANDR issue -> 
								mask RANDR check (configure.ac)
							  	mask RENDER check
							  	mask XV check
					-> XORG_CFLAGS / XORG_LIBS issue (No package 'Xorg-server' ..)
								export BOARD_CODE_ROOT=/home/../xserve-xorg-video-imx-viv-3.0.35-4.0.0

		-> apt-get upgrade -> dpkg: syntax error: unknown group `mlocate' in statoverride file -> sudo groupadd mlocate

====================================== Porting melfas driver ======================================
Timer -> polling (X) -> clk_enable (i2C)
schedule_delayed_work() -> polling

struct melfas_ts_data{ ....; struct delayed_work work; ....} 
static struct melfas_ts_data *tspoll;
static struct timer_list led_timer;
probe:
	struct melfas_ts_data *ts;
	INIT_DELAYED_WORK(&ts->work,melfas_ts_work);
	inti_timer(&led_timer); led_timer.function=(void *)iRTXFatTimer_Proc; led_timer.data=((unsigned long) 0);
	led_timer.expires=jiffies + HZ; add_timer(led_timer);
	tspoll=ts;

iRTXFatTimer_Proc(void) -> schedule_delayed_work(&tspoll->work,HZ/8); led_timer.expires= jiffies +HZ/8; add_timer(&led_timer);

static void melfas_ts_work(struct work_struct *work){ ------------------------- }
====================================== Android Debug ======================================
dmesg	- check kernel information
logcat - check information
getevent - check event
filesystem : fstab.freescale	/dev/block/mmcblk1p5	(setting 外卡) ---> dd boot.img 到  /dev/block/mmcblk1p1
		(SMARC/device/fsl/imx6/etc/fstab.freescale)

Android - mini.mk :
1. 修改init.rc里面	:	mount rootfs rootfs / ro remount 改成 mount rootfs rootfs / rw remount  (X)
2. 修改 -> W/GraphicBufferAllocator( 2468): WOW! gralloc alloc failed, waiting for pending frees!
	a. SMARC/frameworks/native/services/surfaseflinger/DisplayDevice.cpp
	b. SMARC/frameworks/native/services/surfaseflinger/Android.mk
3. Can't boot (mini.mk) :
		Add pkgs - core.mk to mini.mk
4. 修改 settings (SMARC/packages/app/Settings..)	src/com/android/settings/中找到Settings.java(主界面）
							res/xml/settings_headers.xml(与设置主界面一一对应)
====================================== VPU install (video codec) ======================================
(IMX_MMCODEC_3.0.35_4.1.0_BUNDLE_CODA)
1. libfslcodec-3.0.7-2 => 1 tar zxvf libfslcodec
2. libfslparser-3.0.7-2
3. libfslaacpcodec-3.0.7-2
4. libfslvpuwrap-1.0.35-2
5. libfslmsparser-3.0.7-2
6. libfslmscodec-3.0.7-2
7. imx-lib-3.0.35-4.1.0
8. firmware-imx-3.0.35-4.1.0
9. gst-fsl-plugins-3.0.7-2
10. Build 依順序
	./configure --prefix=/usr	(創建Makefile,指定存放目錄)
	make				(Compile)
	make install			(Install)

====================================== Wrapping Machine MP ======================================
1. 製作 20 pcs 包裝機 RUN-IN 的 SDCARD 
	(使用MFG-tool, rootfs - 20140102(04:19), uImage - 20131230(06:24), u-boot - 20140107(02:24))
	Modify rcS and Add runintest mmc_2M_Count

====================================== Tool ======================================
picocom : 
	sudo apt-get install picocom
	sudo chmod 777 /dev/ttyUSB0
	picocom -b 115200 /dev/ttyUSB0
	離開 : ctrl + A  後 ctrl + X

NTFS:
	///install TFTP
	sudo apt-get install xinetd tftpd
	sudo gedit /etc/xinetd.d/tftp		---xinetd.conf
	===>	service tftp
		{
			socket_type	= dgram
			protocol	= udp
			wait		= yes
			user		= root
			server		= /usr/sbin/in.tftpd
			server_args	= -s /home/rtx-3110/Work/Tool/nfsroot/root/
			disable		= no
			per_source	= 11
			cps		= 100 2
			flags		= IPv4
		}
	sudo /etc/init.d/xinetd restart		---restart TFTP

	///install NFS
	sudo apt-get install nfs-kernel-server
	sudo gedit /etc/exports
		==>	/home/rtx-3110/Work/Tool/nfsroot/root/ *(rw,no_root_squash,no_subtree_check,async)
	sudo /etc/init.d/nfs-kernel-server restart

	///DHCP setting
	sudo apt-get install dhcp3-server
	sudo gedit /etc/dhcp/dhcpd.conf
	..未完成 (板子uboot沒有支援網路)
====================================== nfs ? ======================================
	ethaddr=00:0C:6E:CE:21:88
	setenv serverip 10.65.163.72
	setenv nfsroot /home/rtx-3110/Work/Tool/nfsroot/root/
	setenv bootargs_kernel 'bootp ${loadaddr} ${serverip}:uImage;'
	setenv bootargs_console 'setenv bootargs ${bootargs} console=ttymxc0,115200'
	setenv bootargs_nfs 'setenv bootargs ${bootargs} ip=dhcp root=/dev/nfs init=/sbin/init nfsroot=${serverip}:${nfsroot},v3,tcp'
	setenv bootcmd_nfs 'run bootargs_base bootargs_kernel bootargs_console bootargs_nfs;bootm'

====================================== MCU ======================================
1.git clone ssh://gitolite@10.65.162.95/MCU/EFM32.git -b iMX6-A6
2.
	gpio.h	Ping setting
	i2c.c
		I2C0->ROUTE     = ( I2C_ROUTE_LOCATION_LOC6 | I2C_ROUTE_SDAPEN | I2C_ROUTE_SCLPEN ) ;
			   	    I2C_ROUTE_LOCATION_LOC1 
	common.h
		//#define DEF_COMMON_WOL_FUNCTION
		//#define DEF_COMMON_WDOG_FUNCTION

====================================== 試過方法 ======================================
1. UART - 殘電 ( VMCU 拉電, RX)
2. Emmc Access Fail
3. GND - 連接
4. MCU 殘電 - C127 + 1K歐姆
5. 更換MCU code
6. 換AC adapter
7. I2C signal ( PMIC -I2C, MCU - I2C)
8. Power detect - moni_12V
9. MCU PING (PMIC_ON_OFF_REQ)
10. Modify MCU Firmware - delete 100msec delay	(1/1500)
11. relay time delay (1S 3S 5S)	(2Sec 最會發生)
12. A6 code	- Pass
13. PMIC_ON_OFF_REQ - 提前100 msec
14. moni_12V	- detect delay 10 msec
15. change EFM code
16. Add recovery

====================================== efm mcu recovery ======================================
A. #define  include/config/mx6dl_sabresd.h  -> CONFIG_MCU_WDOG
MCU	-	(10sec)		u32PowerWdogSetSec * 5300
board/freescale/mx6q_sabresd/mx6q_sabresd.c	board_late_init()	-(60sec)
mem_test()
		-disable
abortboot()
		-extsd card	-disable
		-extsd card	-disable
		-usb storage	-disable
		-usb storage	-disable
bootsel_checkstorage()
		-bootsel_menu	u/U	-disable
				r/R	-disable
bootsel_password()
		-password	-disable
lib_arm/bootm.c 				do_bootm_linux()	StartKernel前	-(180sec)

filesystem	- wdgdis - (disable)

B. MFG			(uboot - disable)

C. SDCARD Update	(script execute wdgdis disable)

D. efm32cmd 1 0x0c -u  (mcu firmware update)
	./efm32cmd 1 0x0c -sc 46/02/28/12/40/40  (設定時間2016年02月28日12時40分40秒)

====================================== efm mcu debug ======================================
1. 接tool kit, 開啟 J-link Commander to PCB_MCU_connect
2. mem 0x0 0x400 (check code, dump code)

====================================== uboot flow ======================================
lib_arm/board.c - main.c
====================================== check memory usage ======================================
1. free -m
2. cat /proc/meminfo
3. vmstat -s
4. top
5. htop (X)
check RAM info - sudo dmidecode -t 17 (X)

====================================== MCU power key ======================================
flash = 0xA0 ( DC + need press power-key)
	3次retry.
flash = 0x00 ( DC - power on)

====================================== ubuntu SOC ============================================
vivante(linux)  (x11) libVIVANTE.so (vivante_drv.so  - libx11.so)  libOPENESV2   libGAL.so   libEGL.so   AP
		- imx-firmware (sdma - Upgrade SOC MCU code, vpu(3D))
	step1. download driver
	step2. install
	step3. apt-get install nvideo-current -dev / download mesa3D build (2擇一）

====================================== SPI commucation ============================================
1. Ping Define
2. spi_register_board_info(imx6_q7_spi_device3,ARRAY_SIZE(imx6_q7_spi_device3));
3. Setting
 <*>   Freescale i.MX SPI controllers
 <*>   User mode SPI device driver support

echo 1 > /dev/spidev3.0
SPI ping output signal

-------------------> SPI Flash : m25p80
/dev/mtd0
cat /proc/mtd (可得到目前 partition)
cat /proc/partitions
ls /sys/class/mtd  ---> 看到目前資料夾

====================================== Emmc clock limit ============================================
uboot : 
	uboot/drivers/mmc/mmc.c
		mmc_set_clock(struct mmc *mmc, uint clock)
			Limit ==> if (clock > 26000000)	clock = 26000000;
kernel :
	kernel/drivers/mmc/core/core.c
		__mmc_set_clock(struct mmc_host *host, unsigned int hz)
			Limit ==> if (hz > 26000000)	hz = 26000000;

		mmc_power_up(struct mmc_host *host)
			Limit ==> if (host->f_init > 26000000)	host->f_init = 26000000;
量測 : clock : 24.75M Hz

====================================== 最小系統 ============================================
0. Test資料夾下
1. mkdir rootfs
2. cd rootfs/
	3. mkdir bin/ etc/ mnt/ sbin/ tmp/ var/ dev/ home/ lib/ proc/ root/ sys/
	4. mkdir -p lib/modules/3.0.35
5. cd dev/
	6. sudo mknod null c 1 3
	7. sudo mknod console c 5 1
	8. sudo mknod tty c 207 19	(ttymxc3)
9. cd ../etc/
	10. vi fstab
	11. 	#Device         mount point     filesystem type         option
		none            /proc           proc                    defaults 0 0
		/dev/ram0       /var            ramfs                   defaults 0 0
		/dev/ram1       /tmp            ramfs                   defaults 0 0
		none            /sys            sysfs                   defaults 0 0
	12. vi inittab	(前面不可以有空格）
	13. 	#
		# inittab This file describes how the INIT process should set up
		# the system in a certain run-level.
		console::sysinit:/etc/rc.d/rc.init
		tty::respawn:/bin/sh
	14. sudo chmod 775 inittab
	15. mkdir rc.d/
		16. vi rc.d/rc.init	(前面不可以有空格）
		17. 	#! /bin/sh
			PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:
			export PATH
			mount -a
			mkdir /var/log
			/sbin/mdev -s
			syslogd
			klogd

			echo "set up eth0's ip"
			ifconfig eth0 up
			ifconfig eth0 192.168.0.1
			#ifconfig eth0 10.1.1.30 netmask 255.255.255.0
		18. sudo chmod 775 rc.d/rc.init
19. busybox (Test資料夾下copy busybox-1.20.2.tar.bz2)
	20. tar jxvf busybox-1.20.2.tar.bz2
	21. modify Makefile	ARCH ?= arm
				CROSS_COMPILE ?= arm-linux-gnueabi-
	22. make menuconfig	修改安裝路徑 ../rootfs
	23. make
	24. make install
25. cd ../rootfs
	26. arm-linux-gnueabi-objdump -p bin/busybox
		Need ld-linux.so.3/ libm.so.6/ libc.so.6
	27. cd ../rootfs/lib
	28. cp ld-linux.so.3/ libm.so.6/ libc.so.6 至此

--------------------------------驗證---------------------------------
udhcpc : 	a. /usr/share/udhcpc/default.script
		b. /etc/resolv.conf
		
udhcpd server :	a. /etc/udhcpd.conf
			修改	interface	eth1
				router		192.168.0.10
		b. ifconfig eth1 up
		c. ifconfig eth1 192.168.0.10 netmask 255.255.255.0
		d. udhcpd /etc/udhcpd.conf

		e. pc : ipconfig (插拔network cable)
		(Kernel : ip Netfilter - iptable)
try : 
	echo 0 > /proc/sys/net/ipv4/ip_forward	
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE	
	iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT	
	iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT	
	echo 1 > /proc/sys/net/ipv4/ip_forward	
	ifconfig eth1 192.168.0.10
	udhcpd 


ifconfig : OK

telnet server : 
		a. check kernel option have open
		b. 	Add fstab : 	devpts		/dev/pts	devpts			defaults 0 0
			Add files as /etc/passwd, group, shadow, securetty
			Add /etc/pts folder
		c. 	mount -t devpts devpts /dev/pts
			mknod -m 666 /dev/ptmx c 5 2
			/usr/sbin/telnetd
		d. ps check telnetd have running.
		e. pc open telnet connect to target board

ftp server :	a. tcpsvd 0 21 ftpd -w /root
		b. pc : ftp://帳號:密碼@FTP網址:PORT

web server :	a. Enable Busybox httpd
		b. touch /etc/httpd.conf
		c. mkdir /www /www/cgi-bin
		d. 存到/www/cgi-bin/cgi-test1 (shell script)
			#!/bin/sh
			echo "Content-type: text/html"
			echo ""
			echo "<HTML><HEAD><TITLE>test</TITLE></HEAD>"
			echo "<BODY>"
			echo "<pre>"
			ls
			echo ""
			echo "</pre>"
			echo "</BODY></HTML>"
		e. build成執行檔後將執行檔copy至/www/cgi-bin/cgi-test2 (c language)
			#include <stdio.h>
			main() 
			{
				printf("Content-type:text/html\n\n");
				printf("Hello,World!");
			} 
		f. httpd -h /www/ -c /etc/httpd.conf
		g. http://10.65.163.21/cgi-bin/cgi-test1
		   http://10.65.163.21/cgi-bin/cgi-test2
		   http://10.65.163.21/html/hello.html	(html)

check :		netstat -anutp
		ipaddr
skell

====================================== Thermal ============================================
kernel_imx/drivers/mxc/thermal/thermal.c:
u-boot/cpu/arm_cortexa8/mx6/generic.c:

kernel 3.14.28 :
	u-boot-imx/drivers/thermal/imx_thermal.c (U-boot 2015.04)
	thermal threshold : (溫度高於80,無法開機)
		#define TEMPERATURE_MIN		-40
		#define TEMPERATURE_HOT		85
		#define TEMPERATURE_MAX		125	
重新設定感測溫度 : 
	kernel/drivers/thermal/imx_thermal.c
		trip_point_0_temp (100) 設定為降頻
		trip_point_1_temp (120) 設定為關機
		imx_get_sensor_data() :  直接設定 imx_temp_passive_max = 120000 ;
		data->temp_passive : 120000 (120 C)
		data->temp_critical : 140000 (140 C)

====================================== kernel ============================================
git clone ssh://10.65.162.95/SMP300/kernel-imx6.git -b iMX6-AX-A3	X

Q7 - uboot/ kernel
	uboot : config 
		mx6q_smtt.h ..
		header.S  (2G X)
	HW : 
		uart5 - Connect反了
		DDR 2 G / EMMC 8G 線路錯
		P channel - 上錯料 (Q8, Q10, Q13)
		Q32 - 短路
		Q39 - Modify
		5V standby - 5V
		RJ45 錯料
		2擇1線路需要更改
		5V加220uF電容
		FRT_PW_BN --CN7 有問題?
		R223 要有. (mcu-update-pwr = 0)
	kernel : 
		/driver/mmc/core/mmc.c	ver.7
	rootfs :
		rc_mxc.S - Add uart5

	問題 : 
		UART3
		UBUNTU
		TOUCH
		MCU燒錄

====================================== DDR3 調整 ============================================
測試方法 :
1. Mx6DQSDL DDR3 Script Aid V0.08 :
	設定目前DDR3的型號及相對應spec
2. 產生的RealView.inc :
	copy到Stress的要跑的script
3. 跑stress_test,calibration value..
	將calibration的值,填到script裡.
4. 用完整的script參數,來跑stress test
	開始測試,確定測試OK
5. 將參數轉入uboot的header.S
	dcd_hdr: 及 write_dcd_cmd: 參數也要記得更改.
	 算式： .word 0x40E001D2 /* Tag=0xD2, Len=59*8 + 4 + 4=480=0x1E0, Ver=0x40 */

測試設定 :
DDR測試(MX6) : setting
cmd : DDR_Stress_Tester -t mx6x -df MX6DL_sabreSD_DDR3.inc
	=>	(Y)	DDR configuration -OK
		(1)	ARM set to 800MHz
		(1)	DDR density select (MB) : 1024K
		(1)	On chip select	:CSDP
		(N)	write calibration
		(N)	read calibration
		(Y)	run the DDR stree Test
		(Y)	400MHz	Start freq
		(N)	29	End

測試步驟 :  imx6-dual DDR Calibration & Test 
1. DDR_Stress_Tester -t mx6x -df MX6Q_SabreSD_DDR3_register_programming_aid_v1.6.inc
	- 2 (ARM set to 1GHz)
	- 1 (DDR density selected (MB): 1024)
	- y (DDR Freq: 528 MHz)
	- y (run the write leveling calibration)
	- 0004 (You have entered: 0x0004)
	- y (Starting DQS gating calibration...)
2. ./stress --vm 600 --vm-bytes 1M --timeout 30m --vm-hang 1 & (stress test)
3. mp --cat /sys/class/thermal/thermal_zone0/temp （抓溫度)
4. stressapptest -s 7200 & (測試工具)
5. 測試範圍
	Dual 	- 	528MHZ ( 400MHZ - 672MHZ) 20%
	Dual-lite - 	400MHZ ( 333MHZ - 550MHZ)

6. 測試注意事項 : 
	- 若是DQS gating calibration 失敗, 可將write level calibration fix , 在試試看.
	- 要確定initial值(scripts), 不會差異太大, 才不至於calibration失敗.
====================================== imx_usb ============================================
0. git clone ssh://gitolite@10.65.162.95/Ubuntu/ubuntu-14.04.git -b master >>>>> 下載ubuntu14.04 git中 master的branch
1. git clone ssh://gitolite@10.65.162.95/Ubuntu/ubuntu-12.04.git -b ubuntu-12.04 >>>>下載ubuntu-12.04 branch
2. install libusb-1.0-0-dev 套件
3. 進去imx_usb folder, make (產生imx_usb執行檔)
4. switch board : otg mode / 插入otg cable/ VM add device
5. modify mx6_usb_work.conf / 設定路徑
6. sudo ./imx_usb


透過imx_usb debug 讀 register
:read,020D8004		//Read SRC_SBMR1
:read,020D801C		//Read SRC_SBMR2
:read,021BC400		//Read OCOTP_LOCK
:read,021BC410		//Read OCOTP_CFG0
:read,021BC420		//Read OCOTP_CFG1
:read,021BC430		//Read OCOTP_CFG2
:read,021BC440		//Read OCOTP_CFG3
:read,021BC450		//Read OCOTP_CFG4
:read,021BC460		//Read OCOTP_CFG5
:read,021BC470		//Read OCOTP_CFG6
../../u-boot.bin:dcd,plug

====================================== uboot-imx6 ============================================
1. uboot-imx6/build.sh	選config(檔案位置)
2. uboot-imx6/mach-types.h	(檔案位置)
3. uboot-imx6/out/		(檔案位置)

====================================== kernel-imx6 ============================================
1. kernel-imx6/build_module.sh
2. kernel-imx6/rtxconfig/..
3. kernel-imx6/out/

====================================== ubuntu install ============================================
remember uboot-imx6選用MFG mode.
1. <English>
2. <United States>
2.1 <No>	//Detect keyboard layout
    <English>
3. Hostname : <ubuntu>-SMTT
4. <United Kingdom>
5. <ports.ubuntu.com>
6. <Continue>
-------------------Downloading Release files...(HangUp XXX)
7. <Yes>	//Without loading kernel modules
8. smtt-1
9. retronix
10. retronix
11. <Yes>
12. <Yes>	//time zone
13. <Continue>		//dm-mod
14. <Continue>		//RAID
15. <Continue>		//lvm-mod module
16. <Guided - use entire disk>(X)	預先partition
17. <MMC/SD card #1 (mmcblk0) - 7.8G MMC S10008
18. <Yes>		//Write the change to disks
19. <Yes>		//Without installing a kernel
20. <No automatic updates>
21. Ubuntu desktop
22. <Continue>		//No boot loader
23. <Yes>		//UTC
24. <Continue>
25. System reboot

====================================== Ubuntu Touch校正方法(SMTT)及rotation ============================================
1. sudo gedit /usr/share/X11/xorg.conf.d/10-evdev.conf (設定)
2. check /var/log/Xorg.0.log  --> Touch device --> "Identifier "evdev tablet catchall"
3. xinput --list-props 9 (check目前x,y狀況)
4. xinput --set--prop 9 239 0 0(更改 x y 不invert)
5. sudo apt-get install xinput-calibrator (xinput_calibrator)	(Touch Calibration)
6. sudo service lightdm restart (restart X window)
	加入 到 "Identifier "evdev tablet catchall"
	a. Add Option	"Calibration"	"42 4086 43 4047"
	b. Add Option	"InvertY"	"yes"
	c. Add Option	"SwapAxes"	"true"		

====================================== ubuntu system ============================================
1. The system is running in low-graphics mode.(X 放棄,tar ubuntu-12.04/base-rootfs/rootfs/ubuntu-12.04-destop-base.tar.bz2)
	試 : 	a. kernel : make modules --> cp /usr /lib to filesystem
		b. depmod -a
		c. apt-get update
		d. apt-get upgrade
	:有機會?  X


2. Chase install (rtx/admin)
	a. aplay -l (no soundcards)
	b. putty consol fail (OK)


ubuntu apt-get install XXX (安裝的指令)--
dpkg -i XXX.deb
dpkg -l (可知道目前ubuntu安裝的pkgs)

====================================== MPLAB IDE ============================================
1.利用MPLAB IDE選擇 功能表列 file/import
2.選擇正確裝置及開發工具
3.執行燒錄動作

====================================== Video Rotation ============================================
1. xinput -list
	↳ QUANTA OpticalTouchScreen                   id=11    [slave  pointer  (2)]
2. Add	left.sh
	#!/bin/sh
	#portrait (left)
	xrandr -o left
	xinput set-prop "QUANTA OpticalTouchScreen" --type=float "Coordinate Transformation Matrix" 0 -1 1 1 0 0 0 0 1
3. chmod 777 left.sh
4. ./left.sh

====================================== EVENT_SUSPEND ============================================
1. kernel-imx6/drivers/video/mxc/ldb.c  ldb_fb_event() -> FB_EVENT_SUSPEND:
2. kernel-imx6/include/linux/fb.h:	#define FB_EVENT_SUSPEND  0x02
3. kernel-imx6/drivers/video/fbmem.c:	fb_set_suspend() -> fb_notifier_call_chain(FB_EVENT_SUSPEND, &event);
					EXPORT_SYMBOL(fb_set_suspend);
4. kernel-imx6/drivers/video/mxc/mxc_ipuv3_fb.c mxcfb_suspend() -> fb_set_suspend(fbi, 1);
   kernel-imx6/drivers/video/mxc/mxcfb.c	mxcfb_suspend() -> fb_set_suspend(drv_data->fbi, 1);
								-> fb_set_suspend(drv_data->fbi_ovl, 1);
5. static struct platform_driver mxcfb_driver = {  -> .suspend = mxcfb_suspend,

====================================== Suspend動作方式 ============================================
a. cat /sys/power/state來得到內核支援哪幾種休眠方式
b. echo standby > /sys/power/state命令系統進入休眠
c. 調用到 main.c中的state_store(), 使用者可以寫入 const char * const pm_state[] 中定義的字串, 比如"mem", "standby
d. state_store()會調用enter_state(), 它首先會檢查一些狀態參數,然後同步檔案系統
e. 最後會調用suspend_devices_and_enter()來把所有的外設休眠, 在這個函數中, 如果平臺註冊了suspend_pos(通常是在板級定義中定義和註冊)
	, 這裡就會調用 suspend_ops->begin(), 然後driver/base/power/main.c 中的 device_suspend()->dpm_suspend() 會被調用,他們會
	依次調用驅動的suspend() 回檔來休眠掉所有的設備.
f. 當所有的設備休眠以後, suspend_ops->prepare()會被調用, 這個函數通常會作 一些準備工作來讓板機進入休眠. 接下來Linux,在多核的CPU
	中的非啟動CPU會被關掉, 通過注釋看到是避免這些其他的CPU造成race condion,接下來的以後只有一個CPU在運行了.
g. suspend_enter()會被調用, 這個函數會關閉arch irq, 調用 device_power_down(), 它會調用suspend_late()函數, 這個函數是系統真正進
	入休眠最後調用的函數.
====================================== Suspend操作方式 ============================================
a. echo enabled > /sys/devices/platform/imx-uart.4/tty/ttymxc0/power/wakeup
b. echo standby > /sys/power/state命令系統進入休眠
c. UART5 activity will wake up CPU

====================================== Suspend Source code ============================================
linux_soruce/kernel/power/main.c
linux_soruce/kernel/power/suspend.c
linux_source/kernel/arch/xxx/mach-xxx/pm.c
linux_source/driver/base/power/main.c

====================================== SPI_GPIO Driver Porting ============================================
1. board-mx6q_q7.h define gpio ping
	MX6Q_PAD_EIM_D20__GPIO_3_20,				/* CSPI4_CS0 */
	MX6Q_PAD_EIM_D21__GPIO_3_21,				/* CSPI4_CLK */
	MX6Q_PAD_EIM_D22__GPIO_3_22,				/* CSPI4_MISO */
	MX6Q_PAD_EIM_D28__GPIO_3_28,				/* CSPI4_MOSI */
2. board-mx6q_q7.c 
	#define GPIO_LCD_BASE	(64)
	#define GPIO_LCD_RES	(GPIO_LCD_BASE + 22)	/* aux_gpio3_0 */
	#define GPIO_LCD_SDA	(GPIO_LCD_BASE + 28)	/* aux_gpio3_1 */
	#define GPIO_LCD_SCL	(GPIO_LCD_BASE + 21)	/* aux_gpio3_2 */
	static struct spi_gpio_platform_data imx6_q7_spi_gpio_pdata = {
		.sck		= GPIO_LCD_SCL,
		.mosi		= GPIO_LCD_SDA,
		.miso		= GPIO_LCD_RES,
		.num_chipselect	= 1,
	};
	static struct platform_device imx6_q7_spi_gpio = {
		.name		= "spi_test",
		.id		= LCD_SPI_BUS_NUM,
		.dev		= {
			.platform_data	= &imx6_q7_spi_gpio_pdata,
		},
	};
	static struct spi_board_info imx6_q7_spi_device3[] __initdata = {
		....
	};
	static void spi_device_init(void)
	{
		spi_register_board_info(imx6_q7_spi_device3,
				ARRAY_SIZE(imx6_q7_spi_device3));
		platform_device_register(&imx6_q7_spi_gpio);
	}
3. spi_test.c Driver 
	#define CS_PORT			IMX_GPIO_NR(3, 20)	//DC
	#define CLK_PORT		IMX_GPIO_NR(3, 21)	//SCL
	#define TXD_PORT		IMX_GPIO_NR(3, 28)	//SDA
	#define RXD_PORT		IMX_GPIO_NR(3, 22)	//RES

	#define CS_OUT()        gpio_direction_output(CS_PORT, 0)	//DC
	#define CS_SET()        gpio_set_value(CS_PORT, GPIO_HIGH)
	#define CS_CLR()        gpio_set_value(CS_PORT, GPIO_LOW)
	............

	probe : --->
	value = gpio_request(RXD_PORT, "rxd_port");
	if (value == 0) {
			RXD_OUT();
			value1++;
	}
	RXD_CLR();
	mdelay(10);
	RXD_SET();
	..............

====================================== PWM freq ============================================
1. 要設定 2.4KHZ
2. XXXXnsec = 2.4KHZ  ==> 10^9 / 2.4K = 416667
3. .pwm_period_ns = 416667

====================================== can bus ============================================
1. board init 
2. pin define
3. libsocket can - 0.0.8
4. canutils - 4.0.6
5. canconfig can0 bitrate 125000
6. ifconfig can0 up
7. cat /proc/net/dev
8. cat /proc/net/can/stats
9. candump can0
	- or type cmd : canecho can0 -v (reciver)
10. cansend can0 -i0x100 11 22 33 44

====================================== Volar MFG ============================================
0. connect UART1
1. 	mmc0: unrecognised EXT_CSD revision 7
	mmc0: error -22 whilst initialising MMC card
2. MFG kernel 不support這format
3. Fail

4. 	uboot -> U_BOOT_DEFAULT_CONFIG=mx6q_ax_a3_mfg_config
	kernel -> KERNEL_DEFAULT_CONFIG=imx6_updater_defconfig (menuconfig -> system_type -> ax_a3 board)
5. OK
====================================== Volar MCU Driver(Battery) Porting ============================================
1../i2cget -y -f 2 0x46 0x05	(read Status OK)
2. 	Add kernel/drivers/power/microchip_battery.c
	Add kernel/include/linux/microchip_battery.h
3. make menuconfig
	(X) Sabresd Board Battery DC-DC Charger for USB and Adapter Power
	(V) MICROCHIP battery driver
4. /sys/class/power_supply/microchip-i2c-0 可讀到值

或直接用i2c讀值
如 :	i2cset -f -y 2 0x46 0x0B 0x0002 (下此command才可讀值)
	i2cget -f -y 2 0x46 0x07 w	(讀電壓值 - 0x2c81 => 11393 mV)

====================================== Video Driver ============================================
filesystem 	->	/sys/class/graphics/fbx	,	/dev/fbx
一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一
kernel 3.0/2.6	->	1. fb.ko -> video/fbcom ---
			2. IPUV3 (mxcfb )
			3. lcd(default) hdmi sii9022(hdmi transfer+lcd info ) mipi(+lcd info) ssd2828 ---
			123123123---
一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一
kernel 3.14	->	transfer(ssd2828 / ssi9022 / DVI ---)
			1. drm
			2. mipi lcd hdmi (information setting, initial setting, ---)
			3. IPUV3
			123123123---

====================================== Volar MP_TEST ============================================
Add
1. apt-get install busybox
2. add /etc/version => 

====================================== Driver ============================================
module_init(microchip_init);	-----------> void __segment____init -------> Linking Array 建立
module_exit(microchip_exit);

i2c_add_driver -> i2c_register_driver -> driver_register -> driver_const (microchip_battery_driver)

====================================== battery power display(microchip_battery.c) ============================================
upower -d (Ubuntu Power Display)

Polling 方式如下 :
struct delayed_work	work;
#define MAX17040_DELAY		1000	//(10 sec)
static void max17040_work(struct work_struct *work)
{
	struct microchip_data *info;

	info = container_of(work, struct microchip_data, work.work);

	microchip_command_request(info);

	schedule_delayed_work(&info->work, MAX17040_DELAY);
}
probe :
	INIT_DELAYED_WORK_DEFERRABLE(&info->work, max17040_work);
	schedule_delayed_work(&info->work, MAX17040_DELAY);

====================================== Raspberry Pi ============================================
1. download 2014-06-20-wheezy-raspbian.img
2. dd bs=4M if=2014-06-20-wheezy-raspbian.img of=/dev/sdc
3. the username is 'pi' and the password is 'raspberry'.

Source Code :
1. git clone https://github.com/raspberrypi/linux
2. git clone git://github.com/raspberrypi/tools.git
3. git clone https://github.com/raspberrypi/firmware.git
 

Study : 
1.When the Raspberry Pi is first turned on, the ARM core is off, and the GPU core is on. At this point the SDRAM is disabled.
2.The GPU starts executing the first stage bootloader, which is stored in ROM on the SoC. The first stage bootloader reads the SD card, and loads the second stage bootloader (bootcode.bin) into the L2 cache, and runs it.
3.bootcode.bin enables SDRAM, and reads the third stage bootloader (loader.bin) from the SD card into RAM, and runs it.
4.loader.bin reads the GPU firmware (start.elf).
5.start.elf reads config.txt, cmdline.txt and kernel.img

Compile :
export CCPREFIX=/home/retronix/work/Linux/Temp/Raspberry/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi-
export KERNEL_SRC=/home/retronix/work/Linux/Temp/Raspberry/linux/
make mrproper
ARCH=arm CROSS_COMPILE=${CCPREFIX} make menuconfig --> choice bcm2807
ARCH=arm CROSS_COMPILE=${CCPREFIX} make bcmrpi_quick_defconfig
./imagetool-uncompressed.py ${KERNEL_SRC}/arch/arm/boot/zImage

cd linux
$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcmrpi_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-

-----------------------------------------------------------------------------------------

使用 :
sudo ln -s /usr/share/zoneinfo/Asia/Taipei /etc/localtime
	Read parameter :
vcgencmd get_config <config> - lists a specific config value. E.g. vcgencmd get_config arm_freq
vcgencmd get_config int - lists all the integer config options that are set (non-zero)
vcgencmd get_config str - lists all the string config options that are set (non-null)

VNCSERVER : 使用
sudo apt-get install tightvncserver

====================================== ltib compile (raspberry pi) ============================================
1. tar -zxvf ltib-13-2-1-sv.tar.gz (權限)
2. cp -avrf ../ltib-13-2-1-sv-1/ltib . ( copy freescale ltib script)
3. ./ltib --hostcf -p wget 
	a. (.ltibrc)URL及(ltib/config/userspace/toolchain.lkc) config TOOLCHAIN 決定下載路徑
	b. Fail -> download toolchain and put to ltib/rpm/RPMS/arm/
4. ./ltib -c config
	Setting Platform choice (Raspberry Pi with BCM2835 SoC) 
5. cp rootfs/boot/zImage rootfs/boot/kernel.img
6. sudo /home/retronix/work/Linux/Raspberry/ltib-13-2-1-sv/config/platform/rpi/rpi_mksdimage.sh -B /home/retronix/work/Linux/Raspberry/ltib-13-2-1-sv/rootfs/boot/ -R /home/retronix/work/Linux/Raspberry/ltib-13-2-1-sv/rootfs.ext2.gz
7. rpi_mksdimage.sh(有修改partition size)
8. sudo dd if=rpi_sdcard.img of=/dev/sdc (dd 到SDCARD)
9. 若要dd file-system, 將sudo if=rootfs.ext2 of=/dev/sdc2

====================================== YOCTO compile (raspberry pi) ============================================
1. git clone -b dylan git://git.yoctoproject.org/poky.git
	cd poky
	git clone https://github.com/djwillis/meta-raspberrypi.git
	git clone https://github.com/openembedded/meta-oe.git

2. Please install the following missing utilities: makeinfo,chrpath ==> 安裝texinfo, chrpath
 
3. Fail -> HW 

====================================== Kernel Flow ============================================
1. kernel/arch/arm/kernel/boot/compressed/head.S	(解壓縮用)
2. kernel/arch/arm/kernel/head.S	(配置)
3. kernel/main.c		(startup)
4. start_kernel()
5. setup_arch(&command_line)
6. do_one_initcall()
7. init_post -> run_init_process(ramdisk_execute_command)

kernel/drivers/base/platform.c
platform_device_register -> device_add
kobj -- 所有driver的總控管-base (i2c_add, class_add, plat.._add)

====================================== Raspberry Pi ============================================
Web Server : Apache Server  基本設定 (httpd package)
		安裝 套件：httpd php perl python bash

		Python-2.4.4 buidling failed : Parser/tokenizer_pgen.o: could not read symbol.....
		解决辦法是：進入到python 编譯目錄 make clean 一下

Apache  的主要設定檔
1. /usr/conf/httpd.conf  ---> ServerName modify
2. apachectl start
3. chmod 777 /usr/cgi-bin/cgi-test1 (變更權限)
4. http://10.65.163.82/cgi-bin/cgi-test1

Web : 
html檔案執行OK
Perl 檔案執行OK
1. /usr/cgi-bin/echo.pl 內容
	#!/usr/bin/perl
	use strict;
	use warnings;
	print qq(Content-type: text/plain\n\n);
	print "hi\n";
2. chomd +x /usr/cgi-bin/echo.pl
3. http://10.65.163.50/cgi-bin/echo.pl
php檔案執行 : 
	1. Web 當 Txt檔案開啟
	2. Web 當 檔案下載
bash 檔案執行OK
1. /usr/cgi-bin/test-cgi

====================================== httpd-2.4.4 ============================================
    select PKG_APR_UTIL
    select PKG_ZLIB
    select PKG_OPENSSL
    select PKG_SQLITE
    select PKG_LIBXML2
    select PKG_PCRE
    select PKG_NCURSES
    select PKG_LUA

compile => 	PKG_APR(1.4.6), PKG_APR_UTIL(1.5.2), PKG_LUA(5.2.2), 
		PKG_NCURSES(5.9) ---> modify spec (資料夾 make clean, with-build-cc=arm-linux-gnueabihf-gcc-4.6),
		PKG_PCRE(8.33) ---> add package (bzip2),
		PKG_ZLIB(1.2.7), PKG_LIBXML2(7.8), PKG_SQLITE(autoconf-3071700),
		PKG_OPENSSL(1.0.1e),
		PKG_HTTPD(2.4.4), ---> modify spec (Add LIBS=-lpthread, ./configure--whit-mpm=prefork \)

expat package rebuild again (for apachctl start)
php-5.3.10 (make install clean)
-------------------------------------------------------------------------
FTP Server : vsftpd
1. vsftpd package install.
2. 用inetd 或 xinetd啟動模式啟動正常 (可用root登入)
3. 用standalone(單獨伺服器)模式啟動 :  

--------------------------------------------------------------------------
SSH Server : openssh
1. openssh package install (自動啟動)
2. /etc/rc.d/init.d/sshd start (server start)
	或  /usr/sbin/sshd -D	(若有以下錯誤,可以試下面方法)
	a) ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
	b) ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
	c) sshd_config :  # HostKey /etc/ssh/ssh_host_ecdsa_key
	d) chown -R root:root /var/empty
		chmod 744 /var/empty
	e) #cd /etc/ssh/
 		#chmod 600 moduli
 		#chmod 644 ssh_config
 		#chmod 644 ssh_host_dsa_key.pub
 		#chmod 644 ssh_host_key.pub
 		#chmod 644 ssh_host_rsa_key.pub
 		#chmod 600 ssh_host_dsa_key
 		#chmod 600 ssh_host_key
 		#chmod 600 ssh_host_rsa_key
		#chmod 640 sshd_config
3. ssh root@ip	(client root 帳號登入)

--------------------------------------------------------------------------
DHCP Server : 
1. get package from imx6
2. /etc/dhcpd.conf	add	(interface	eth0;)
3. connect lan port (get ip addr)
4. dhcpd -d -f (把伺服器放到“幕前”（foreground）來執行）

---------------------------------------------------------------------------
bridge-util
Kernel :	
	1. enable TUN
     	-> Device Drivers                                                                                                             │  
	  -> Network device support (NETDEVICES[=y])                                                                                              
		 -> Network core driver support (NET_CORE [=y])
			Universal TUN/TAP device driver support
	2. insmod: not configured to support old kernels
		install new busybox package
	3. 
		# brctl addbr br549
 		# brctl addif br549 eth0
 		# brctl addif br549 eth1
		# brctl show
--------------------------------------------------------------------------------
cron	(cron-3.0pl1)
	1.add	# include <time.h>
	2. sudo make install
	3. 產生cron & crontab 執行檔

透過 crontab -e (edit 排程管理)
*/1 * * * * /sbin/hwclock --hctosys (加入排程)

cat /var/log/syslog | tail -n 25 (抓Cron執行log檔)



-----------------------------------------------------------------------------------
Raspberry : git clone ssh://gitolite@10.65.162.95/Raspberry_pi/ltib.git
	1. /usr/sbin/visudo  add path  (retronix ALL = NOPASSWD: /usr/bin/rpm, /opt/ltib/usr/bin/rpm)

-----update
iptabels -> autoconf -> make clean -> OK

ebtables ->

dhcp server 4.1-ESV-R4 -> Setting
  mkdir -p /var/db
  touch /var/db/dhcpd.leases
  touch /etc/dhcpd.conf
  dhcpd -t -cf /etc/dhcpd.conf -lf /var/db/dhcpd.leases

------------------------------------------------------------------------------------
apache2 : httpd.conf 設定
	ServerRoot "/usr"
	Listen 80
	User daemon
	Group daemon
	ServerAdmin you@example.com
	ServerName www.example.com:80

	<Directory />
		AllowOverride none
		Require all denied
	</Directory>
	DocumentRoot "/usr/share/apache2/htdocs"

	<Directory "/usr/share/apache2/htdocs">
		Options Indexes FollowSymLinks
		AllowOverride None
		Require all granted
	</Directory>

	<IfModule dir_module>
		DirectoryIndex index.html
	</IfModule>

	<Files ".ht*">
		Require all denied
	</Files>

	ErrorLog "share/apache2/logs/error_log"
	LogLevel warn
	<IfModule log_config_module>
		..
	</IfModule>

====================================== 動態連接庫管理命令 ============================================
1. ldconfig -p 可印出目前/etc/ld.so.cache資料
	主要是在默認搜尋目錄(/lib和/usr/lib)以及動態庫配置文件/etc/ld.so.conf内所列的目錄下,搜索出可共享的動態連接庫(格式如前介绍,lib*.so*)
	,進而創建出動態装入程序(ld.so)所需的連接和缓存文件.缓存文件默認為 /etc/ld.so.cache,此文件保存已排好序的動態連接庫名字列表.
2. ldd -v libc.so.6
	ldd 用来查看程序運行所需的共享庫.

====================================== RaspberryPi Camera ============================================
Gstreamer pkgs :
	glib2-2.20.5-1
	liboil-0.3.17
	gstreamer-0.10.28
	gstreamer-core-0.10.28-1
	gst-plugins-base-0.10.28
		libogg-1.3.0-1 -> fatal error: ogg/ogg.h: No such file
		libvorbis-1.3.2 ->fatal error: vorbis/vorbisenc.h: No such file
	gst-plugins-good-0.10.20
		fatal error: linux/videodev.h: No such file
		sudo ln -s rootfs/usr/src/linux/include/linux/videodev2.h rootfs/usr/src/linux/include/linux/videodev.h

====================================== BISHOP ubuntu ============================================
./ltib -c config (.config 就會回到default)
uboot (	1. .config : CONFIG_PKG_U_BOOT_CONFIG_TYPE="mx53_smd_bi_shop_config") => ./ltib 
	2. u-boot-dir-build.spec : u-boot.imx 移除

kernel	1. .config : dtb 移除

mfg-tool
filesystem (ubuntu - rtx/admin)

LED/GPIO test OK
rs232 signal X
eth0 X
eth1 OK

./ltib 但是不能include到其他的pkgs.( 所以ltib要重新整理更改)
csr pkgs (linux kernel 要include)
(config : rtx-bishop-mx53_defconfig setting OK)
# CONFIG_PKG_KERNEL_DTB_PRECONFIG="rtx-bishop-mx53.dtb" (.dtb 拿掉)
sudo apt-get install wireless-tools wpasupplicant
sudo apt-get install bluez-utils
sudo apt-get install wvdial 

-----------------------------------------------------------
ubuntu wifi : 上網
0. Build csr-wifi-5.1.0-1 pkgs
1. 掛載 sudo insmod /usr/lib/wireless/unifi_sdio.ko
2. sudo iwlist wlan0 scan | grep SSID (掃wifi)
3. 設定(SSID及PASSWD) /etc/network/interfaces
	auto lo
	iface lo inet loopback

	auto wlan0 
	iface wlan0 inet dhcp
	wpa-ssid 1234567890-wpa
	wpa-psk 1234567890

4. sudo ifdown wlan0 && sudo ifup -v wlan0
5. ping google.com.tw
-----------------------------------------------------------

1. iwconfig 這個指令就可以找出無線網卡的代號
2. ifconfig wlan0 up
3. iwlist wlan0 scanning | more 
   iwlist wlan0 scan
4. iwconfig wlan0 essid "12345-wep"
5. iwconfig wlan0 key open
6. iwconfig wlan0 key s:12345
7. iwconfig wlan0 mode managed

8. iwconfig wlan0 ap auto
9. udhcpc -i wlan0 
or
8. dhclient -v wlan0

-----------------------------------------------------------
rootfs wifi : 上網 (kernel 3.10.31)
1. copy (unifi_config unifi_helper unififw) 到 /usr/sbin  (csr-wifi-5.1.0-1.arm.rpm)
2. copy (unifi-sdio-1 資料夾) 到 /lib/firmware/unifi-sdio-1 及 /lib/firmware/unifi-sdio-0 (csr-wifi-5.1.0-1.arm.rpm)
3. insmod /lib/modules/3.10.31+/kernel/drivers/staging/csr/csr_helper.ko
4. insmod /lib/modules/3.10.31+/kernel/drivers/staging/csr/csr_wifi.ko
5. ifconfig eth1 up								=> 喚醒 wifi
6. iwlist eth1 scan | grep SSID							=> check AP
7. wpa_supplicant -ieth1 -c/etc/wpa_supplicant/wpa_supplicant.conf &
8. wpa_cli -ieth1 -p/var/run/wpa_supplicant add_network				=> 假設回 0 (wep AP : 12345-wep / 12345)
9. wpa_cli -ieth1 -p/var/run/wpa_supplicant set_network 0 ssid '"12345-wep"'	=> 假設回 OK
10. wpa_cli -ieth1 -p/var/run/wpa_supplicant set_network 0 key_mgmt NONE	=> 假設回 OK
11. wpa_cli -ieth1 -p/var/run/wpa_supplicant set_network 0 wep_key0 '"12345"'	=> 假設回 OK
12. wpa_cli -ieth1 -p/var/run/wpa_supplicant enable_network 0			=> 假設回 OK
13. udhcpc -i eth1								=> Get IP

ifconfig wlan0 up
iwlist wlan0 scan | grep SSID
wpa_supplicant -iwlan0 -c/etc/wpa_supplicant/wpa_supplicant.conf &
wpa_cli -iwlan0 -p/var/run/wpa_supplicant add_network	
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 ssid '"12345-wep"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 key_mgmt NONE
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 wep_key0 '"12345"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant enable_network 0
udhcpc -i wlan0

wpa_supplicant -iwlan0 -c/etc/wpa_supplicant/wpa_supplicant.conf &
wpa_cli -iwlan0 -p/var/run/wpa_supplicant add_network	
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 ssid '"1234567890-wpa"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 psk '"1234567890"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant enable_network 0
udhcpc -i wlan0

-----------------------------------------------
ps ax | grep "wpa_supplicant -B" | grep -v grep
kill {pid of wpa_supplicant}

-----------------------------------------------------------

ubuntu bluetooth :
1. 複製 /etc/bluetooth/csr_115200.psr
2. 重新INIT
                echo 168 > /sys/class/gpio/export
                echo out > /sys/class/gpio/gpio168/direction
                echo 0 > /sys/class/gpio/gpio168/value
                usleep 100000
                echo 1 > /sys/class/gpio/gpio168/value
                echo 168 > /sys/class/gpio/unexport
                sleep 1
                /usr/bin/bccmd -d /dev/ttymxc1 -t bcsp psload -r /etc/bluetooth/csr_115200.psr
            	/usr/bin/hciattach /dev/ttymxc1 bcsp 115200 flow
            	/usr/bin/hciconfig hci0 up
3. hcitool dev (看到devices)
4. hcitool scan (掃bluetooth)
5. hcitool lescan 

ubuntu 3G :
0. sim 卡要插入(台灣大哥大 無帳號密碼)
1. sudo gedit /etc/wvdial.conf
	[Dialer Defaults]
	APN=internet
	Init1 = ATZ
	Init2 = ATQ0 V1 E1 S0=0 &C1 &D2 +FCLASS=0
	Profile = taiwan
	Init4 = AT+CGDCONT=1,"IP","internet"
	Stupid Mode = yes
	ISDN = 0
	Modem Type = Analog Modem
	Phone = *99#
	Modem = /dev/ttyUSB3
	Username = NA
	Dial Command = ATDT
	Password = pass
	Baud = 460800
2. sudo wvdial
3. ping 8.8.8.8

ubuntu modem :
1. sudo su
2. echo "ATDT3109" > /dev/ttymxc4 (播打分機3109)

====================================== SMTT ubuntu release (Rs232) ============================================
1. check /var/log/Xorg.0.log  
	[    10.888] (II) config/udev: Adding input device Risintech Serial TouchScreen (/dev/input/event4)
	[    10.888] (**) Risintech Serial TouchScreen: Applying InputClass "evdev touchscreen catchall"
2. modify touch : /usr/share/X11/xorg.conf.d/10-evdev.conf (設定 InvertY / SwapAxes 調整touch)
	Section "InputClass"
        	Identifier "evdev touchscreen catchall"
        	MatchIsTouchscreen "on"
        	MatchDevicePath "/dev/input/event*"
       	 	Driver		"evdev"
        	Option		"InvertY"	"yes"
        	Option		"SwapAxes"	"true"
	EndSection
3. cp -avrf 10-serialtouch.rules /etc/udev/rules.d/
4. chmod 777 /etc/udev/rules.d/10-serialtouch.rules
5. cp -avrf touchattach /usr/bin/
6. touchattach -rtouch /dev/ttymxc3 (/etc/rc.local)
7. rotation-R 旋轉	(/home/rtx/rotation-R/	for rs232 的script)
8. Battery_Test (/home/rtx/Battery_Test 5 )
9. ubuntu - battery auto detect - 30 sec
	  - xset -dpms off (聽說可以off display,沒試過)
	  - rm -rf /etc/dbus-1/system.d/org.freedesktop.UPower.conf (reboot) (Disabling battery/power management)

====================================== BISHOP ubuntu ============================================
0. git clone ssh://gitolite@10.65.162.95/Ubuntu/kernel.git
	Git Cola (視窗) : Reset Branch to 3.10.31
	git checkout -b 3.10.31 (Local)

1. Cross compile : 
	file-system : ltib
		ltib/config/platform/rtx_bishop/main.lk
		TOOLCHAIN_PATH : /usr (Host /usr/bin/arm-linux-gnueabi-)
		CFLAGS : -O2 -march=armv7-a -mfpu=neon -mfloat-abi=softfp
	kernel : modify build_module.sh (搭配 filesystem)
		export CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-
		KERNEL_PROJECT_CONFIG=rtxconfig/rtx-bishop-mx53_defconfig
		KERNEL_LOADADDR=0x70008000
		KERNEL_DTB=rtx-bishop-mx53.dtb

2. ./build_module.sh all (第1次build)
	arch/arm/mach-imx/built-in.o: In function `init_mmdc_lpddr2_settings':
	:(.text+0xb5cc): 未定義參考到「imx6sx_lpddr2_freq_change」
	make: *** [vmlinux] Error 1
	=> menuconfig -> System Type -> Freescale i.MX support -> i.MX53 support (only)
	
3. ./build_module.sh all (第2次build)
	make[1]: *** No rule to make target `arch/arm/boot/dts/rtx-bishop-mx53.dtb'.  Stop
	=> 建立 rtx-bishop-mx53.dts 
	=> modify rtx-bishop-mx53.dts, imx53.dtsi

4. csr wireless driver enable
	[*] Networking support --->
		[*] Wireless ---->
			<*> cfg80211 - wireless configuration API
			[*] cfg80211 wireless extensions compatibility
	Device Drivers --->
		[*] Staging drivers --->
			<M> CSR wireless driver

====================================== u-boot-201407 ============================================
0. git clone ssh://gitolite@10.65.162.95/Ubuntu/u-boot.git
	git checkout -b 201407

1. Cross compile :
	u-boot : modify build.sh
		a. export CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-
		b. U_BOOT_DEFAULT_CONFIG=rtx-bishop-mx53_mfg_config
		 modify include/configs/retronix/rtx-bishop-mx53_mfg.h (for ramdisk boot) ./build.sh
		 //modify include/configs/rtx-bishop-mx53_mfg.h (for ramdisk boot) ./ltib
		a. #define CONFIG_BOOTARGS         "console=ttymxc3,115200 rootfs=/dev/ram0 rdinit=/init rootwait video=off"
		b. #define CONFIG_BOOTCOMMAND      "bootm 0x70800000 0x70E00000 0x70D00000"
		
		modify include/configs/retronix/rtx-bishop-mx53_mfg.h(for emmc boot)
		a. #define CONFIG_BOOTARGS         "console=ttymxc3,115200 root=/dev/mmcblk0p1 init=/sbin/init rootwait rw video=mx3fb:bpp=32 fec_mac=fa:3a:65:c7:14:ea"
		b. #define CONFIG_BOOTCOMMAND      "mmc dev 1;mmc read ${loadaddr} 0x6800 0x2000; mmc read ${dtb_loadaddr} 0x5000 0x1000;bootm 0x70800000 - 0x70D00000"

2. ./build.sh all (第一次build)

3. MFG tool - emmc boot 
		<CMD type="push" body="send" file="files/BISHOP/linux/3.10.31/u-boot.imx">Sending u-boot.bin</CMD>
		<CMD type="push" body="$ dd if=$FILE of=/dev/mmcblk0 bs=1024 seek=1 conv=fsync">write u-boot.bin</CMD>

		<CMD type="push" body="send" file="files/BISHOP/linux/3.10.31/rtx-bishop-mx53.dtb">Sending kernel uImage</CMD>
		<CMD type="push" body="$ dd if=$FILE of=/dev/mmcblk0 bs=1024 seek=10240 conv=fsync">write kernel dtbs</CMD>

		<CMD type="push" body="send" file="files/BISHOP/linux/3.10.31/uImage">Sending kernel uImage</CMD>
		<CMD type="push" body="$ dd if=$FILE of=/dev/mmcblk0 bs=1024 seek=13312 conv=fsync">write kernel image</CMD>

====================================== imx_usb ============================================
1. HW : 
	a. MFG mode
	b. usb-otg connect to pc (lsusb 有看到devices)
2. prepare image (uboot, kernel, ramdisk)
3. modify mx53_usb_work.conf
	../../u-boot-201407/u-boot.imx:dcd
	../../kernel-3.10.31/arch/arm/boot/uImage:load 0x70800000
	../../kernel-3.10.31/arch/arm/boot/dts/rtx-bishop-mx53.dtb:load 0x70D00000
	../mk_53ramdisk:load 0x70E00000
	../../u-boot-201407/u-boot.imx:plug,jump header	
4. sudo ./imx_usb
====================================== ltib pitx ============================================
1. 使用ltib compile kernel
	=> cp -avrf rtx-q7-mx6q_defconfig imx6_defconfig.dev

====================================== ltib bishop ============================================
1. 使用ltib compile kernel
	=> cp -avrf rtx-bishop-mx53_defconfig => config/platform/rtx_bishop/rtx-bishop-mx53_defconfig.dev

2. 使用ltib compile u-boot 
	=> cp -avrf rtx-bishop-mx53_mfg_config => u-boot/include/configs/rtx-bishop-mx53_mfg_config

3. USB 無反應.	Enable USB phy	OK

4. copy (csr-wifi-5.1.0-1.arm) driver 到 file system, 再另外copy一份到 /lib/firmware/unifi-sdio-0 ,就可insmod成功.

5. sudo apt-get update

6. sudo apt-get install wireless-tools wpasupplicant (udhcpc vim)

7. insmod /lib/modules/3.10.31+/kernel/drivers/staging/csr/csr_helper.ko  csr_wifi.ko

8.ifconfig eth1 up

====================================== UDHCPD Server , IPTABLE ============================================
9. 開啟AP
	設定wifi為AP, 及 PASSWORD
	iwpriv eth1 AP_SET_CFG ASCII_CMD=AP_CFG,SSID="Bishop-AP-3110",SEC="open",KEY=0,CHANNEL=1,PREAMBLE=0,MAX_SCB=8,END
	iwpriv eth1 AP_BSS_START

10. 設定udhcpd server
		a. /etc/udhcpd.conf
			修改	interface	eth1
				router		192.168.0.10
		b. ifconfig eth1 up
		c. ifconfig eth1 192.168.0.10 netmask 255.255.255.0
		d. udhcpd /etc/udhcpd.conf
		e. pc : ipconfig (插拔network cable)
		(Kernel : ip Netfilter - iptable)

	try : 
		echo 0 > /proc/sys/net/ipv4/ip_forward	
		iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE	
		iptables -A FORWARD -i eth0 -o eth1 (不下-m state --state RELATED,ESTABLISHED) -j ACCEPT	
		iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT	
		echo 1 > /proc/sys/net/ipv4/ip_forward	
		ifconfig eth1 192.168.0.10
		udhcpd


	issue : 
		iptables: No chain/target/match by that name.
			=> ip Netfilter 相關config要開啟. (NAT)
			=> (state --state RELATED,ESTABLISHED) 拿除,先不上

====================================== ltib 換 kernel ============================================
1. dist/kernel/kernel-git-retronix.spec
2. config/platform/imx/imx5_bi_shop_defconfig.dev (config)
	make[2]: *** [arch/arm/boot/compressed/piggy.lzo] Error 1
3. sudo apt-get install lzop
	Specify LOADADDR on the commandline to build an uImage
	make[1]: *** [arch/arm/boot/uImage] Error 1
4. make $LOCV ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" $SYSCFG_KTARG LOADADDR=0x70008000
	=>OK

	error: File not found by glob:
5. rm rpm/SPECS/*	(就OK)
	3G devices 找不到
6. dts - gpio pin (MODEM_DISABLE_B, MODEM_RESET_B)
	kernel config setting 3G相關

====================================== ubuntu passwd ============================================
1. sudo visudo  => add path  (retronix ALL = NOPASSWD: /usr/bin/rpm, /opt/ltib/usr/bin/rpm)
	passwd 無密碼.
	ex : user = rtx
		add path  (rtx ALL = NOPASSWD: ALL)

====================================== build busybox-1.20.2 ============================================
1. ./ltib -m prep -p busybox (將pkgs解開到資料夾中)
2. terminal : 
	export ARCH=arm
	export CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-
3. make menuconfig
4. make

====================================== smarc平台 ============================================
<Trusty Ubuntu for i.MX6 boards + kernel 3.10.17>
uboot : 
	2014.07
kernel : 
	3.10.17
ubuntu : 
	Bundary file system

====================================== Q7平台 +  Ubuntu for i.MX6 boards + kernel 3.10.17 ============================================
uboot : 
	2014.07
	=>ltib/config/platform/imx/main.lkc --> mx6q_q7 (更改成rtx-q7-mx6q 設定)
kernel : 
	3.10.17
	=> ltib/config/platform/imx/main.lkc --> imx6_defconfig(更改成rtx-q7-mx6q_defconfig 設定)
	=> ltib/dist/lfs-5.1/kernel/kernel-common.tmpl LOADADDR=0x10008000
ubuntu : 
	ubuntu-12.04-destop-base-gpu-gst.tar.bz2	(low-graphics mode)
	ubuntu-12.04-destop-base.tar.bz2		(low-graphics mode)
	
	install : New User :Q7
		  New account : q7
		  Password : retronix

====================================== uboot config setting ============================================
1. //	#define CONFIG_DYNAMIC_MMC_DEVNO  //固定dev開機參數使用
2. #define CONFIG_SYS_MMC_ENV_DEV		0	//使用dev 0 環境變數

====================================== Target 上 直接 build ============================================
1. apt-get source libx11
2. tar -C . -zxvf libx11_1.6.2.orig.tar.gz
3. ./configure --prefix=/usr
	error : configure: error: newly created file is older than distributed files!
	=> sudo date -s 14-01-12
	error : configure: error: /X11 doesn't exist or isn't a directory
XXX
====================================== ubuntu 14.04  Q7 (SMTT) ============================================
1. uboot + kernel 3.10.17 + ubuntu14.04
2. apt-get instal libgles1-mesa-dev / libgles2-mesa-dev / libegl1-mesa-dev
			
3. install YOCTO
	a. i.MX 6 Yocto Project Patch Release Notes, Rev L3.10.17_1.0.2, 10/2014
	b. repo 
	c. 	mkdir yocto_3.10.17-1.0.2
		cd yocto_3.10.17-1.0.2
		repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-3.10.17-1.0.2_ga
		repo sync
		MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11 -e x11
		bitbake fsl-image-x11
			(	sudo apt-get install texinfo
				sudo apt-get install chrpath	)
	d. sudo tar -pjxvf fsl-image-x11-imx6qsabresd.tar.bz2 -C /media/rtx-3110/Volar112/ (filesystem)
	d. cd yocto_3.10.17-1.0.2/build-x11/tmp/work/cortexa9hf-vfp-neon-mx6-poky-linux-gnueabi/gpu-viv-bin-mx6q/1_3.10.17-1.0.2-hfp-r0/gpu-viv-bin-mx6q-3.10.17-1.0.2-hfp
	e. cp -avrf * /media/rtx-3110/Volar112/ (opt folder / usr folder 複製進去)
	f. /opt/viv_samples/es20/vv_launcher/vv_launcher (測試GPU是否OK)

	GPU :Segmentation fault (Try below method)
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa-egl
-----------------------------------------------------------------------------
VPU : 
mkdir fsl_bsp_3.10.17_1.0.0_ga
cd fsl_bsp_3.10.17_1.0.0_ga
1.下載 :
	YOCTO -> Pkgs
2.解開 :
	0. gpu-viv-bin-mx6q-3.10.17-1.0.2-hfp	--> (YOCTO)
	a. firmware-imx-3.10.17-1.0.0		--> (YOCTO)
	b. imx-lib-3.10.17-1.0.0	--> (YOCTO)
	c. imx-vpu-3.10.17-1.0.0	--> (YOCTO)
	d. libfslcodec-3.0.11		--> (YOCTO)
	e. libfslparser-3.0.11		--> (YOCTO)
	f. libfslvpuwrap-1.0.46		--> (YOCTO)
	g. gstreamer-0.10.36		--> (YOCTO)
	h. gst-plugins-base-0.10.36	--> (YOCTO)
	i. gst-fsl-plugins-3.0.11	--> (YOCTO)

3.需要 :
	a. copy kernel : lib / include  --> /lib , /usr/include to filesystem
	b. sudo apt-get update
	c. sudo apt-get install make gcc automake libtool autopoint bison flex gtk-doc-tools libglib2.0-dev libxml2-dev g++
	d. gstreamer-0.10.36 : patch - /gst/parse/grammar.y
		-int priv_gst_parse_yylex (void * yylval_param , yyscan_t yyscanner);
		+int priv_gst_parse_yylex (void * yylval_param);
	e. gst-fsl-plugins-3.0.11 : configure modify (add export PLATFORM=MX6), make distclean, 
					export PKG_CONFIG="`which pkg-config` --static --libs" 
	f. libGAL.so -> libGAL-x11.so (libGAL.so -> libGAL-fb.so)
4.安裝 : 
	0. copy to SDCARD (gpu-viv-bin-mx6q-3.10.17)
	a. make PLATFORM=IMX6Q all & sudo make PLATFORM=IMX6Q install (imx-lib-3.10.17-1.0.0)
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (libfslcodec-3.0.11)
	c. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (libfslparser-3.0.11)
	d. make PLATFORM=IMX6Q all & sudo make PLATFORM=IMX6Q install (imx-vpu-3.10.17)
	e. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (libfslvpuwrap-1.0.46)
	f. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (gstreamer-0.10.36)
	g. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (gst-plugins-base-0.10.36)
	h. make PLATFORM=IMX6Q all & sudo make PLATFORM=IMX6Q install (fsl-alsa-plugins-1.0.25)
	i. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install (gst-fsl-plugins-3.0.11)

5. 加裝
	a. gst-plugins-good
		出事 :	XInclude error : could not load xml/element-udpsrc.xml, and no fallback was found
		pathc : gst/audiofx/audiocheblimit.c
			@@ -46,12 +46,12 @@
			  * be at most this value. A lower ripple value will allow a faster rolloff.
  			  *
			  * As a special case, a Chebyshev type 1 filter with no ripple is a Butterworth filter.
			- * </para>
			+ * <para>
			  * <note><para>
			  * Be warned that a too large number of poles can produce noise. The most poles are possible with
			  * a cutoff frequency at a quarter of the sampling rate.
			  * </para></note>
			- * <para>
			+ * </para>
			  * <refsect2>

			/gst/udp/gstudpsrc.c
			@@ -78,14 +78,14 @@
			  * </itemizedlist>
			  * The message is typically used to detect that no UDP arrives in the receiver
			  * because it is blocked by a firewall.
			- * </para>
			+ *
			  * <para>
			  * A custom file descriptor can be configured with the
			  * #GstUDPSrc:sockfd property. The socket will be closed when setting the
			  * element to READY by default. This behaviour can be
			  * overriden with the #GstUDPSrc:closefd property, in which case the application
			  * is responsible for closing the file descriptor.
			- *
			+ * </para>
			  * <refsect2>
		
	b. gst-plugins-bad
		出事 : XInclude error : could not load xml/plugin-voamrwbenc.xml, and no fallback was found
		patch :  gst-plugins-bad-0.10.23.new/docs/plugins/gst-plugins-bad-plugins-docs.sgml
			-    <xi:include href="xml/plugin-voamrwbenc.xml" />

6. 細項 :
	gst-inspect-1.0 fakesrc (可check是否有這元素)


1. ubuntu1404-rootfs-2014-10-24.tar.bz2
2. kernel - lib / include
3. gpu-viv-bin-mx6q-3.10.17-1.0.2-hfp
4. serial-consol / conf
5. apt-get update
6. apt-get install make gcc automake libtool autopoint bison flex gtk-doc-tools libglib2.0-dev libxml2-dev g++
7. install imx-lib
8. install libfslcodec
9. install libfslparser
10. install imx-vpu
11. install libfslvpuwrap
12. install gstreamer		(element : filesrc
13. install gst-plugins-base	(element : playbin2 ,audiotestsrc , ..
14. install fsl-alsa-plugins
15. install gst-fsl-plugins

====================================== Yocto ============================================
repo forall -p -c git branch
repo forall -p -c git status
repo forall -c git status


bitbake -c cleansstate gst-fsl-plugin:
	yocto_3.10.17-1.0.2/build-x11/tmp/deploy/rpm/imx6qsabresd/gst-fsl-plugin* 移除無效 (不會compile),會清
	yocto_3.10.17-1.0.2/build-x11/tmp/work/imx6qsabresd-poky-linux-gnueabi/gst-fsl-plugin/3.0.11-r0/ 會清,空 folder
	yocto_3.10.17-1.0.2/downloads/gst-fsl-pluginXX 移除無效 (不會compile)

bitbake -c cleanall fsl-alsa-plugins

source - 讀入環境設定檔的指令
test - 測試檔案功能
compile :
1. MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11 -e x11
	a. fsl-setup-release.sh : 	getopts 抓參數 $OPTARG
					$fsl_setup_flag = b -->	$BUILD_DIR = build-x11	(建立資料夾)
					$fsl_setup_flag = e -->	$BACKEND = x11		(要編譯的內容)
		# source setup-environment build-x11
			. ./oe-init-build-env $pwd/build-x11
				. $pwd/scripts/oe-buildenv-internal && $pwd/scripts/oe-setup-builddir && [-n $BUILDDIR] && cd $BUILDDIR
		# check conf: local.conf/ local.conf.org/ bblayers.conf.org/ bblayers.conf
2. bitbake fsl-image-x11 (compile )
	a. ~/yocto_3.10.17-1.0.2/build-x11/tmp/work/imx6qsabresd-poky-linux-gnueabi/u-boot-imx/2013.04-r0/git/ (若uboot 客製化)
	b. cd ~/yocto_3.10.17-1.0.2/sources
		# yocto-layer create imx6rex
			Please enter the layer priority you'd like to use for the layer: [default: 6] 
			Would you like to have an example recipe created? (y/n) [default: n] y
			Please enter the name you'd like to use for your example recipe: [default: example] y
			Would you like to have an example bbappend file created? (y/n) [default: n] y
			Please enter the name you'd like to use for your bbappend file: [default: example] y
			Please enter the version number you'd like to use for your bbappend file (this should match the recipe you're appending to): [default: 0.1] 
			New layer created in meta-imx6rex.
			Don't forget to add it to your BBLAYERS (for details see meta-imx6rex\README).
	c. gedit ~/fsl-community-bsp/build/conf/bblayers.conf
		${BSPDIR}/sources/meta-imx6rex \	(在${BSPDIR}/sources/meta-fsl-demos \ 下面)
	d. cd ~/yocto_3.10.17-1.0.2/build-x11/
		# bitbake-layers show-layers
		meta-imx6rex          ~/yocto_3.10.17-1.0.2/sources/meta-imx6rex  6

3. cd ~/yocto_3.10.17-1.0.2/build-x11/
	a. bitbake -c clean u-boot-imx	(砍掉 y_0.1.bbappend)
	b. bitbake -c compile -f u-boot-imx
	c. bitbake fsl-image-x11

====================================== New Yocto ============================================
1. Add sources/meta-imx6-rtx	=>	meta-imx6-rtx/recipes-kernel/linux/linux-rtx_3.10.17.bb
2. MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11-rtxq7 -e x11
3. Add build-x11-rtxq7/bblayers.conf	=>	${BSPDIR}/sources/meta-imx6-rtx
-----------------
建立新的BSP,
1. source setup-environment build-x11
2. Add meta-rtx-arm : conf/ recipes-uboot folder
3. Add 		build-x11/conf/bblayers.conf	:	${BSPDIR}/sources/meta-rtx-arm \
4. Modify 	build-x11/conf/local.conf	:	MACHINE ??= 'imx6q-q7'
5. build-x11/ 	bitbake u-boot-rtx
6. build-x11/ 	bitbake linux-rtx

====================================== repo ============================================
REPO_URL = 'https://gerrit.googlesource.com/git-repo'	(googlesource)
REPO_URL = 'ssh://gitolite@10.65.162.95/git-repo.git'	(retronix)

====================================== linux-3.10.X ============================================
1. git clone ssh://gitolite@10.65.162.95/Kernel/linux-imx-3.10.x.git -b imx-3.10.17
2. make imx_v7_defconfig (default)
3. add linux-rtx_3.10.17.BB
4. bitbake linux-rtx (開始編譯linux kernel)
5. poky/meta/classes/kernel.bbclass : do_install()
6. meta-fsl-arm/recipes-kernel/linux/linux-imx.inc : do_install_append()
7. IMX_TEST_SUPPORT = "n"

====================================== fsl-image-x11 ============================================
0. 搬動meta-rtx-arm到 yocto 另一資料夾, 建立build-x11-rtx後,開始編譯
1. bitbake fsl-image-x11 (開始編譯整個系統)
2. mask : meta-fsl-bsp-release/imx/meta-fsl-arm/conf/layer.conf
	# PREFERRED_PROVIDER_virtual/kernel_mx6 = "linux-imx"

====================================== EFM32 program study ============================================
1. 瞭解 input / output 主要對象, IMX6 - EFM32MCU - LTC4100 - Battery
2. 瞭解 EFM32MCU - LG990F256 (初始化)
3. Double Buffer Study
4. 前EFM32MCU - ARM Linux Firmware Study
5. 硬體Volar112變更
	a. Q39 - S極 3.3V輸出 (power On) - Power On Skip MicroChip

Program :
	SMBUS_Polling() : master scan I2C bus (10msec)
	vI2CCmd_process() : slave scan I2C bus
	vPower_Process() : GPIO / power status check
			a. Power Button Check - ON/OFF
			b. Power AC Check - Power Out AC/Battery
			c. Power AC level Check - Charge/Discharge
			d. Power Battery level Check - Charge/Discharge/Off

====================================== flash : en25q32b ============================================
kernel : 
	board-mx6q_q7.c	 (jffs2: Too few erase blocks)
			 .name = "kernel",
	 		 .offset = 0,
	 		 .size = MTDPART_SIZ_FULL,
	driver/mtd/devices/m25p80.c
filesystem :
	add mtd-util pkgs

操作 : 
	1. cat /proc/mtd
	2. mtdinfo /dev/mtd0
	3. mkdir rootfs
	4. touch rootfs/hello_jffs2
	5. mkfs.jffs2 -r rootfs -o jffs2.img
	6. flashcp jffs2.img /dev/mtd0 -v
	7. mount -t jffs2 /dev/mtdblock0 /mnt/
	8. ls -la /mnt

====================================== Mded ============================================
1. mbed/docs/BUILDING.md
	. Installed [Python 2.7]
	. Installed [setuptools]
	. Optionally you can install [pip]
	. python setup.py install  --  ImportError: No module named setuptools
		synaptic : install python-colorama
				   --  ImportError: No module named setuptools
		下載setuptools-14.3.tar.gz 解開
			sudo python ez_setup.py (安裝setuptools)
	. sudo 	python setup.py install (安裝完成)
		多了 - build/ dist/ mbed_tools.egg-info/
	. workspace_tools/ private_settings.py 
		- 設定build相關訊息.

2. cd workspace_tools : rm private_settings.py, touch private_settings.py
		sudo apt-get install gcc-arm-none-eabi=4.9.3.2015q1-0trusty13 (install gcc-arm-none-eabi 4.9)
		python build.py -help  (help)
		python build.py -m K64F -t GCC_ARM		(k64F : SDK board)
		python build.py -m EFM32LG_STK3600 -t GCC_ARM	(EFM32LG_STK3600 : SDK board)

		python make.py -m K64F -t GCC_ARM -n MBED_A1
		python make.py -m EFM32LG_STK3600 -t GCC_ARM -n MBED_A1

====================================== SMTT emmc LED/ SD LED, Access Flash (Wrapping_Machine) ============================================
1. board_mx6q_ax_a3.c 添加
+static void led_flash_select(unsigned int led)
+{
+	if ( led == 0 ) {
+		gpio_set_value(SABRESD_SD_LED, 0);
+		gpio_set_value(SABRESD_TOUCH_PANEL_LED, 0);
+		gpio_set_value(SABRESD_HDD_LED, 0);
+	} else if( led == 2 ) {
+		gpio_set_value(SABRESD_TOUCH_PANEL_LED, 1);
+	} else if( led == 3 ) {
+		gpio_set_value(SABRESD_SD_LED, 1);
+	} else if( led == 4 ) {
+		gpio_set_value(SABRESD_HDD_LED, 1);
+	}
+}
+
@@ -319,0 +335,2 @@ static const struct esdhc_platform_data mx6q_sabresd_sd3_data __initconst = {
+	.led_flash_select = led_flash_select,
+	.led_num = 3,
@@ -327,0 +345,2 @@ static const struct esdhc_platform_data mx6q_sabresd_sd4_data __initconst = {
+	.led_flash_select = led_flash_select,
+	.led_num = 4,
2. arch/arm/plat-mxc/include/mach/esdhc.h
@@ -38,0 +39,5 @@ struct esdhc_platform_data {
+	void (*led_flash_select) (unsigned int led);
+	struct timer_list led_timer;
+	unsigned int led_updatestate ;
+	unsigned int led_state ;
+	unsigned int led_num;
3. 
--------------------- drivers/mmc/host/sdhci-esdhc-imx.c ----------------------
index 35fd825..4e3e7d0 100644
@@ -102,0 +103,3 @@
+#define DEF_RTXLED_STATE_ON	1
+#define DEF_RTXLED_STATE_OFF	0
+
@@ -105 +108 @@ static void esdhc_post_tuning(struct sdhci_host *host);
-
+void (*led_flash_select) (int led);
@@ -204,0 +208,2 @@ static u32 esdhc_readl_le(struct sdhci_host *host, int reg)
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
+
@@ -465,0 +471,2 @@ static void esdhc_writew_le(struct sdhci_host *host, u16 val, int reg)
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
+
@ -298,0 +299,4 @@ static void esdhc_writel_le(struct sdhci_host *host, u32 val, int reg)
+	struct esdhc_platform_data *boarddata
+				= host->mmc->parent->platform_data;
+
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
@@ -366,0 +371,4 @@ static u16 esdhc_readw_le(struct sdhci_host *host, int reg)
+	struct esdhc_platform_data *boarddata
+				= host->mmc->parent->platform_data;
+
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
@@ -606,0 +615,2 @@ static u8 esdhc_readb_le(struct sdhci_host *host, int reg)
+	struct esdhc_platform_data *boarddata
+				= host->mmc->parent->platform_data;
@@ -607,0 +618 @@ static u8 esdhc_readb_le(struct sdhci_host *host, int reg)
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
@@ -661,0 +673,2 @@ static void esdhc_writeb_le(struct sdhci_host *host, u8 val, int reg)
+	struct esdhc_platform_data *boarddata
+				= host->mmc->parent->platform_data;
@@ -662,0 +676 @@ static void esdhc_writeb_le(struct sdhci_host *host, u8 val, int reg)
+	boarddata->led_updatestate = DEF_RTXLED_STATE_ON;
@@ -791,0 +799,27 @@ static irqreturn_t cd_irq(int irq, void *data)
+static int iRTXFatTimer_Proc(unsigned long data )
+{
+	struct esdhc_platform_data *boarddata = (struct esdhc_platform_data *)data ;
+	//printk(" boarddata->led_num %08X %d.\n",boarddata,boarddata->led_num);
+	if (( boarddata->led_updatestate == DEF_RTXLED_STATE_OFF )&&( boarddata->led_state == DEF_RTXLED_STATE_OFF ))
+	{
+	}
+	else
+	{
+		boarddata->led_updatestate = DEF_RTXLED_STATE_OFF ;
+
+		if ( boarddata->led_state == DEF_RTXLED_STATE_OFF )
+		{
+			boarddata->led_state = DEF_RTXLED_STATE_ON ;
+			boarddata->led_flash_select(boarddata->led_num);
+		}
+		else
+		{
+			boarddata->led_state = DEF_RTXLED_STATE_OFF ;
+			boarddata->led_flash_select(0);
+		}
+	}
+	boarddata->led_timer.expires = jiffies +  HZ/8 ;
+	add_timer( &boarddata->led_timer ) ;
+	return 0;
+}
+
@@ -879,0 +914,11 @@ static int esdhc_pltfm_init(struct sdhci_host *host, struct sdhci_pltfm_data *pd
+		/* Timer 初始化 */
+		init_timer( &boarddata->led_timer ) ;
+		/* 定義 timer 所執行之函式 */
+		boarddata->led_timer.function = (void *)iRTXFatTimer_Proc ;
+		/* 定義 timer 傳入函式之 Data */
+		boarddata->led_timer.data = ((unsigned long) boarddata) ;
+		/* 定義 timer Delay 時間 */
+		boarddata->led_timer.expires = jiffies +  HZ/8 ;
+		/* 啟動 Timer*/
+		add_timer( &boarddata->led_timer ) ;
+
@@ -923,0 +969 @@ static int esdhc_pltfm_init(struct sdhci_host *host, struct sdhci_pltfm_data *pd
+
@@ -951,0 +998,3 @@ static void esdhc_pltfm_exit(struct sdhci_host *host)
+	/* 刪除 Timer*/
+	del_timer( &boarddata->led_timer ) ;

====================================== Wrapping MFG ============================================
0. connect UART1
1. 	mmc0: unrecognised EXT_CSD revision 7
	mmc0: error -22 whilst initialising MMC card
2. MFG kernel 不support這format
3. Fail
4. 	uboot -> make mx6dl_sabresd_mfg_config (修正以下)
			- UART4_BASE_ADDR (console輸出)
			-#define CONFIG_SPLASH_SCREEN
			-#define CONFIG_IMX_PWM
			-#define IMX_PWM1_BASE    PWM1_BASE_ADDR
			-#define IMX_PWM2_BASE    PWM2_BASE_ADDR
			-lib_arm/board.c  : //saveenv();
			-lib_arm/bootm.c  : 更改mcu_wdog_kernel() -> mcu_wdog_disable();
	kernel -> make imx6_updater_defconfig 	(修正kernel)
			-make menuconfig -> system_type -> (default)
5. OK

帳號 : USER:	teraoka /teraokadigi
====================================== PITX MFG ============================================
1. connect UART2
2. u-boot -> make mx6q_sabresd_mfg.h (config)
	include/configs/mx6q_sabresd_mfg.h  :  	CONFIG_UART_BASE_ADDR   UART2_BASE_ADDR
						console=ttymxc1,115200
	board/freescale/mx6q_sabresd/mx6q_sabresd.c : 
			mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D26__UART2_TXD);
			mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D27__UART2_RXD);
3. kernel -> make imx6_updater_defconfig
	make menuconfig : [*] Support i.MX 6Quad SABRESD platform
	arch/arm/mach-mx6/board-mx6q_sabresd.c : early_console_setup(UART2_BASE_ADDR, uart_clk);

	make menuconfig : ----> kernel hacking  --->   Kernel debugging  --->
	Kernel low-level debugging functions ---> Early printk
	arch/arm/plat-mxc/include/mach/debug-macro.S #define UART_PADDR	MX6Q_UART2_BASE_ADDR

	early_print("%s(%d)\n",__FILE__,__LINE__); 

====================================== New Panel + Q7 Add Panel consol ============================================
原Q7 firmware修改
0. modify uboot parameter : (800 x 600)
	video=mxcfb0:dev=ldb,LDB-SGA,if=RGB666
1. /etc/inittab
	::respawn:getty -L tty0 115200 vt100
2. /etc/securetty
	add tty0
3. 帳號 : root / 沒有密碼
====================================== Ubuntu Audio Issue ============================================
雜音
apt-get autoremove pulseaudio (解決)

====================================== EFM32LG 規劃 ============================================
Jlink : 
	Cmd : 	mem32 0x0800 20
		mem32 0x1000 20
		mem32 0x20800 20

boot/c/main.c	: 
		pJumpAdr = 0x1000, 0x20800
		u32SP >= 0x20000000 && u32SP <= 0x20008000
boot/s/startup_efm32lg.S :
		.equ StackStart, 0x20008000
		.section .text.startup_efm32lg
boot/efm32lg.ld : 
		FLASH (rx) : ORIGIN = 0x0, LENGTH = 0x40000 /* 256k */
		RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 0x8000 /* 32k */
		ALIGN(2048), pBootJumpAdr = LONG(0x1000)
main/efm32lg-1000.ld	: 
    		FLASH (rx) : ORIGIN = 0x00001000, LENGTH = 129024
    		RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32768
main/efm32lg-20000.ld
   		 FLASH (rx) : ORIGIN = 0x00020800, LENGTH = 129024
    		RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32768
main/c/i2ccmd.c :
		u32I2CFlashAddress  = 0x20800 ;(init)
		iI2CCmd_GetUpdateStart >= 0x20800
		u32I2CFlashAddress = 0x1000 /0x20800 
		iI2CCmd_GetUpdateFinish >= 0x20800
		*pAdr = 0x1000 / 0x20800
		Erase offset : u32I2CFlashAddress & 0x7FF
		Startup addr : uint32_t u32WriteAdr = 0x800 ;	
Makefile :
		dd if=./out/$(TARGET)-boot-$(VERSION).bin of=./out/$(TARGET)-$(VERSION).bin bs=4096
		dd if=./out/$(TARGET)-0400-$(VERSION).bin of=./out/$(TARGET)-$(VERSION).bin bs=2048 seek=2
		dd if=./out/$(TARGET)-2000-$(VERSION).bin of=./out/$(TARGET)-$(VERSION).bin bs=2048 seek=65

====================================== Ramdisk ============================================
1. 使用uramdisk-imx6.img (已經製作好的img)
2. dd if=uramdisk-imx6.img of=ramdisk.img.gz skip=64 bs=1
3. gunzip ramdisk.img.gz
4. 至要解開的目錄folder中 (如SD卡)
5. sudo cpio -i < ~/ramdisk.img (從放置ramdisk.img的地方,解到目前目錄)

====================================== ifconfig eth0 down ============================================
10分鐘後當機.修正kernel, ldb.c檔案.
1. ldb.c
	+//	if (!ldb->setting[setting_idx].clk_en){
	+//		ldb->setting[setting_idx].clk_en = true;

====================================== uboot emmc write ============================================
cat /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_info
	(Emmc configuration) :
boot_info:0x07;
  ALT_BOOT_MODE:1 - Supports alternate boot method
  DDR_BOOT_MODE:1 - Supports alternate dual data rate during boot
  HS_BOOTMODE:1 - Supports high speed timing during boot
boot_size:536870912KB
boot_partition:0x48;
  BOOT_ACK:1 - Boot acknowledge sent during boot operation
  BOOT_PARTITION-ENABLE: 1 - Boot partition 1 enabled
  PARTITION_ACCESS:0 - No access to boot partition
boot_bus:0x00
  BOOT_MODE:0 - Use single data rate + backward compatible timings in boot operation
  RESET_BOOT_BUS_WIDTH:0 - Reset bus width to x1, single data rate and backwardcompatible timings after boot operation
  BOOT_BUS_WIDTH:0 - x1 (sdr) or x4 (ddr) bus width in boot operation mode

u-boot 2015.04
/sys/devices/soc0/soc.1/2100000.aips-bus/219c000.usdhc/mmc_host/mmc3/mmc3:0001

====================================== install apt-get mirror path ============================================
install apache2 : 
sudo dpkg -i libapr1_1.4.6-1_i386.deb
sudo dpkg -i libaprutil1_1.3.12+dfsg-3_i386.deb (try x2)+
sudo dpkg -i libaprutil1-dbd-sqlite3_1.3.12+dfsg-3_i386.deb
sudo dpkg -i libaprutil1-ldap_1.3.12+dfsg-3_i386.deb

sudo dpkg -i apache2.2-bin_2.2.22-1ubuntu1.10_i386.deb
sudo dpkg -i apache2-utils_2.2.22-1ubuntu1.10_i386.deb
sudo dpkg -i apache2.2-common_2.2.22-1ubuntu1.10_i386.deb
sudo dpkg -i apache2-mpm-worker_2.2.22-1ubuntu1.10_i386.deb
sudo dpkg -i apache2_2.2.22-1ubuntu1.10_i386.deb
---------------------------------------------------------------
http://localhost/  ---It works!  （Apache2 install finish)

cd /var/www
/var/www$ sudo ln -s /media/data3/apt-mirror/mirror/archive.ubuntu.com/ubuntu ubuntu
/var/www$ sudo ln -s /media/data3/apt-mirror/mirror/security.ubuntu.com/ubuntu ubuntu-security
/var/www$ sudo ln -s /media/data3/apt-mirror/mirror/extras.ubuntu.com/ubuntu/ ubuntu-extras
---------------------------------------------------------------------------------------
http://localhost/ubuntu/  --- ubuntu path OK

modify /etc/apt/sources.list
http://localhost/ubuntu/
http://localhost/ubuntu-security
http://localhost/ubuntu-extras

sudo apt-get update
sudo apt-get upgrade

====================================== Air platform building SI-12 ======================================
Install :
1. dd if=*.iso of=usb_disk
2. uboot - 設定開機 usb disk (Esc key)
	. partition (grub) 10G 4G 50G
		P1 : 16G	/
		P2 : 512M	/var/sysconfig
		P3 : 46G	/home
	. 簡體, 時區上海, 帳號 casri : admin, 

3. 更改root密碼 : sudo passwd root (admin)
4. apt-get (mirror server) (install gdm) .sh
	set -e
	sudo dpkg -i libapr1_1.4.6-1_i386.deb
	sudo dpkg -i libaprutil1_1.3.12+dfsg-3_i386.deb
	sudo dpkg -i libaprutil1-dbd-sqlite3_1.3.12+dfsg-3_i386.deb
	sudo dpkg -i libaprutil1-ldap_1.3.12+dfsg-3_i386.deb
	sudo dpkg -i apache2.2-bin_2.2.22-1ubuntu1.10_i386.deb
	sudo dpkg -i apache2-utils_2.2.22-1ubuntu1.10_i386.deb
	sudo dpkg -i apache2.2-common_2.2.22-1ubuntu1.10_i386.deb
	sudo dpkg -i apache2-mpm-worker_2.2.22-1ubuntu1.10_i386.deb
	sudo dpkg -i apache2_2.2.22-1ubuntu1.10_i386.deb

	sudo cp sources.list /etc/apt/sources.list

	cd /var/www
	sudo ln -s /media/data3/apt-mirror/mirror/archive.ubuntu.com/ubuntu ubuntu
	sudo ln -s /media/data3/apt-mirror/mirror/security.ubuntu.com/ubuntu ubuntu-security
	sudo ln -s /media/data3/apt-mirror/mirror/extras.ubuntu.com/ubuntu/ ubuntu-extras

	sudo apt-get update
	sudo apt-get upgrade

	sudo apt-get install flashplugin-installer chromium-browser synaptic ssh vsftpd vino vinagre x11vnc libwebkitgtk-1.0-0 openjdk-6-jdk g++ ethtool gnome mesa-utils

	///sudo apt-get remove nvidia-common(影響可能無法開機)
5. 	更新語言包

6. xulrunner : 按下方式 install
	FFVER=`grep -Po  "\d{2}\.\d+" /usr/lib/firefox/platform.ini`
	ARCH=`uname -p`
	XURL=https://ftp.mozilla.org/pub/mozilla.org/xulrunner/releases/$FFVER/runtimes/xulrunner-$FFVER.en-US.linux-$ARCH.tar.bz2
	cd /opt
	sudo sh -c "wget -O- $XURL | tar -xj"
	sudo ln -s /opt/xulrunner/xulrunner /usr/bin/xulrunner
	sudo ln -s /opt/xulrunner/xpcshell /usr/bin/xpcshell

7. wake_on_lan 
	 configure wake-on-lan:
	1.Install ethtool
		sudo apt-get install ethtool
	2.Edit /etc/rc.local to add this line before the exit 0 line:
		ethtool -s eth0 wol g
	3.Find out the MAC address of your network card (replace eth if with your interface name, eth0, eth1, ..):
		ifconfig eth0 | grep "HWaddr" | awk '{print $5}' (英語系統 : check HWaddr)
	4.Shutdown the machine. You should be able to wake it up using:
		wakeonlan 00:03:2d:2a:6b:9f (target : shutdown -h 0)

8. watch_dog :
	1. cp NCT5523 資料夾到 ubuntu
	2. ubuntu 安裝compiler
	3. make clean , make
	4. sudo ./NCT5523 (WDT work)

9. 備份 /var/cache/apt/archives （X)

10. 切換管理器 - panel 拿掉 / ..  空的界面 (Alt+右鍵 : 移動,隱藏,刪除)

11. jdk1.6.0_06 : 執行 ./  ( /usr/lib/jvm )
	sudo cp /media/KKK/jdk-6u6-linux-i586.bin /usr/lib/jvm/
	sudo chmod +x /usr/lib/jvm/jdk-6u6-linux-i586.bin
	cd /usr/lib/jvm
	sudo ./jdk-6u6-linux-i586.bin	(yes   install)
	
	update-alternatives --config java  (check java)
	sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.6.0_06/jre/bin/java 0
	sudo update-alternatives --config java (config number)
	java -version (check)
	sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.6.0_06/bin/javac 0
	sudo update-alternatives --config javac (config number)

12. If your system Graphics has a value of unknown  (install  Graphics)
	1. sudo apt-get install mesa-utils
	2. sudo apt-get remove nvidia-common
	3. reboot (intel Bay Trail x86/MMX/SSE2)

13. ubuntu - audio : 聲音設置, 硬件, 裝置..

====================================== Air platform Install SI-12  (New) ======================================
1. prepare usb install resource (dd if=*.iso of=/dev/sdc)
	- use ubuntu -12.04.05 LTS "Precise Pangolin"	i386 
2. set boot from usb disk (ESC key into BIOS)
3. start install :
	安裝（簡體) - 其他選項 - 
	partition (grub) 10G 4G 50G
		P1 : 10G	/
		P2 : 4G		/var/sysconfig
		P3 : 50G	/home
	. 簡體, 時區上海, 漢語, 帳號 casri : admin, /
4. (安裝完成重新開機)into ubuntu system:
	Add root password : sudo passwd root (admin)
(install script 取代 5,6,7)
	5. install mirror server (for apt-get)
		install apache2
		install mirror server
	6. sudo apt-get update/upgrade
		sudo apt-get install flashplugin-installer chromium-browser synaptic ssh vsftpd vino vinagre x11vnc libwebkitgtk-1.0-0 openjdk-6-jdk g++ ethtool gnome mesa-utils librxtx-java	(select lightgdm)
	7. install xulrunner : 按下方式 
		FFVER=`grep -Po  "\d{2}\.\d+" /usr/lib/firefox/platform.ini`
		ARCH=`uname -p`
		XURL=https://ftp.mozilla.org/pub/mozilla.org/xulrunner/releases/$FFVER/runtimes/xulrunner-$FFVER.en-US.linux-$ARCH.tar.bz2
		cd /opt
		sudo sh -c "wget -O- $XURL | tar -xj"
		sudo ln -s /opt/xulrunner/xulrunner /usr/bin/xulrunner
		sudo ln -s /opt/xulrunner/xpcshell /usr/bin/xpcshell
//9. set wake_on_lan (No implement)
//	modify /etc/rc.local	:	ethtool -s eth0 wol g
10. 切換管理器 - panel 拿掉  (alt + 右鍵)
	系統設置 : 語言支持 - 安裝
11. install jdk1.6.0_06	
12. Add file to system
	1). cp WDT(NCT5523 modify) to /home/casri/
	2). cp watchdog /bin/watchdog (script chmod +x)
  	3). cp java-test.jar	/home/casri/
  	----- (for usb update)
  	4). sudo cp 99-mount-run.rules 	/etc/udev/rules/
  	5). sudo cp update.sh		/var/sysconfig/
  	6). usb disk : check_code, autorun.sh, net_set.sh, ip.set
  	
13. sudo visudo	(modify sudo don't need password)
	casri   ALL=(ALL) NOPASSWD:ALL
	#%admin ALL=(ALL) ALL
	#%sudo  ALL=(ALL:ALL) ALL

14. ubuntu firefox issue
	Fix Firefox Error "your firefox profile cannot be loaded. it may be missing or inaccessible" On Ubuntu
	"sudo chown -R casri:casri /home/casri/.mozilla/"
	"sudo chown -R casri:casri /home/casri/.cache/" 
		
15. Add link (for filesystem read only)
/var/log		/var/sysconfig/log	
/var/lib/urandom	/var/sysconfig/var/lib/urandom	
/var/lib/sudo/casri	/var/sysconfig/var/lib/sudo/casri
/etc/mtab		/proc/self/mounts

16. Add extern link
	1). sudo ln -s /usr/lib/jni/librxtxSerial.so /usr/lib/jvm/jdk1.6.0_06/jre/lib/i386/librxtxSerial.so (for java exectue)
	-------------------
	2). sudo sed --in-place 's/NoDisplay=true/NoDisplay=false/g' /etc/xdg/autostart/*.desktop  (for disable display)
	
17. clean file
	sudo rm -rf /var/cache/apt/archives/*

18. 用戶帳號 : 自動登錄 開啟
	
19. 重新設定 / file system read only  (errors=remount-ro => defaults,ro)
	(sudo mount -o remount,rw /) change to rw mode
	modify /etc/fstab
/dev/sda1 /               ext4    defaults,ro,errors=remount-ro 0       1
/dev/sda3 /home           ext4    defaults        0       2
/dev/sda2 /var/sysconfig  ext4    defaults        0       2
tmpfs /tmp tmpfs defaults,noatime,mode=1777 0 0

20. tar 儲存

====================================== GRUB+mini system ======================================
USB Grub's install
1. use su  (假設掛在/media/disk/)
2. mkdir -p /media/disk/boot/grub
3. cp /usr/lib/grub/i386-pc/* /media/disk/boot/grub/
4. gedit(or其他文字編輯器) /media/disk/boot/grub/menu.lst   ?? skip
5. echo yes > /media/disk/my-usb
6. sudo grub --no-floppy
7. 在grub命令列下(grub>)  find /my-usb   (假設代號為(hd1,0))
8. sudo grub-install --root-directory=/media/disk '(hd1)'

9. kernel /boot/vmlinuz-3.13.0-37-generic	（有的版本不行）
   initrd /boot/initrd.img-3.13.0-37-generic
   boot
   (copy vmlinuz..,initrd,,到相關位置）
10. touch /boot/grub/menu.lst
	ln -s /boot/grub/menu.lst /boot/grub/grub.conf
-----------------menu.lst------------
default=0 
timeout=5
#splashimage=(hd0,6)/boot/grub/splash.xpm.gz
hiddenmenu
title XXXX Core (2.6.11-1.1369_FC4)
        root (hd0,0) 
        kernel /boot/vmlinuz-3.13.0-37-generic ro root=/dev/sdb1 
        initrd /boot/initrd.img-3.13.0-37-generic
------------------------------------------------
11. check /etc/default/grub	??
12. check /etc/grub.d		??
====================================== hdd grub-install 另一方法 ======================================
1. sudo mount /dev/sda1 /mnt/rootfs
2. sudo grub-install --boot-directory=/mnt/rootfs/boot /dev/sda
3. cp grub.cfg /mnt/rootfs/boot/grub/

====================================== 複製 rootfs sd card to another ======================================
 	sudo dd if=tool.bin of=/dev/sdd bs=1M count=1000
	sudo mkfs.ext4 -L data /dev/sdd2
	sudo cp -avrf rootfs_a* /media/rtx-3110/data/

====================================== ubuntu server iso ======================================
從server 直接製作 mini system + grub ( F4 - Install minimal system)
	1. Select language : English
		your location : Unuted States
		Detect keyboard : No
		Configure keyboard :　English (US) - English (US)
		Detect Network hardware : No
		Configure network : Hostname : ubuntu
		new user : rtx	,	your account : rtx / password : retronix
		Encrypt home directory : No
		Configure clock : No - taipei
		Install /dev/sdc ->  Manual -> /dev/sdc - Yes -> 512.0MB / 3.5 GB - Done setting up
		partition formatting
		Install the base system
		configurint linux-image-3.13.0-32-generic : 	Error !!(500M -> 1G)
		proxy -> continue
		upgrades -> no automatic updates
		Basic Ubuntu server *
		grub boot loader	Yes
		UTC			Yes
		
		ubuntu
	2. Full name for the new user:	rtx
		username for your account : rtx	 / password : admin
	3. Configure the clock : yes
	4. grub, grub-install, tar, 

====================================== ubuntu TTy font size ======================================
1. sudo dpkg-reconfigure console-setup
2. UTF-8
3. Combined - Latin, slavic cyrillic; Greek
4. Fixed
5. select Fone size

ubuntu 視窗 console :
1. Alt+Ctrl+T
2. Alt+Ctrl+F7 (主視窗)
3. Alt+Ctrl+F1 (Termial 視窗)
====================================== tar ubuntu system ======================================
sudo mount -o remount,rw /
1. sudo rm /var/cache/apt/archives/*
2. switch to usb_install.iso boot : try ubuntu
3. sudo tar cjvfp ../rootfs.tar.bz *

----------------------------SI-12 Issue----------------------------------
1. eclips issue :
   java lang unsatisfiedlinkerror couldn load swt libraryjava lang unsatisfiedlinkerror couldn load swt library
	•32 Bits System: ln -s /usr/lib/jni/libswt-* ~/.swt/lib/linux/x86/
2. java 無法運行 :
	sudo apt-get install librxtx-java
	sudo ln -s /usr/lib/jni/librxtxSerial.so /usr/lib/jvm/jdk1.6.0_06/jre/lib/i386/librxtxSerial.so

3. 無法登入 issue :
	sudo rm -rf /tmp/*
	sudo chown -R user:user /home/user 

4. low graphic issue :
	rm -rf /tmp/*

5. 網路更改Issue : (X)
	sudo mv /etc/NetworkManager/system-connections /var/sysconfig/
	sudo ln -s /var/sysconfig/system-connections  /etc/NetworkManager/system-connections
	
6. ubuntu close message : (可能無法開機)
	1.) system program problem detected
		gksudo gedit /etc/default/apport
		enabled=1  -->  enabled=0
	2.) disable the update manager
		echo "## SHOW HIDDEN AUTOSTART SERVICES ##" 
		sudo sed --in-place 's/NoDisplay=true/NoDisplay=false/g' /etc/xdg/autostart/*.desktop 
	3.) (可能解無法開機問題)
		sudo mv /etc/xdg/autostart /var/sysconfig/
		sudo ln -s /var/sysconfig/autostart  /etc/xdg/autostart	

7. 可能無法開機 :
	1.) sudo apt-get install nvidia-331	(X)
	2.) sudo apt-get install nvidia-common	(V)

8. 查詢 : udevadm info -a -p $(udevadm info -q path -n /dev/sdb1)

9. usb automount disable
	dconf-editor  : 	disable ubuntu automount
		org.gnome.desktop.media-handling. 
		org.gnome.desktop.media-handling.automount-open
		---------------------------------------------------
		gsettings set org.gnome.desktop.media-handling automount-open false
		gsettings set org.gnome.desktop.media-handling automount false
		gsettings get org.gnome.desktop.media-handling automount 讀取
		
10. 12.04# armel版本 (??)
	但是gpu 是hfp 問題
	所以要先安裝 apt-get install libc...:armhf
				libstdc++
				libc-mutil
----------------------------SI-12 control-----------------------------------
test script :
#!/bin/sh
output=$(ps | grep ps | awk '{print $2}')
echo "output = $output " > /dev/$output
action=$1
p1=$2
p2=$3
func_RTX() {
			case "$action" in
			brightness)
				echo "brightness = $p1 " > /dev/$output
				if [ $(cat /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-HDMI-A-1/status) = "connected" ]; then
					xrandr --output HDMI1 --brightness $p1
				fi
				if [ $(cat /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-HDMI-A-2/status) = "connected" ]; then
					xrandr --output HDMI2 --brightness $p1
				fi
				exit 0
				;;
			gamma)
				echo "gamma = $p1 " > /dev/$output
				if [ $(cat /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-HDMI-A-1/status) = "connected" ]; then
					xrandr --output HDMI1 --gamma $p1
				fi
				if [ $(cat /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-HDMI-A-2/status) = "connected" ]; then
					xrandr --output HDMI2 --gamma $p1
				fi
				exit 0
				;;
			suspend)
				echo "suspend " > /dev/$output
				sudo pm-suspend
				exit 0
				;;
			hibernate)
				echo "hibernate " > /dev/$output
				sudo pm-hibernate
				exit 0
				;;
			display)
				echo "display " > /dev/$output
				xdpyinfo | grep dimensions
				;;
			temp)
				temp2=$(cat /sys/devices/platform/coretemp.0/temp2_input)
				temp3=$(cat /sys/devices/platform/coretemp.0/temp3_input)
				temp4=$(cat /sys/devices/platform/coretemp.0/temp4_input)
				temp5=$(cat /sys/devices/platform/coretemp.0/temp5_input)
				temp_avg=$(expr $temp2 + $temp3 + $temp4 + $temp5)
				temp_avg=$(expr $temp_avg / 4000)	
				echo "temp = $temp_avg " > /dev/$output
				;;
			*)
				echo "please check input parameter as below :" > /dev/$output
				echo "./XXX brightness 1" > /dev/$output
				echo "./XXX gamma 1:1:1" > /dev/$output
				echo "./XXX suspend" > /dev/$output
				echo "./XXX hibernate" > /dev/$output
				echo "./XXX display" > /dev/$output
				echo "./XXX temp" > /dev/$output
				echo "----------------" > /dev/$output
			esac
}

func_RTX

====================================== S12  autorun.sh ======================================
/etc/udev/rules.d/99-mount-run.rules	: event
/var/sysconfig/update.sh		: mount usb & check_code & run autorun.sh
/media/sdb1/autorun.sh
/media/sdb1/net_set.sh	

====================================== S12 ubuntu lock ======================================
1. shortcut keys Disable
2. Terminal Disable
3. 啟動運用程序 Disable

====================================== Qc_tool issue ======================================
regedit :
HKEY_LOCAL_MACHINE -> HARDWARE -> DEVICEMAP -> SERIALCOMM : 刪除com port

====================================== Java study ======================================
1. Install Eclipse
2. New - Class - heleo.java
3. Run as - Java application

4. System Library : use jdk1.6.0_06
5. sudo dmidecode | more  (detect board information)
	Change Product Name : RMC2640F
6. Java compile : 
	a) Java project(utils)  --> building and export to utils.jar, and put to utils-test/libs/utils.jar
	b) Java project(utils-test) --> building and export to exec.jar for user
	c) java -jar SI12_Machine.jar

-------
1. C:\Windows\System32\wbem\WMIC 以系統管理員身份去執行 (/?)help
2. /OUTPUT:D:CPU.TXT CPU LIST FULL

3. virtual script : 執行 WMI
4. study WMI Query Language(WQL)查詢語法與應用
5. 搜尋 WMI 相關monitor info & info setting
6. vbscript to java
7. WSH : Windows Script Host Version (vbscript,jscript)
8. powershell : PS C:\>
	可以check : 	Get-WmiObject -Class Win32_BIOS 
			Get-WmiObject -Namespace root\wmi -Class WmiMonitorBrightness
			
			
9. rundll32.exe shell32.dll,Control_RunDLL desk.cpl（控制視窗）
					   powercfg.cpl  
10. control.exe powercfg.cpl
					   
11. powercfg -hibernate on
12. Rundll32.exe Powrprof.dll,SetSuspendState Sleep
13. powercfg -a

Win32_TemperatureProbe    MSAcpi_ThermalZoneTemperature

14. .hta 
15. Log Paser 功能強大且威名遠播的記錄分析器

====================================== Ethernet Check ======================================
1.ethtool eth1   (查詢eth1 網路口基本設置)

====================================== android-x86 download and build ======================================
android-x86-4.4-r3.iso => DVD / USB  OK. (UltraISO.exe)

自行製作
1. makdir -p Intel
2. cd Intel
3. curl http://10.65.162.95/git-repo/repo > repo
4. chmod a+x repo
5. repo init -u ssh://gitolite@10.65.162.95/android/platform/manifest.git -b android-4.4_r1.2
6. repo sync
7. source build/envsetup.sh
8. lunch full_x86-eng
9. make -j4	(產生ramdisk.img system.img userdata.img) 
	make -j4  TARGET_PRODUCT=generic_x86	(O)
 	make iso_img TARGET_PRODUCT=generic_x86	(X)
10. ls -la out/target/product/generic_x86/

11. export CROSS_COMPILE=`pwd`/prebuilts/gcc/linux-x86/x86/i686-linux-android-4.6/bin/i686-linux-android-
12. cd  linux\
13. make ARCH=x86 i386_defconfig
14. make ARCH=x86 CC="${CROSS_COMPILE}gcc -mno-android" bzImage

sudo grub-install /dev/sdb

====================================== 3G MiniPCIe Module Cinterion EHS5-E ======================================
kernel config setting
	Device Drivers  --->
		[*] USB support  --->
			<*>     USB Modem (CDC ACM) support
			<*>   USB Serial Converter support  --->
				[*]   USB Generic Serial Driver
				<*>   USB driver for GSM and CDMA modems
		[*] Network device support  --->
			<*>   PPP (point-to-point protocol) support
			[*]     PPP multilink support (EXPERIMENTAL)
			[*]     PPP filtering
			<*>     PPP support for async serial ports
			<*>     PPP support for sync tty ports

1. minicom -s
2. Serial port setup	->	Serial Device : /dev/ttyUSB1	->	Exit
3. AT command	
	AT
	OK
	AT+CCID=?
	OK
	AT+CCID?
	+CCID: 89886920032033866662
4. AT^SIND?	查看SIM卡AT^SIND?				

====================================== Video ======================================
out : 
	Display 0 (LVDS0)
	Display 1 (HDMI)
	Display 2 (LCD)
	Display 3 (LVDS1)
hareware :
     	TWO LVDS Panel 
     	One HDMI port
     	One LCD Panel	
uboot-parameter :
command line : setenv bootargs ${bootargs} video=mxcfb0:dev=ldb,LDB-1024x600,if=RGB666 video=mxcfb1:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 video=mxcfb2:dev=lcd,CLAA-WXGA,if=RGB24,fbpix=BGR32 video=mxcfb3:dev=ldb,LDB-1024x600,if=RGB666
board.c/dtb :
	mxcfb1: fb@0 {
		compatible = "fsl,mxc_sdc_fb";
		disp_dev = "ldb";	....
	};
	mxcfb2: fb@1 {
		compatible = "fsl,mxc_sdc_fb";
		disp_dev = "hdmi";	....
	};
	mxcfb3: fb@2 {
		compatible = "fsl,mxc_sdc_fb";
		disp_dev = "lcd";	....
	};
	mxcfb4: fb@3 {
		compatible = "fsl,mxc_sdc_fb";
		disp_dev = "ldb";	....
	};	
    static struct fsl_mxc_hdmi_core_platform_data hdmi_core_data = {
      .ipu_id = 0,
      .disp_id = 1,		....
     };
     static struct fsl_mxc_lcd_platform_data lcdif_data = {
      .ipu_id = 0,
      .disp_id = 0,		....
     };
     static struct fsl_mxc_ldb_platform_data ldb_data = {
      .ipu_id = 1,
      .disp_id =0,
      .sec_ipu_id = 1,
      .sec_disp_id = 1,		....
     };
It result : frame buffer allocation as below 
 frame buffer allocation as below:	/sys/class/graphic/fb0 - fb5
		+--------> 	DISP3 BG : 		/dev/fb0 <-----> /dev/video16
LVDS0       -------+
		+--------> 	DISP3 FG : 		/dev/fb1 <-----> /dev/video17
		+--------> 	DISP4 BG : 		/dev/fb2 <-----> /dev/video18
HDMI       -------+
		+--------> 	DISP4 FG : 		/dev/fb3 <-----> /dev/video19
LCD        -------->		DISP4 BG - DI1 : 	/dev/fb4 <-----> /dev/video20
LVDS1      -------->		DISP3 BG - DI1 : 	/dev/fb5 <-----> /dev/video21

驗證 : 
	1. dd if=/dev/fb0 of=/dev/fb2
	2. dd if=/unit_tests/wall-1024x768-565.rgb of=/dev/fb2

====================================== x11vnc ======================================
1. 執行 x22vnc server
2. windows : VNC-Viewer-5.2.1-Windows-32bit.exe
3. connected !!!
====================================== login passwd ======================================
/etc/shadow : 存著passwd
若 root 登入, 要取消passwd : root::0:0:99999:7:::  (第2欄del)
root:$1$wmZk8o.a$vSeZL8NP7zwMhVrlOM/aS.:14975:0:99999:7:::  (更改root/admin)
====================================== image format ======================================
1. 自網路下載1920x1080桌布jpg, 垂直翻轉.
2. 或使用小畫家開啟桌布,另存bmp 24位元點陣圖檔, 垂直翻轉..
3. 使用Okteta取出Raw Data,另存hdmi.rbg
4. 可使用dd if=hdmi.rbg of=/dev/fb3  (輸出到hdmi 1920x1080)
5. 記得 echo 0 > /sys/class/graphics/fb3/blank (enable)

1. 自網路下載1024x768桌布jpg, 垂直翻轉.
2. 或使用小畫家開啟桌布調整大小,選取剪下後, 重貼在新的檔案, 且調整位置,後另存bmp 24位元點陣圖檔, 垂直翻轉..
3. 使用Okteta取出Raw Data,另存lvds.rbg
4. 可使用dd if=lvds.rbg of=/dev/fb0  (輸出到lvds 1024x768)
5. 記得 echo 0 > /sys/class/graphics/fb0/blank (enable)
6. 記得 echo 24 > /sys/class/graphics/fb0/bits_per_pixel

====================================== ubuntu install/debug/test 3.14.28 ===============================
1. sudo fdisk /dev/sdb
2. sudo mkfs.ext4 -L Q7_mp /dev/sdb1
3. sudo dd if=out/imx6q-rtx-q7.dtb of=/dev/sdb bs=512 seek=26624
4. sudo dd if=out/uImage of=/dev/sdb bs=512 seek=26880
5. sudo dd if=/dev/zero of=/dev/sdb bs=512 seek=24576 count=10
6. sudo tar -pxvf ubuntu-14.04-hf-minimal-20151015.tgz -C /media/rtx-3110/Q7_mp/
7. cp -avrf v001 /media/rtx-3110/Q7_mp/home/rtx/
8. cp -avrf imx6 misc /media/rtx-3110/Q7_mp/home/rtx/
9. sudo cp -avrf lib /media/rtx-3110/Q7_mp/
10. sudo cp -avrf include/linux /media/rtx-3110/Q7_mp/usr/include/
11. sudo vi /media/rtx-3110/Q7_mp/etc/fstab
    ---------- boot -----------
12. apt-get update
13. apt-get upgrade
14. apt-get install dpkg-dev
15. apt-get install g++ libpixman-1-dev make pkg-config libdrm-dev libx11-dev x11proto-gl-dev libgl1-mesa-dev libgcrypt11-dev x11proto-xcmisc-dev x11proto-bigreqs-dev x11proto-randr-dev x11proto-render-dev x11proto-fonts-dev x11proto-bigreqs-dev x11proto-video-dev x11proto-composite-dev x11proto-record-dev x11proto-scrnsaver-dev x11proto-resource-dev x11proto-xf86dri-dev x11proto-present-dev x11proto-xinerama-dev libxfont-dev libxkbfile-dev libpciaccess-dev gawk doxygen flex bison byacc libbsd-dev libxxf86dga-dev libltdl-dev libudev-dev libdbus-1-dev libxmltok1-dev libssl-dev x11proto-dri3-dev libgdbm-dev

16. apt-get source xinit
	./configure --prefix=/usr && make all && make install
17. apt-get install xserver-xorg-video-modesetting xserver-xorg-video-fbdev xserver-xorg-input-mouse xserver-xorg-input-kbd xserver-xorg-input-evdev-dev twm x11-apps xterm
18. apt-get source xserver-xorg-core
	./configure --prefix=/usr && make all && make install

/etx/X11/xorg.conf
Section "ServerLayout"
        Identifier      "Configured"
        Option  "AutoAddDevices"        "False"
        Option  "Allow EmptyInput"      "False"
EndSection


Section "InputDevice"
        Identifier  "Keyboard0"
        Driver      "evdev"
        Option      "Device" "/dev/input/event2"
        Option      "XkbLayout" "pt"
EndSection


Section "InputDevice"
        Identifier  "mouse0"
        Driver      "mouse"
        Option      "Device" "/dev/input/mice"
        Option      "Protocol" "Auto"
EndSection
-------------------------------------------startx finish--------------------------------------------------

./mp-tools.py	(import Gtk, GObject, GdkX11 - importError)
1. apt-get install python-netifaces python-netaddr alsa-utils python-gi-dev libgtk-3-dev (python version issue)
   apt-get install python-gst0.10-dev

2. 裝錯pkgs 可試著,重返!!	
	-imx-gpu-viv-5.0.11.p4.5-hfp (recopy gpu_core)
	-xinit
	-xserver-xorg-core
	-重裝!!
3. gstreamer-1.4.1
	a. tar Jxvf gstreamer-1.4.1.tar.xz
	b. ntpdate time.stdtime.gov.tw && hwclock -w
	c. apt-get install gtk-doc-tools
	d. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
-------------------------------------------mp-tools finish----------------------------------

-Debian

1. imx-lib-3.14.28-1.0.0
	tar -zxvf imx-lib-3.14.28-1.0.0.tar.gz
	make -j1 PLATFORM=IMX6Q all && make install
	modify rng/ screenlayer/ sim/ Makefile don't install
2. firmware-imx-3.14.28
	chmod +x firmware-imx-3.14.28-1.0.0.bin
	./firmware-imx-3.14.28-1.0.0.bin (Unpacking file)
	cp -avrf firmware /lib/	
3. libfslcodec-4.0.3
	chmod +x libfslcodec-4.0.3.bin
	./libfslcodec-4.0.3.bin (Unpacking file)
	apt-get install autoconf make
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
4. libfslparser-4.0.3
	chmod +x libfslparser-4.0.3.bin
	./libfslparser-4.0.3.bin (Unpacking file)
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install

5. imx-vpu-5.4.28
	a. chmod +x imx-vpu-5.4.28.bin
	b. ./imx-vpu-5.4.28.bin
	c. make PLATFORM=IMX6Q all && make install

6. libfslvpuwrap-1.0.58
	chmod +x libfslvpuwrap-1.0.58.bin
	./libfslvpuwrap-1.0.58.bin
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install

7. gstreamer-0.10.36
	tar jxvf gstreamer-0.10.36.tar.bz2
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install autopoint pkg-config bison flex gtk-doc-tools libglib2.0-dev libxml2-dev
		- vi gst/parse/grammar.y	(modify)
			更改  int priv_gst_parse_yylex (void * yylval_param , yyscan_t yyscanner);
			為    int priv_gst_parse_yylex (void * yylval_param)

8. gst-plugins-base-0.10.36
	tar jxvf gst-plugins-base-0.10.36.tar.bz2
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- vi ext/vorbis/gstvorbisdeclib.h
			 use upstream fix for ivorbis plugin build fail (patch)
		-


9. gst-fsl-plugins-4.0.3
	a. tar -zxvf gst-fsl-plugins-4.0.3.tar.gz
	b. ./configure PLATFORM=MX6 --prefix=/usr && make all
		- apt-get install libx11-dev libxext-dev
		- vi src/misc/v4l_source/src/mfw_gst_v4lsrc.c (modify)
		- vi src/misc/tvsrc/src/mfw_gst_tvsrc.c (modify)
			//  struct v4l2_dbg_chip_ident chip;
			//  if (ioctl (fd_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip)) {
			//    g_print ("VIDIOC_DBG_G_CHIP_IDENT failed.\n");
			//  } else
			//    g_print ("sensor chip is %s\n", chip.match.name);
		- vi tools/gplay/Makefile (modify)
			LIBS = -lrt -lglib-2.0
	c.  make install

10. gst-plugins-gl
	a. tar jxvf gst-plugins-gl-0.10.3.tar.bz2
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install libglu1-mesa-dev libglew-dev
		- apt-get install libjpeg-dev

11. gst-plugins-good-0.10.31
	a. tar jxvf gst-plugins-good-0.10.31.tar.bz2
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install liborc-0.4-dev
		- vi sys/v4l2/gstv4l2bufferpool.c	(modify)
			sed -i -e "/input:/d" sys/v4l2/gstv4l2bufferpool.c
		- vi sys/v4l2/v4l2_calls.c	(modify)
			sed -i -e "/case V4L2_CID_HCENTER/d" -e "/case V4L2_CID_VCENTER/d" sys/v4l2/v4l2_calls.c
		- vi gst/audiofx/audiocheblimit.c
			+- * </para>
			++ * <para>
			+  * <note><para>
			+  * Be warned that a too large number of poles can produce noise. The most poles are possible with
			+  * a cutoff frequency at a quarter of the sampling rate.
			+  * </para></note>
			+- * <para>
			++ * </para>
		- vi gst/udp/gstudpsrc.c
			+- * </para>
			++ *
			+  * <para>
			+  * A custom file descriptor can be configured with the
			+  * #GstUDPSrc:sockfd property. The socket will be closed when setting the
			+  * element to READY by default. This behaviour can be
			+  * overriden with the #GstUDPSrc:closefd property, in which case the application
			+  * is responsible for closing the file descriptor.
			+- *
			++ * </para>
		- vi gst/audiofx/audiofirfilter.c
		- vi gst/audiofx/audioiirfilter.c
		- vi gst/level/gstlevel.c
			  * <title>Example application</title>
			- * |[
			+ * <informalexample><programlisting language="C">

			- * ]|
			+ * </programlisting></informalexample>
		- apt-get install libspeex-dev libesd0-dev libaa1-dev libcaca-dev (add element..alsasink.)
		- apt-get install libv4l-dev 
		- apt-get install libgtk2.0-dev
		- apt-get install libpulse-dev
		- modify (vi configure.ac) OpneGL/gl.h --> GL/gl.h	(X)
		- apt-get install libobjc-4.8-dev gobjc++-4.8
		- apt-get install autoconf2.13 automake1.11  (automake1.14 X)

	d. make all
	e. make install

12. fsl-alsa-plugins-1.0.25
	a. tar -zxvf fsl-alsa-plugins-1.0.25.tar.gz
	b. ./configure PLATFORM=MX6 --prefix=/usr && make all
		- apt-get install libasound2-dev
		- cp mxc_asrc.h /usr/include/linux/ (自kernel copy)
	c. 
		- apt-get install libtheora-dev (enable config)
		- apt-get install libflac-dev

14. imx-gpu-viv-5.0.11.p4.5-hfp
	a. chmod +x imx-gpu-viv-5.0.11.p4.5-hfp.bin
	b. cp 到相關目錄上.
	c. /opt/viv_samples/es20/vv_launcher/vv_launcher
	GPU :Segmentation fault (Try below method)
	rm /usr/lib/arm-linux-gnueabihf/libGL.so
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa-egl


--------------------------------------------gpu work --------------------------------
Issue : 
1. Failed to apply ACL on /dev/video17: Operation not supported
	- kernel config + CONFIG_TMPFS_POSIX_ACL=y
2. could not open moddep file '/lib/modules/3.14.28-g6d7c889/modules.dep.bin'
	- depmod


gst-launch-1.0 audiotestsrc ! alsasink
gst-launch-1.0 playbin uri=file:///home/rtx/mp/tools/001.MP4 video=mfw_v4lsink
gst-play-1.0 playbin 001.MP4
gst-launch-0.10 playbin2 uri=file:///home/rtx/XXXX_xvid_8m_23fps_mpeg_320k_1920x1080.avi video-sink=mfw_v4lsink

gst-launch-1.0 playbin uri=file:///home/rtx/mp/tools/001.MP4 videotestsrc pattern=00 ! imxg2dvideosink framebuffer=/dev/fb3
gst-launch-1.0 playbin uri=file:///home/rtx/mp/tools/001.MP4 video-sink="imxg2dvideosink framebuffer=/dev/fb3"
gst-launch-1.0 playbin uri=file:///mnt/sda1/A.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb3" &
gst-launch-1.0 playbin uri=file:///mnt/sda1/A.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb3 window-width=100 window-height=100 force-aspect-ratio=True" &

gst-launch-1.0 playbin uri=file:///mnt/sda1/A.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb3 window-x-coord=500 window-y-coord=500 window-width=600 window-height=600 force-aspect-ratio=True" &

1. mp-tools.py
2. define.py
3. layout.py
4. state.py

gst-plugins-base-0.10.36 : rebuild  ./autogen.sh --prefix=/usr
apt-get install mpeg2dec
apt-get install libv4l-dev
apt-get install libogg-dev
apt-get install libtheora-dev
apt-get install libvisual-0.4-dev

apt-get install v4l-conf
apt-get install v4l-utils
apt-get install media-ctl
apt-get install libvorbis-dev
apt-get install libvorbisidec-dev
apt-get install libcdparanoia-dev
apt-get install libltdl-dev
apt-get install libgnomevfs2-dev
apt-get install libxv-dev
apt-get install libgirepository1.0-dev (checking for gobject-introspection... yes)
apt-get install forts-arphic-uming

apt-get install mpeg2dec libv4l-dev libogg-dev libtheora-dev libvisual-0.4-dev v4l-conf v4l-utils media-ctl libvorbis-dev libvorbisidec-dev libcdparanoia-dev libltdl-dev libgnomevfs2-dev libxv-dev libgirepository1.0-dev (checking for gobject-introspection... yes)


apt-get install gstreamer1.0  (fixed : undefined symbol: gst_date_time_type. ,then remove)
1. gstreamer-1.4.1
	a. tar Jxvf gstreamer-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
		- apt-get install libpthread-workqueue-dev
		- apt-get install libgmp-dev
		- apt-get install libgsl0-dev
2. gst-plugins-base-1.4.1
	a. tar Jxvf gst-plugins-base-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install

3. gst-plugins-good-1.4.1
	a. tar Jxvf gst-plugins-good-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install

4. gst-plugins-bad-1.4.1
	a. tar Jxvf gst-plugins-bad-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr --disable-cocoa && make all && sudo make DESTDIR=/ install
		- apt-get install libgstreamer-plugins-base1.0-0

5. gst1.0-fsl-plugins-4.0.3
	a. tar -zxvf gst1.0-fsl-plugins-4.0.3.tar.gz
	b. ./autogen.sh --prefix=/usr PLATFORM=MX6 && make all && sudo make DESTDIR=/ install
		- // chip 
6. gst-plugins-ugly-1.4.1
	a. tar Jxvf gst-plugins-ugly-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install

no playbin2 element : gst-plugins-base

apt-get install valgrind

7. apt-get install g++ libpixman-1-dev make pkg-config libdrm-dev libx11-dev x11proto-gl-dev libgl1-mesa-dev libgcrypt11-dev x11proto-xcmisc-dev x11proto-bigreqs-dev x11proto-randr-dev x11proto-render-dev x11proto-fonts-dev x11proto-bigreqs-dev x11proto-video-dev x11proto-composite-dev x11proto-record-dev x11proto-scrnsaver-dev x11proto-resource-dev x11proto-xf86dri-dev x11proto-present-dev x11proto-xinerama-dev libxfont-dev libxkbfile-dev libpciaccess-dev gawk doxygen flex bison byacc libbsd-dev libxxf86dga-dev libltdl-dev libudev-dev libdbus-1-dev libxmltok1-dev libssl-dev x11proto-dri3-dev libgdbm-dev

8. apt-get source xinit
	./configure --prefix=/usr && make all && make install
9. apt-get install xserver-xorg-video-modesetting xserver-xorg-video-fbdev xserver-xorg-input-mouse xserver-xorg-input-kbd xserver-xorg-input-evdev-dev twm x11-apps xterm
18. apt-get source xserver-xorg-core
	./configure --prefix=/usr && make all && make install

/etx/X11/xorg.conf
Section "ServerLayout"
        Identifier      "Configured"
        Option  "AutoAddDevices"        "False"
        Option  "Allow EmptyInput"      "False"
EndSection


Section "InputDevice"
        Identifier  "Keyboard0"
        Driver      "evdev"
        Option      "Device" "/dev/input/event2"
        Option      "XkbLayout" "pt"
EndSection


Section "InputDevice"
        Identifier  "mouse0"
        Driver      "mouse"
        Option      "Device" "/dev/input/mice"
        Option      "Protocol" "Auto"
EndSection


====================================== ubuntu install/debug/test 3.14.28 ===============================
1. sudo fdisk /dev/sdb
2. sudo mkfs.ext4 -L Q7_mp /dev/sdb1
3. sudo dd if=out/imx6q-rtx-q7.dtb of=/dev/sdb bs=512 seek=26624
4. sudo dd if=out/uImage of=/dev/sdb bs=512 seek=26880
5. sudo dd if=/dev/zero of=/dev/sdb bs=512 seek=24576 count=10
6. sudo tar -pxvf ubuntu-14.04-hf-minimal-20151015.tgz -C /media/rtx-3110/Q7_mp/
7. cp -avrf v001 /media/rtx-3110/Q7_mp/home/rtx/
8. cp -avrf imx6 misc /media/rtx-3110/Q7_mp/home/rtx/
9. sudo cp -avrf lib /media/rtx-3110/Q7_mp/
10. sudo cp -avrf include/linux /media/rtx-3110/Q7_mp/usr/include/
11. sudo vi /media/rtx-3110/Q7_mp/etc/fstab
    ---------- boot -----------
12. apt-get update
13. apt-get upgrade
14. apt-get install dpkg-dev

1. gstreamer-1.4.1
	a. tar Jxvf gstreamer-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
		- apt-get install autoconf make autopoint libtool pkg-config
		- apt-get install bison flex gtk-doc-tools libglib2.0-dev libasound-dev x264
2. gst-plugins-base-1.4.1
	a. tar Jxvf gst-plugins-base-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
3. gst-plugins-good-1.4.1
	a. tar Jxvf gst-plugins-good-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
將 (imx-lib, firmware-imx, libfslcodec, libfslparser, imx-vpu, libfslvpuwrap, imx-gpu-viv) 安裝!!
4. gst1.0-fsl-plugins-4.0.3
	a. tar -zxvf gst1.0-fsl-plugins-4.0.3.tar.gz
	b. ./autogen.sh --prefix=/usr PLATFORM=MX6 && make all && sudo make DESTDIR=/ install
		vi libs/v4l2_core/gstimxv4l2.c
		- apt-get install libg2-dev
5. gst-plugins-bad-1.4.1
	a. tar Jxvf gst-plugins-bad-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr --disable-cocoa --disable-gtk-doc && make all && sudo make DESTDIR=/ install
		-apt-get install liborc-0.4-dev libdirectfb-dev libfaad-dev mpg123 libmpg123-dev
6. gst-plugins-ugly-1.4.1
	a. tar Jxvf gst-plugins-ugly-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && sudo make DESTDIR=/ install
		- apt-get install libx264-dev libmpeg2-4-dev

================================================Install Ubuntu 14.04 ====================================================
package 作用!!!

firmware-imx-3.14.28-1.0.0/		: Freescale IMX firmware such as for the VPU
fsl-alsa-plugins-1.0.25/		: Freescale alsa-lib plugins
gst-fsl-plugins-4.0.3/			: Freescale multimedia gstreamer based plugin for i.MX series application processor.
gst1.0-fsl-plugins-4.0.3/		: Freescale multimedia gstreamer based plugin for i.MX series application processor.
gst-plugins-base-0.10.36/		: This is GStreamer, a framework for streaming media.
gst-plugins-base-1.4.1/			: This is GStreamer, a framework for streaming media.
gst-plugins-good-0.10.31/		: This is GStreamer, a framework for streaming media.
gstreamer-0.10.36/			: This is GStreamer, a framework for streaming media.
gstreamer-1.4.1/			: This is GStreamer, a framework for streaming media.
imx-gpu-viv-5.0.11.p4.5-hfp/		: GPU Core IP in binary and test application source
imx-lib-3.14.28-1.0.0/			: Platform specific libraries for imx platform
imx-test-3.14.28-1.0.0/			: Unit tests for the IMX BSP
imx-vpu-5.4.28/				: Freescale VPU library
libfslcodec-4.0.3/			: Freescale Multimedia codec libs
libfslparser-4.0.3/			: Freescale Multimedia parser libs
libfslvpuwrap-1.0.58/			: Freescale Multimedia VPU wrapper
xserver-xorg-video-imx-viv-5.0.11.p4.5/	: Vivante xorg driver


==============================重新製作Q7 Ubuntu System MP=================================
uboot : 2015.04
kernel : 3.14.28
filesystem : ubuntu 14.04
1. /etc/lsb-release #get the ubuntu version
2. lsb_release -d -s | cut -d ' ' -f 2	#command get the ubuntu version

=======================================================================================
1. Sdcard fdisk, format
	sudo fdisk /dev/sdb
   	sudo mkfs.ext4 -L Q7_mp /dev/sdb1
2. dd uboot, dtb, uImage
	sudo dd if=u-boot.imx of=/dev/sdb bs=512 seek=2
	sudo dd if=out/imx6q-rtx-q7.dtb of=/dev/sdb bs=512 seek=26624
	sudo dd if=out/uImage of=/dev/sdb bs=512 seek=26880
	sudo dd if=/dev/zero of=/dev/sdb bs=512 seek=24576 count=10
3. tar ubuntu system
	sudo tar -pxvf ubuntu-14.04-hf-minimal-20151015.tgz -C /media/rtx-3110/Q7_mp/ (new install)
	sudo tar -pjxvf ubuntu_mp2.tar.bz -C /media/rtx-3110/Q7_mp/  (安裝完成, cp lib include)
4. copy 相關檔案 , 更改 /etc/fstab
	cp -avrf v001 /media/rtx-3110/Q7_mp/home/rtx/
	cp -avrf imx6 misc /media/rtx-3110/Q7_mp/home/rtx/
	sudo cp -avrf lib /media/rtx-3110/Q7_mp/
	sudo cp -avrf include/linux /media/rtx-3110/Q7_mp/usr/include/
	sudo vi /media/rtx-3110/Q7_mp/etc/fstab
5. boot && update 
	apt-get update
	apt-get upgrade
6. install xserver pkgs 
	apt-get install dpkg-dev g++ libpixman-1-dev make pkg-config libdrm-dev libx11-dev x11proto-gl-dev libgl1-mesa-dev libgcrypt11-dev x11proto-xcmisc-dev x11proto-bigreqs-dev x11proto-randr-dev x11proto-render-dev x11proto-fonts-dev x11proto-bigreqs-dev x11proto-video-dev x11proto-composite-dev x11proto-record-dev x11proto-scrnsaver-dev x11proto-resource-dev x11proto-xf86dri-dev x11proto-present-dev x11proto-xinerama-dev libxfont-dev libxkbfile-dev libpciaccess-dev gawk doxygen flex bison byacc libbsd-dev libxxf86dga-dev libltdl-dev libudev-dev libdbus-1-dev libxmltok1-dev libssl-dev x11proto-dri3-dev libgdbm-dev xserver-xorg-video-modesetting xserver-xorg-video-fbdev xserver-xorg-input-mouse xserver-xorg-input-kbd xserver-xorg-input-evdev-dev twm x11-apps xterm
7. compile xinit, xserver-xorg-core  
	apt-get source xinit
		./configure --prefix=/usr && make all && make install
	apt-get source xserver-xorg-core
		./configure --prefix=/usr && make all && make install
8. vi /etx/X11/xorg.conf
	Section "ServerLayout"
        	Identifier      "Configured"
        	Option  "AutoAddDevices"        "False"
        	Option  "Allow EmptyInput"      "False"
	EndSection
	Section "InputDevice"
       		Identifier  "Keyboard0"
       		Driver      "evdev"
        	Option      "Device" "/dev/input/event2"
        	Option      "XkbLayout" "pt"
	EndSection
	Section "InputDevice"
        	Identifier  "mouse0"
        	Driver      "mouse"
        	Option      "Device" "/dev/input/mice"
        	Option      "Protocol" "Auto"
	EndSection
9. 依照debian-ubuntu.md 手冊, 建立 gstreamer1.0
	a. gstreamer deps
		apt-get install build-essential autoconf libtool wget python pkg-config git
	b. gstreamer1.x
		apt-get install gstreamer1.0-x gstreamer1.0-tools
		apt-get install gstreamer1.0-plugins-good gstreamer1.0-plugins-bad
		apt-get install gstreamer1.0-alsa
	c. install freescale VPU firmware
	d. Build and install Freescale `lib_vpu`
	e. build and install Freescale Codec Library (libfslcodec)
	f. install Freescale libg2d
	g. Build and install libimxvpuapi library
	h. Build and install gstreamer-imx (依照文件:  gstreamer-imx/docs/debian-ubuntu.md)
10. install mp-tools python pkgs
	apt-get install python-netifaces python-netaddr alsa-utils python-gi-dev libgtk-3-dev python-gst0.10-dev

11. run mp-tool.py
	- cp 001.MP4 mp 等測試程式. 
	- setting fb, .xinitrc

12. Python modify!!
	- apt-get install psmisc	(killall)
	- apt-get install fonts-arphic-uming	(fonts)
	- apt-get install wireless-tools (wireless)
	- apt-get install python-serial (import serial)


13. GPU - mediaplayer
	- apt-get install libopenal-dev libalut-dev libjpeg8-dev libfreeimage-dev libsqlite3-dev libsdl1.2-dev libsdl2-mixer-dev
	- apt-get install libgtk2.0-dev libjson0-dev
	編譯 : make 
	- make: warning:  Clock skew detected.
		ntpdate time.stdtime.gov.tw (校正時間)

14. modify ubuntu auto-login and auto-run
	- sudo vi /etc/init/tty1.conf
		- exec /bin/login -f root < /dev/tty1 > /dev/tty1 2>&1
		- exec /usr/bin/startx
	- cp .xinitrc /usr/lib/X11/xinit/xinitrc
		- startx 後 可由此設定自動執行檔案
			- dd if=/home/rtx/mp/tools/wall-1024x768-565.rgb of=/dev/fb2
			- echo 0 > /sys/class/graphics/fb3/blank
			- echo 0 > /sys/class/graphics/fb2/blank
			- cd /home/rtx/mp
			- ./mp-tools.py

15. sudo tar cjvfp ~/Work/Project/Linux/ET_3.14.28/Ubuntu_Test/MPtset/ubuntu_mp2.tar.bz * （壓起來保存)

===============================framebuffer問題=============================================
fb issue :
mxc_sdc_fb timeout when waiting for flip irq  (X) board, dram, source(sdcard), ...
重新換張卡??換張板子??  似乎OK!  ??
===============================Ububtu Wireless number========================================
ubuntu wlan2 number issue : 
/etc/udev/rules.d/70-persistent-net.rules 來決定!!

===============================Serial Download mode 處理步驟 ========================================
1. Emmc / SDCARD 無法開機.
2. IRAM code 測試. (make mx6q_sabresd_iram_config)
3. DDR stress test.
4. Serial Download Mode
===============================how to change DDR clock of i.mx6 ========================================


=============================== PITX bluetooth check  ========================================
1. apt-get install bluez
2. hciconfig hci0 up, hcitool dev  ,  hcitool scan 
=============================== PITX rtc check  ========================================
1. rtc check :  rtc時間  - 系統時間  - 標準時間 (HW check,振盪器)
2. /etc/localtime (選用taipei local time)
3. /proc/driver/rtc (rtc info)
===============================PITX ltib modify kernel/uboot/toolchain ========================================
1. 保留設定好的檔案 :
	config/platform/imx/imx6_defconfig.dev  main.lkc
2. 建置環境 : (building error: failed dependencies)
	a. rm -rf /opt/freescale/ltib (移除掉原先使用的ltib rpm 4.0.x版本)
	b. ./ltib --hostck (tail -f host_config.log) (使用host rpm 4.1.x版本, check log)
3. ./ltib -m config （setting config)
4. ./ltib -m shell :	(check out/rootfs/usr/lib/pkgconfig/xxx.pc)
		 	pkg-config --list-all	(check lib)
			pkg-config --version	(check version)
			echo ${PKG_CONFIG_PATH}
    cmd can use at .spec for debug.


===============================PITX uart0 full function ========================================
imx6 設DTE mode (3in/5out)
TXD/DTR/RTS  RXD/DSR/CTS/DCD/RI

=============================== PITX PCI WIFI /BT  ========================================
 Device Drivers  ---> [*] Network device support  ---> [*]   Wireless LAN  --->  <*>   Atheros Wireless Cards  --->
			[*]   Atheros bluetooth coexistence support
			<*>   Atheros 802.11n wireless cards support 
			[*]     Atheros ath9k PCI/PCIe bus support
			[*]     Atheros ath9k AHB bus support
[*] Networking support  --->  <M>   Bluetooth subsystem support  --->  
				<M>   RFCOMM protocol support
				[*]     RFCOMM TTY support
				<M>   BNEP protocol support
				[*]     Multicast filter support
				[*]     Protocol filter support
				<M>   HIDP protocol support
					Bluetooth device drivers  --->
						<M> HCI USB driver
						<M> Atheros firmware download driver
depmod
modprobe ath3k	(Bluetooth)
modprobe ath9k	(WIFI)

depmod - generate modules.dep and map files
insmod - insert a module into the Linux Kernel
lsmod - show the status of modules in the Linux Kernel
modinfo - show information about a Linux Kernel module
modprobe - add and remove modules from the Linux Kernel
rmmod - remove a module from the Linux Kernel

=============================== PITX 4 Type  ========================================
1. PITX-MX60T 4GB eMMC	1GB DDR3
2. PITX-MX61T 4GB eMMC	2GB DDR3
3. PITX-MX62T 8GB eMMC	1GB DDR3
	a. update MCU firmware
	b. use 1 firmware, check emmc size Ok.
4. PITX-MX63T 8GB eMMC	2GB DDR3
	a. update MCU firmware	(for new board)
	b. use 1 firmware, work normal (使用1G DDR,也可以work)
	c. use DDR_STRESS_TEST cal and get DDR parameter (add board/retronix/rtx_pitx_mx6q/nanya_ddr3_mx6q_2g.cfg)
	d. modify configs/rtx_pitx_mx6q_defconfig		CONFIG_SYS_EXTRA_OPTIONS
	e. modify include/configs/retronix/rtx_pitx_mx6q.h	PHYS_SDRAM_SIZE
	f. modify kernel-device-tree memory : 0x40000000 -> 0x80000000
	kernel debug : drivers/of/fdt.c  : Unflattening device tree:
		early_print(" blob=%8x \n",blob);
		early_print(" __pa(blob)=%8x \n",__pa(blob));
		early_print(" __va(0)=%8x \n",__va(0));
		early_print(" __va(0x10000000)=%8x \n",__va(0x10000000));
		early_print(" __va(0x20000000)=%8x \n",__va(0x20000000));
		early_print(" __va(0x30000000)=%8x \n",__va(0x30000000));
		early_print(" __va(0x40000000)=%8x \n",__va(0x40000000));
		early_print(" __va(0x50000000)=%8x \n",__va(0x50000000));
		early_print(" __va(0x60000000)=%8x \n",__va(0x60000000));
		early_print(" __va(0x70000000)=%8x \n",__va(0x70000000));
		early_print(" __va(0x80000000)=%8x \n",__va(0x80000000));
		early_print(" __va(0x8fffffff)=%8x \n",__va(0x8fffffff));	
		early_print(" __pa(0xfef4b000)=%8x \n",__pa(0xfef4b000));
		early_print(" __pa(0xfef5764e)=%8x \n",__pa(0xfef5764e));
		early_print(" blob=%8x \n",*(unsigned long *)blob);
		early_print(" -> unflatten_device_tree()\n");		
  	g. modify common/image-fdt.c
		of_start =
		    (void *)(ulong) lmb_alloc_base(lmb, of_len, 0x1000,
						   getenv_bootm_mapsize()
						   + getenv_bootm_low() - 384*1024*1024);
		Loading Device Tree to ..( 在縮減384M ) ???為何? 不知!!
	10. cat /proc/meminfo
		dd if=/dev/urandom bs=1324304 of=/tmp/memtest count=1050
		./stress --vm 600 --vm-bytes 1M --timeout 60m --vm-hang 1 &
 		md5sum /tmp/memtest; md5sum /tmp/memtest; md5sum /tmp/memtest

=============================== PITX filesystem  ========================================
./ltib
1. depmod command not found. => 自busybox config 去 open!!
2. wifi, bluetooth => kernel config setting!! (bluetooth,wifi)
	modprobe ath3k
	Bluetooth: Patch file not found ar3k/AthrBT_0x31010000.dfu
3. copy /lib/firmware/ath3k-1.fw  /lib/firmware/ar3k
	iwconfig : check wifi
	hciconfig hci0 up, hcitool scan
4. copy /etc/localtime (taiwan time)

5. 修改 setterm -blank 0  (避免fb0 blank)
	/etc/X11/xorg.conf
        Section "Monitor"
                Identifier "LVDS0"
                Option "DPMS" "false"
        EndSection

        Section "ServerLayout"
                Identifier "ServerLayout0"
                Option "StandbyTime" "0"
                Option "SuspendTime" "0"
                Option "OffTime"     "0"
                Option "BlankTime"   "0"
        EndSection

ubuntu : Demo, Loading, Reboot, MPtool
ltib   : Relibility, MP
MPtool ?
uart ?

調整rtc 使用efm-rtc, 捨棄 imx6-rtc
ltib 使用 busybox hwclock -r
ubuntu 使用 timedatectl
=============================== ubuntu mp : Add test iteam ===============================
1. define.py :	(push rtc.png, rtc-ok.png, rtc-fail.png)
		- gImageRTC          = './images/icon/rtc.png'
		- gImageRTCOK        = './images/icon/rtc-ok.png'
		- gImageRTCFail      = './images/icon/rtc-fail.png'
2. layout.py : 
		- self.parent.TestRtcState      , 
		- define.gImageRtc       , 
3. mp-tools.py :
		- self.TestRtcState       = Gtk.Button()
4. TestManual.py :
		- 6 : self.RunRtcTest,
		- def RunRtcTest(self): . . .

ubuntu mp: stop / run
	1. /etc/init/tty1.conf
		#exec /sbin/getty -8 38400 tty1
		exec /bin/login -f root < /dev/tty1 > /dev/tty1 2>&1
		#exec /usr/bin/startx
	2. /root/.xinitrc
		dd if=/home/rtx/mp/tools/wall-1024x768-565.rgb of=/dev/fb2
		echo 0 > /sys/class/graphics/fb3/blank
		echo 0 > /sys/class/graphics/fb2/blank
		cd /home/rtx/mp
		./mp-tools.py
=============================== AP 架構 ===============================
step : study 資料, test function, 整體架構. (元素, 流程)

=============================== PITX Demo ===============================
1. ubuntu system
2. Demo0 播圖 
   Demo1 播影片(若usb有跑1.mp4, 有否者跑 a.mp4)
3. add /etc/udev/rules.d/90-usb-sdcard-insert.rules
4. add /etc/init.d/rcS	(有usb,才會啟動demo)
	if [ $(ls /dev/sda1 2> /dev/null | wc -l) = 1  ]; then
        	exec /root/Demo
	fi
改放在 /etc/rc.local

5. add /root/Demo executr Demo0,Demo1
=============================== PITX YOCTO ===============================
0. 相關路徑 default.xml
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <default sync-j="2"/>
  <remote fetch="git://git.freescale.com/imx" name="fsl-release" />
  <remote fetch="git://git.yoctoproject.org" name="yocto"/>
  <remote fetch="git://github.com/Freescale" name="freescale"/>
  <remote fetch="git://git.openembedded.org" name="oe"/>
  <remote fetch="git://github.com/OSSystems" name="OSSystems"/>
  <remote fetch="git://github.com/meta-qt5"  name="QT5"/>

  <project remote="yocto" revision="f20e4c0cf6ddb29a1aad6e7b095e1472e81d330c" name="poky" path="sources/poky"/>
  <project remote="yocto" revision="b74e5e690d8d4e149ea9de3f0fcca37bad93935f" name="meta-fsl-arm" path="sources/meta-fsl-arm"/>
  <project remote="oe" revision="7bbacd0023fa1111da94ba0b2aafd7d872301ffe" name="meta-openembedded" path="sources/meta-openembedded"/>
  <project remote="freescale" revision="89c605386ec81d64b38562acbc66942964fad971" name="fsl-community-bsp-base" path="sources/base">
        <copyfile dest="README" src="README"/>
        <copyfile dest="setup-environment" src="setup-environment"/>
  </project>
  <project remote="freescale" revision="b32528c10caac5e85f2b5efe0e5b95322dd68ace" name="meta-fsl-arm-extra" path="sources/meta-fsl-arm-extra"/>
  <project remote="freescale" revision="48cb0bcdd226d2e7eee1fdc222713e1dff93342c" name="meta-fsl-demos" path="sources/meta-fsl-demos"/>
  <project remote="OSSystems" revision="63963cc56c8d0291779693e62b66cb16e5c86883" name="meta-browser" path="sources/meta-browser" />
  <project remote="QT5" revision="41c5daa84af4466bfc9aa61f6f772c68470a628b" name="meta-qt5" path="sources/meta-qt5" />
  <project remote="fsl-release" name="meta-fsl-bsp-release" path="sources/meta-fsl-bsp-release" revision="dizzy_3.14.28-1.0.0_GA" >
     <copyfile src="imx/tools/fsl-setup-release.sh" dest="fsl-setup-release.sh"/>
  </project>
</manifest>

1. 透過網頁,確定下載 branch : 
	repo init -u ssh://gitolite@git-server.rtx.org/Yocto/NXP/fsl-arm-yocto-bsp.git -b RTX-3.14.52-1.1.0_ga
	repo sync
2. ./setup-environment 使用環境說明..
	MACHINE=rtx-pitx-imx6q source fsl-setup-release.sh -b build-x11-PITX -e x11
3. Add build-x11-PITX/conf/bblayers.conf	
		Add :	BBLAYERS += " ${BSPDIR}/sources/meta-rtx-arm "
		(或直接加在 : fsl-setup-release.sh : echo "BBLAYERS += \" \${BSPDIR}/sources/meta-rtx-arm \"" >> $BUILD_DIR/conf/bblayers.conf)
	modify : ./source/meta-fsl-bsp-release/imx/meta-sdk/conf/distro/include/fsl-imx-preferred-env.inc
			# PREFERRED_PROVIDER_virtual/kernel_mx6 = "linux-imx"  ( mask後, 就會build linux-rtx)
		 ./source/meta-fsl-arm/conf/machine/include/imx-base.inc
			PREFERRED_PROVIDER_virtual/kernel ??= "linux-rtx" (更改linux-imx 成 linux-rtx)
		 ./source/meta-fsl-arm/conf/machine/include/mxs-base.inc
			PREFERRED_PROVIDER_virtual/kernel ??= "linux-rtx" (更改linux-imx 成 linux-rtx)
			firmware download to  :  ./build-PITX/tmp/work-shared/rtx-pitx-imx6q/kernel-source


4. build-x11-PITX/ 	bitbake u-boot-rtx (bitbake u-boot-rtx_2015.04.bb)
	check : ./source/meta-rtx-arm/recipes-uboot/u-boot/u-boot-rtx_2015.04.bb
		Add : 	UBOOT_MACHINE ?= "rtx_pitx_mx6q_defconfig"
	image : ./tmp/work/rtx_pitx_imx6q-poky-linux-gnueabi/u-boot-rtx/2015.04-r0/image/boot/u-boot.imx (u-boot-rtx-pitx-imx6q-2015.04-r0.imx)

5. build-x11-PITX/ 	bitbake linux-rtx (bitbake -b linux-rtx_3.14.52.bb)
	check : ./source/meta-rtx-arm/recipes-kernel/linux-rtx_3.14.52.bb
		Fix :	SRCBRANCH = "imx6q-rtx-pico"
			SRCREV = "imx6q-rtx-pico"
		Del : 	SRC_URI += "file://defconfig"

	image : ./tmp/work/rtx_pitx_imx6q-poky-linux-gnueabi/linux-rtx/3.14.52-r0/image/
			uImage--3.14.52-r0-imx6q-rtx-pitx-20160516053609.dtb
			uImage--3.14.52-r0-rtx-pitx-imx6q-20160516053609.bin

6. build-x11-PITX/	bitbake core-image-x11
			bitbake 
			bitbake core-image-minimal
		Fix :	/meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_3.12.52.bb (modify)
			/meta-fsl-bsp-release/imx/meta-bsp/recipes-bsp/u-boot/u-boot-imx_2015.04.bb (modify)
	image : ./tmp/work/rtx_pitx_imx6q-poky-linux-gnueabi/\
			u-boot-rtx/2015.04-r0/image/boot/u-boot.imx
			linux-imx/3.14.52-r0/image/boot/uImage , .dtb
			core-image-minimal/1.0-r0/rootfs/*

7. build-x11-PITX/tmp/deploy/images/rtx-pitx-imx6q/core-image-minimal-rtx-pitx-imx6q.manifest 
	整個映像中使用的所有許可的列表。

8. bitbake PATH :
	export PATH="/home/rtx-3110/Work/Project/Linux/Yocto/sources/poky/scripts:/home/rtx-3110/Work/Project/Linux/Yocto/sources/poky/bitbake/bin:$PATH"
	export PATH="/home/rtx-3110/Work/ADATA_1/fsl-yocto-3/sources/poky/scripts:/home/rtx-3110/Work/ADATA_1/fsl-yocto-3/sources/poky/bitbake/bin:$PATH"
	
9. bitbake -e python | grep ^PACKAGES=     	(目前環境用來check package)
   bitbake -e hotplug | grep ^S=		(Where is the source for a recipe ?)
   bitbake -e hotplug | grep ^WORKDIR=		(Where is the working directory for a recipe ?)

10. build fail (rebuild)
	bitbake -c cleanall core-image-bishop
	rm -rf tmp/stamps

11. 	DEPENDS是build時需要哪個package，
	RDEPENDS則是執行時需要哪個package
	SRC_URI是指定檔案所在的位置
	SRC_URI[md5sum]與SRC_URI[sha256sum]是去驗證檔案是否正確，可以透過md5sum file_name與sha256sum file_name算出。
	LIC_FILES_CHKSUM = 檔案內md5sum計算
	PV = "2004_03_29" (若沒重設,就是.bb version)
12. 工作順序
	a. downloads/hotplug-2004_09_23.tar.gz
	b. 解壓縮到 Yocto/build-PITX/tmp/work/cortexa9hf-vfp-neon-poky-linux-gnueabi/hotplug/2004.03.29-r0/


13. bitbake -c unpack hotplug
    bitbake -c listtasks hotplug
    bitbake -c cleanall hotplug


=============================== PITX LTIB PKGS ===============================
. xf86-input-evdev, xf86-input-mouse ---> home/rtx3110  (cancel)

=============================== PITX LTIB WIFI ===============================
ps ax | grep "wpa_supplicant -B" | grep -v grep
kill {pid of wpa_supplicant}
-----------------------------------------------
wpa_supplicant -iwlan0 -c/etc/wpa_supplicant/wpa_supplicant.conf &
wpa_cli -iwlan0 -p/var/run/wpa_supplicant add_network	
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 ssid '"1234567890-wpa"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 psk '"1234567890"'
wpa_cli -iwlan0 -p/var/run/wpa_supplicant enable_network 0
udhcpc -i wlan0
=============================== PITX ubuntu 網路測試功能 : iperf ===============================
1. server : iperf -s (windows, Jperf2.0.2)
2. client : iperf -c 192.168.11.4 -w 128k -t 10 -i 1

3. nmap -sP 192.168.11.0/24 逐一查看每個 IP 是否已被使用
4. trickle -d download-bandwidth -u upload-bandwidth command 限制頻寬流量
5. trickle -u 2800 iperf -c 192.168.11.2 -w 128k -t 5 -i 1 

=============================== RTC hwclock pkgs building ===============================
1. apt-get source util-linux
	hwclock/rtc.c : synchronize_to_clock_tick_rtc(void) (always ret = 0)
2. ./configure --prefix=/usr --without-ncurses --enable-static
3. make all
4. make install

hwclock : 
    AIE: Alarm interrupt
    UIE: Update interrupt (ie: once per second)
    PIE: Periodic interrupt (sub-second irqs)

cat /proc/driver/rtc 
	rtc_time        : 05:35:52
	rtc_date        : 2016-02-29
	alrm_time       : 04:43:47
	alrm_date       : 2016-02-29
	alarm_IRQ       : no
	alrm_pending    : no
	update IRQ enabled      : no
	periodic IRQ enabled    : no
	periodic IRQ frequency  : 1
	max user IRQ frequency  : 64
	24hr            : yes

cat /sys/class/rtc/rtc0/{name,dev,date,time} 抓時間
	rtc-efm32-i2c
	254:0
	2016-02-29
	05:37:56

若 : Can't init device hci0: Operation not possible due to RF-kill
解 : rfkill unblock all

last message repeated 3 times (update success)
解 : cat /etc/rsyslog.conf  =>  $RepeatedMsgReduction off (試)

================================ TEST ===============================
開機 - 

================================ Wrapping Machine ===============================
u-boot-imx + kernel 3.10.53

static iomux_v3_cfg_t const uart4_pads[] = {
	MX6_PAD_CSI0_DAT12__UART4_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
	MX6_PAD_CSI0_DAT13__UART4_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
};

export ARCH=arm	
export CROSS_COMPILE=/opt/freescale/usr/local/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin/arm-linux-gnueabihf-
make distclean
make mx6dlsabresd_config
./include/configs/mx6sabresd.h
./configs/mx6dlsabresd_defconfig
./board/freescale/mx6sabresd/mx6sabresd.c
	CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/mx6sabresd/mx6dlsabresd.cfg,MX6DL"
	DATA 4 0x020c407c 0x0F0000F3 (UART4 enable 需要更改 C3 -> F3)s
make

DATA 4 0x020c407c 0x0F0000F3

.config
	CONFIG_SYS_ARCH="arm"
	CONFIG_SYS_CPU="armv7"
	CONFIG_SYS_SOC="mx6"
	CONFIG_SYS_VENDOR="freescale"
	CONFIG_SYS_BOARD="mx6sabresd"
	CONFIG_SYS_CONFIG_NAME="mx6sabresd"

手動更改參數設定!!

KERNEL_PROJECT_CONFIG=imx_v6_v7_defconfig
KERNEL_DTB=imx6dl-sabresd.dtb
	make menuconfig : ----> kernel hacking  --->   Kernel debugging  ---> 
	Kernel low-level debugging functions ---> 
		Kernel low-level debugging port (i.MX6Q/DL Debug UART)
		(4) i.MX Debug UART Port Selection
./build_module.sh all

================================ PICO Debain + uboot 2015.04 + kernel 3.14.52===============================
1. General setup  --->  [*] open by fhandle syscalls (Solved)
	[ TIME ] Timed out waiting for device dev-ttymxc1.device.
	[DEPEND] Dependency failed for Serial Getty on ttymxc1.

2. PCI hangup issue (modify as below)
	dts/imx6q-rtx-pitx-soc.dtsi
	intc: interrupt-controlle 拿掉
	-		#address-cells = <1>;
	-		#size-cells = <1>;

3. depmod

4. modprobe ath3k, modprobe ath9k

5. apt-get update
   apt-get upgrade
   apt-get install dpkg-dev wireless-tools bluez

6. 驗證 pci bus - wifi / bluetooth
		- ar3k  - ath3k-1.fw (複製到/lib/firmware/..)
		- iwconfig / hcitool scan
	usb bus - usb storage ok
	ethernet - connect to ethernet ok
	lvds	- dd picture ok
7. device tree : 
	gpio_export 有問題, gpio control 有問題.
	造成uart test fail, 經調整gpio control, uart test pass.	
	


5.1. gstreamer-1.4.1
	a. tar Jxvf gstreamer-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install autoconf make autopoint libtool pkg-config bison flex gtk-doc-tools libglib2.0-dev libasound-dev x264

5.2. gst-plugins-base-1.4.1
	a. tar Jxvf gst-plugins-base-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
	element 不存在 :   need -> apt-get install 
	cdparanoia,ogg		- libcdparanoia-dev
	vorbis			- libvorbis-dev
	pango,ximagesink	- libpango1.0-dev
	theora			- libtheora-dev
	libvisual		- libvisual-0.4-dev
	ivorbisdec 		- libvorbisidec-dev
	xvimagesink  		- libXv-dev
	ORC			- liborc-0.4-dev
	apt-get install libcdparanoia-dev libvorbis-dev libpango1.0-dev libtheora-dev libvisual-0.4-dev libvorbisidec-dev libXv-dev liborc-0.4-dev

5.3. gst-plugins-good-1.4.1	
	a. tar Jxvf gst-plugins-good-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
	將 (imx-lib, firmware-imx, libfslcodec, libfslparser, imx-vpu, libfslvpuwrap, imx-gpu-viv) 安裝!!
	element 不存在 :   need -> apt-get install 
	dv			- libdv-dev
	jack			- libjack-dev
	jpeg			- libjpeg-dev

5.4. gst1.0-fsl-plugins-4.0.3
	a. tar -zxvf gst1.0-fsl-plugins-4.0.3.tar.gz
	b. ./autogen.sh --prefix=/usr PLATFORM=MX6 && make all && make DESTDIR=/ install
		vi libs/v4l2_core/gstimxv4l2.c
		- apt-get install libg2-dev
		-cannot find -l_mp3_enc_arm12_elinux 
			//進去plugins/mp3enc/Makefile mask掉
5.5. gst-plugins-bad-1.4.1
	a. tar Jxvf gst-plugins-bad-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr --disable-cocoa --disable-gtk-doc && make all && make DESTDIR=/ install
		-apt-get install liborc-0.4-dev libdirectfb-dev libfaad-dev mpg123 libmpg123-dev
	element 不存在 :   need -> apt-get install 
	directdrawsink

5.6. gst-plugins-ugly-1.4.1	
	a. tar Jxvf gst-plugins-ugly-1.4.1.tar.xz
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install libx264-dev libmpeg2-4-dev

6.1. imx-lib-5.3
	tar -zxvf imx-lib-5.3.tar.gz -C /home/imx6-libs/
	make -j1 PLATFORM=IMX6Q all && make install
	modify rng/ screenlayer/ sim/ Makefile don't install
6.2. firmware-imx-5.3
	chmod +x firmware-imx-5.3.bin
	./firmware-imx-5.3.bin (Unpacking file)
	cp -avrf firmware /lib/	
6.3. libfslcodec-4.0.8
	chmod +x libfslcodec-4.0.8.bin
	./libfslcodec-4.0.8.bin (Unpacking file)
	apt-get install autoconf make
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
6.4. libfslparser-4.0.8
	chmod +x libfslparser-4.0.8.bin
	./libfslparser-4.0.8.bin (Unpacking file)
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
6.5. imx-vpu-5.4.32
	a. chmod +x imx-vpu-5.4.32.bin
	b. ./imx-vpu-5.4.32.bin
	c. make PLATFORM=IMX6Q all && make install
6.6. libfslvpuwrap-1.0.62
	chmod +x libfslvpuwrap-1.0.62.bin
	./libfslvpuwrap-1.0.62.bin
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install libtool-bin
6.7. imx-gpu-viv-5.0.11.p8.4-hfp
	a. chmod +x imx-gpu-viv-5.0.11.p8.4-hfp.bin
	b. cp 到相關目錄上.

7.1. gstreamer-0.10.36
	tar jxvf gstreamer-0.10.36.tar.bz2
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install autopoint pkg-config bison flex gtk-doc-tools libglib2.0-dev libxml2-dev
		- vi gst/parse/grammar.y	(modify)
			更改  int priv_gst_parse_yylex (void * yylval_param , yyscan_t yyscanner);
			為    int priv_gst_parse_yylex (void * yylval_param);
7.2. gst-plugins-base-0.10.36
	tar jxvf gst-plugins-base-0.10.36.tar.bz2
	./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- vi ext/vorbis/gstvorbisdeclib.h
			 use upstream fix for ivorbis plugin build fail
 (patch)
		-
7.3. gst-plugins-gl-0.10.3
	a. tar jxvf gst-plugins-gl-0.10.3.tar.bz2
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- apt-get install libglu1-mesa-dev libglew-dev
		- apt-get install libjpeg-dev 
7.4. gst-fsl-plugins-4.0.3
	a. tar -zxvf gst-fsl-plugins-4.0.3.tar.gz
	b. ./configure PLATFORM=MX6 --prefix=/usr && make all
		- apt-get install libx11-dev libxext-dev
		- vi src/misc/v4l_source/src/mfw_gst_v4lsrc.c (modify)
		- vi src/misc/tvsrc/src/mfw_gst_tvsrc.c (modify)
			//  struct v4l2_dbg_chip_ident chip;
			//  if (ioctl (fd_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip)) {
			//    g_print ("VIDIOC_DBG_G_CHIP_IDENT failed.\n");
			//  } else
			//    g_print ("sensor chip is %s\n", chip.match.name);
		- vi tools/gplay/Makefile (modify)
			LIBS = -lrt -lglib-2.0
	c.  make install

7.5. gst-plugins-good-0.10.31
	a. tar jxvf gst-plugins-good-0.10.31.tar.bz2
	b. ./autogen.sh --prefix=/usr && make all && make DESTDIR=/ install
		- vi sys/v4l2/gstv4l2bufferpool.c	(modify)
			sed -i -e "/input:/d" sys/v4l2/gstv4l2bufferpool.c
		- vi sys/v4l2/v4l2_calls.c	(modify)
			sed -i -e "/case V4L2_CID_HCENTER/d" -e "/case V4L2_CID_VCENTER/d" sys/v4l2/v4l2_calls.c
		- vi gst/audiofx/audiocheblimit.c
			+- * </para>
			++ * <para>
			+  * <note><para>
			+  * Be warned that a too large number of poles can produce noise. The most poles are possible with
			+  * a cutoff frequency at a quarter of the sampling rate.
			+  * </para></note>
			+- * <para>
			++ * </para>
		- vi gst/udp/gstudpsrc.c
			+- * </para>
			++ *
			+  * <para>
			+  * A custom file descriptor can be configured with the
			+  * #GstUDPSrc:sockfd property. The socket will be closed when setting the
			+  * element to READY by default. This behaviour can be
			+  * overriden with the #GstUDPSrc:closefd property, in which case the application
			+  * is responsible for closing the file descriptor.
			+- *
			++ * </para>
		- vi gst/audiofx/audiofirfilter.c
		- vi gst/audiofx/audioiirfilter.c
		- vi gst/level/gstlevel.c
			  * <title>Example application</title>
			- * |[
			+ * <informalexample><programlisting language="C">

			- * ]|
			+ * </programlisting></informalexample>
		 (add element..alsasink.)
		- apt-get install libspeex-dev libesd0-dev libaa1-dev libcaca-dev liborc-0.4-dev libv4l-dev libgtk2.0-dev libpulse-dev libobjc-4.8-dev gobjc++-4.8
		- modify (vi configure.ac) OpneGL/gl.h --> GL/gl.h	(X)
		- apt-get install autoconf2.13 automake1.11  (automake1.14 X)

	d. make all
	e. make install

7.6. fsl-alsa-plugins-1.0.25
	a. tar -zxvf fsl-alsa-plugins-1.0.25.tar.gz
	b. ./configure PLATFORM=MX6 --prefix=/usr && make all
		- apt-get install libasound2-dev
		- cp mxc_asrc.h /usr/include/linux/ (自kernel copy)
	c. 
		- apt-get install libtheora-dev (enable config)
		- apt-get install libflac-dev

7.7. imx-gpu-viv-5.0.11.p4.5-hfp
	a. chmod +x imx-gpu-viv-5.0.11.p4.5-hfp.bin
	b. cp 到相關目錄上.
	c. /opt/viv_samples/es20/vv_launcher/vv_launcher
	GPU :Segmentation fault (Try below method)
	rm /usr/lib/arm-linux-gnueabihf/libGL.so
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa
	rm -rf /usr/lib/arm-linux-gnueabihf/mesa-egl

GPU : 	/opt/viv_samples/es20/vv_launcher/vv_launcher
	apt-get install libwayland-dev

exec gdb failed: 	apt-get install gdb


gst-launch-1.0 playbin uri=file:///home/a.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb0" &
gst-launch-0.10 playbin2 uri=file:///home/a.mp4 video-sink=mfw_v4lsink

gst-launch-1.0 playbin uri=file:///home/1.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb0" &

gst-launch-1.0 playbin uri=file:///home/a.mp4 video-sink="imxg2dvideosink framebuffer=/dev/fb0 window-x-coord=500 window-y-coord=500 window-width=600 window-height=600 force-aspect-ratio=True" &


=================================== script 技巧 ==========================================
1. 抓所有ip
	ifconfig | awk 'sub(/inet addr:/,""){print $1}'
2. 抓eth1 ip
	ip=$(ifconfig eth1 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://')
	echo $ip
3. ip=192.168.11.17 抓前3個  => 192.168.11
	echo " ${ip%.*} "
4. ip=192.168.11.17 抓前2個  => 192.168
	echo " ${ip%.*.*} "


=================================== yocto from freescale ==========================================
1. Freescale Yocto Project User's Guide  (Rev. L3.14.28_1.0.0-ga)
2. Get the BSP
	a. Install the repo utility
	b. Download the BSP source code
		repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-3.14.28-1.0.0_ga
3. ./setup-environment  (使用說明)
	MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11 -e x11
4. build-x11
	a. bitbake u-boot-imx	(2014.04)
	b. bitbake linux-imx	(3.14.28)
	c. bitbake 
	------------------------------------------------------------
	check -- 它如何決定building source
		a. sources/meta-fsl-arm/recipes-kernel/linux
		b. sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-kernel/linux
		c. sources/meta-fsl-arm-extra/recipes-kernel/linux
		d. sources/poky/meta-yocto-bsp/recipes-kernel/linux
		e. sources/poky/meta/recipes-kernel/linux
		f. sources/poky/meta-skeleton/recipes-kernel/linux
		g. sources/meta-openembedded/meta-initramfs/recipes-kernel/linux
		h. sources/meta-openembedded/meta-oe/recipes-kernel/linux
		--------------------------------------------------------------
		check linux-imx
			a. sources/meta-fsl-arm/recipes-kernel/linux/linux-imx
			b. sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-kernel/linux/linux-imx
	configure : 
		build-x11/conf/bblayers.conf	: support path
		build-x11/conf/local.conf	: config
		sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-kernel/linux/linux-imx_3.14.28.bb
			- meta-fsl-arm/recipes-kernel/linux/linux-imx.inc
			- poky/meta/recipes-kernel/linux/linux-dtb.inc
		sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-bsp/u-boot/u-boot-imx_2014.04.bb

5. tset : machine=rtx-pitx-imx6q , rtx-pitx-imx6q.conf : 
			UBOOT_CONFIG[pico] = "rtx_pitx_mx6q_defconfig"
			KERNEL_DEVICETREE = "imx6q-rtx-pitx.dtb"
			KERNEL_IMAGETYPE = "uImage"
	u-boot-imx_2014.04.bb : git change to git-server.rtx.org
	linux-imx_3.14.28.bb : git://gitolite@git-server.rtx.org/Kernel/linux-rtx.git

6. try
	bitbake fsl-image-multimedia-full	(3D)
	bitbake fsl-image-qt5			(Qt5)
	bitbake meta-toolchain-qt5		(tool-chain)
	
7. 相關問題 :
   u-boot-imx_2014.04.bb
	DESCRIPTION = "Bootloader for i.MX platforms"
	require recipes-bsp/u-boot/u-boot.inc
	PROVIDES += "u-boot"
	LICENSE = "GPLv2+"
	LIC_FILES_CHKSUM = "file://Licenses/gpl-2.0.txt;md5=b234ee4d69f5fce4486a80fdaf4a4263"
	SRCBRANCH = "RTX_V2015.04"
	UBOOT_SRC ?= "git://gitolite@git-server.rtx.org/U-Boot/u-boot-imx.git;protocol=ssh"
	SRC_URI = "${UBOOT_SRC};branch=${SRCBRANCH}"
	SRCREV = "RTX_V2015.04"
	S = "${WORKDIR}/git"
	PACKAGE_ARCH = "${MACHINE_ARCH}"
	COMPATIBLE_MACHINE = "(mx6)"
	===> 若更改source downloads/u-boot-imx.tar.gz
	=>	SRC_URI = "file://u-boot-imx.tar.gz"
	=>	S = "${WORKDIR}/u-boot-imx"
   linux-imx_3.14.28.bb
	SRCBRANCH = "imx6q-rtx-pico"
	LOCALVERSION = "-1.1.0_ga"
	SRCREV = "imx6q-rtx-pico"
	KERNEL_SRC ?= "git://gitolite@git-server.rtx.org/Kernel/linux-rtx.git;protocol=ssh"
	SRC_URI = "${KERNEL_SRC};branch=${SRCBRANCH}"
	DEFAULT_PREFERENCE = "1"
	S = "${WORKDIR}/git"
	===> 若更改source downloads/linux-imx-3.14.28.tar.gz
	=>	SRC_URI = "file://linux-imx-3.14.28.tar.gz"
	=>	S = "${WORKDIR}/linux-imx-3.14.28"

	***error*** do_configure() error  (SCMVERSION = "n")
	sources/meta-fsl-arm/classes/fsl-kernel-localversion.bbclass
	source/poky/meta/classes/kernel.bbclass
	sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-kernel/linux/linux-imx_%.bbappend
	***error*** do_install 
	sources/meta-fsl-bsp-release/imx/meta-fsl-arm/recipes-kernel/linux/linux-imx_3.14.28.bb
	=>	ln -s ${S}/include/dt-bindings ${S}/arch/arm/boot/dts/include/dt-bindings
   更改build 4.1.15 或 files
	MACHINE=rtx-pitx-imx6q source fsl-setup-release.sh -b build-x12 -e x11
	meta-fsl-bsp-release//imx/meta-bsp/recipes-kernel/linux/linux-imx_4.1.15.bb
		SRCBRANCH = "RTX_4.1.15_1.0.0_ga"
		LOCALVERSION = "-1.1.0_ga"
		SRCREV = "RTX_4.1.15"
		SCMVERSION = "n"
		KERNEL_SRC ?= "git://gitolite@git-server.rtx.org/Kernel/linux-rtx.git;protocol=ssh"
		SRC_URI = "${KERNEL_SRC};branch=${SRCBRANCH}"
		S = "${WORKDIR}/git"
			設成檔案:
			SRC_URI = "file://linux-4.1.tar.gz"
			S = "${WORKDIR}/linux-4.1"
   fsl-image-gt5.bb
   	add QT5_IMAGE_INSTALL_mx6 = packagegroup-qt5-webengine 
   權限問題, 改用tar image方式, Qt 可以解決順利到filesystem
   若相關pkgs有問題. 可以試試 bitbake -c cleanall qtbase(相關pkgs)
   error : arm-poky-linux-gnueabi-ld.gold: error: cannot find -lQt5MultimediaQuick_p
	bitbake -c cleanall qtmultimedia , OK  ......
		
8. building 順序 : do_fetch, do_unpack, do_configure, do_compile, do_install, do_package
	debug : check tmp/log.do_* and run.do_*
	
9. qt5 相關packages
	qtbase		qtbase-native	qtconnectivity	qtdeclarative	qtenginio	qtgraphicaleffects	qtimageformats
	qtlocation	qtmultimedia	qtquick1	qtscript	qtsensors	qtquickcontrols		qtserialport
	qtsvg		qtsystem	qttools		qttools-native	qtwayland	qtwayland-native	qtwebkit-examples
	qtwebengine	qtwebkit	qtwebsockets	qtx11extras	qtxmlpatterns	nativesdk-qtbase	nativesdk-qttools

10. 更改QT..
	a. modify source .repo/default.xml
	5.3.2 	<project remote="QT5" revision="41c5daa84af4466bfc9aa61f6f772c68470a628b" name="meta-qt5" path="sources/meta-qt5" />
  	5.5 ? 	<project remote="QT5" revision="d5536e34ec985c82b621448ab4325e5cbba38560" name="meta-qt5" path="sources/meta-qt5" />
  	5.?	<project remote="rtx" revision="51b4620392aa9041d8512549bfa554bea368c5ea" name="freescale/meta-qt5" path="sources/meta-qt5"/>
	b. repo sync
	c. cp rtx-pitx-imx6q.conf  linux-imx_3.14.28.bb  u-boot-imx_2014.04.bb (downloads .. put uboot kernel 壓縮檔) 到相關位置

11. Rebuilding.. OK
	repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-4.1.15-1.0.0_ga
	repo sync
	modify : 
		A. meta-fsl-arm/conf/machine/rtx-pitx-imx6q.conf
		B. meta-fsl-bsp-release/imx/meta-bsp/recipes-bsp/u-boot/u-boot-imx_2015.04.bb
		   meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_4.1.15.bb
		   meta-fsl-bsp-release/imx/meta-sdk/recipes-fsl/images/fsl-image-qt5.bb
		C. poky/meta/classes/kernel.bbclass
	MACHINE=rtx-pitx-imx6q source fsl-setup-release.sh -b build-x11 -e x11		(才能產生download folder)
		D. downloads/linux-4.1.tar.gz
		   downloads/u-boot-imx.tar.gz
	--------------------------------
	build chromium, local.conf : 
		LICENSE_FLAGS_WHITELIST="commercial"
		CORE_IMAGE_EXTRA_INSTALL += "chromium"
	--------------------------------
	bitbake fsl-image-qt5	
	

12. bitbake linux-imx 有相關的檔案(4.1.15)
	meta-fsl-arm/conf/machine/rtx-pitx-imx6q.conf
		build-x11/conf/bblayers.conf
		build-x11/conf/local.conf
	meta-fsl-arm :
		meta-fsl-arm/conf/machine/rtx-pitx-imx6q.conf
		meta-fsl-arm/recipes-kernel/linux/linux-imx.inc
	meta-fsl-bsp-release :
		meta-fsl-bsp-release/imx/meta-bsp/recipes-bsp/u-boot/u-boot-imx_2015.04.bb
		meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_4.1.15.bb
	poky :	
		poky/meta/classes/kernel.bbclass
		poky/meta/recipes-kernel/linux/linux-dtb.inc

13. check : build-x11# tree -d -L 2 -A

14. 編譯工具鍊 meta-toolchain
	bitbake meta-toolchain
		產生擋在<build dir>/tmp/deploy/image/sdk
	install : fsl-imx-x11-glibc-x86_64-meta-toolchain-cortexa9hf-vfp-neon-toolchain-4.1.15-1.2.0.sh	
	$CC gpio_test.c -o gpio_test

=================================== BitBake compile ==========================================
1. MACHINE=rtx-pitx-imx6q  +  fsl-imx-x11.conf
	MACHINE=rtx-pitx-imx6q source fsl-setup-release.sh -b build-x11 -e x11
	決定了: 
		a. local.conf
		b. bblayers.conf
		c. DISTRO_FEATURES_append = " x11"
		d. DISTRO = "fsl-imx-x11"
		e. sdk/
			fsl-imx-preferred-env.inc
			fsl-imx-base.inc
			fsl-imx-x11.conf
			
2. build package = u-boot + kernel + packagegroup
	bitbake fsl-image-qt5
		a. fsl-image-q5.bb + fsl-image-gui.bb
			- inherit core-image / image   (core-image.bbclass, image.bbclass)
			- IMAGE_INSTALL +=
			- X11_IMAGE_INSTALL/WAYLAND_IMAGE_INSTALL/QT5_IMAGE_INSTALL/MM_IMAGE_INSTALL/CORE_IMAGE_BASE_INSTALL/
			  CORE_IMAGE_EXTRA_INSTALL
			- packagegroup-fsl-tools-bluetooth packagegroup-fsl-tools-gpu packagegroup-fsl-tools-gpu-external \
    			  packagegroup-fsl-tools-testapps packagegroup-fsl-tools-benchmark \
    			  packagegroup-core-boot packagegroup-base-extended
		
變更u-boot-imx到u-boot-rtx
1. fsl-imx-preferred-env.inc
	PREFERRED_PROVIDER_u-boot_mx6 = "u-boot-rtx"
	PREFERRED_PROVIDER_virtual/bootloader_mx6 = "u-boot-rtx"
2. rtx-pitx-imx6q.conf
	UBOOT_CONFIG[adlink] = "rtx_pitx_mx6q_nanya1g_dtb_rtx_all_linux_config"
3. u-boot-rtx_2015.04.bb 取代 u-boot-imx_2015.04.bb 且把原mask
	BBMASK .= "|meta-fsl-bsp-release/imx/meta-bsp/recipes-bsp/u-boot/u-boot-imx_2015.04.bb"
變更linux-imx到linux-rtx
1. imx-base.inc
	IMX_DEFAULT_KERNEL = "linux-rtx"
   fsl-imx-preferred-env.inc
	PREFERRED_PROVIDER_virtual/kernel_mx6 = "linux-rtx"
2. linux-rtx_4.1.15.bb 取代 linux-imx_4.1.15.bb 且把原mask (IMX_DEFAULT_KERNEL = "linux-rtx", 可不用mask)
   linux-rtx_%.bbappend 取代 linux-imx_%.bbappend
	BBMASK .= "|meta-fsl-arm/recipes-kernel/linux/linux-imx_3.14.38.bb"
	BBMASK .= "|meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_4.1.15.bb"
	BBMASK .= "|meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_%.bbappend"
3. meta-fsl-bsp-release/imx/meta-sdk/recipes-fsl/packagegroup/packagegroup-fsl-tools-testapps.bbappend
	SOC_UAPI_HEADERS = "${@base_conditional('PREFERRED_PROVIDER_virtual/kernel','linux-rtx','linux-imx-soc-headers','',d)}"
	

設定DISTRO及MACHINE!!!
1. DISTRO=rtx-adlink-x11 MACHINE=rtx-adlink-imx6q source fsl-setup-release.sh -b build-adlink
	rtx-adlink-imx6q.conf -> conf/machine/include/imx-base.inc (default setting)
2. bitbake rtx-image-adlink
	rtx-image-adlink.bb -> distro/rtx-adlink-x11.conf	-> fsl-imx-preferred-env.inc	(something setting again)
								-> fsl-imx-base.inc
3. 產生 local.conf / bblayers.conf
---------------------------------------------
ADLINK : Yocto  使用者變更
1. .repo/manifests/default.xml (repo sync : get sources)
2. move sources/meta-rtx-arm/conf/fsl-setup-release.sh (modify local.conf / bblayers.conf)
3. new sources/meta-rtx-arm (for rtx folder)
4. DISTRO=rtx-adlink-x11 MACHINE=rtx-adlink-imx6q source fsl-setup-release.sh -b build-adlink
5. bitbake rtx-image-adlink

=================================== new uboot, command & parameter ==========================================
setting_info	check uoot parameter
bootsel_set
setting_reset	clean uboot parameter

=================================== yocto documention ==========================================
1. Yocto Project Mega-Manual
2. BitBake User Manual
3. Toaster User Manual
4. Yocto Project Board Support Package (BSP) Developer's Guide

=================================== ADLink prepare ==========================================				
1. BSP				
2. GitHub	freescale user bb patch files			
3. toolchain : /bin include lib arm ../				
	./tmp/sysroots/x86_64-linux/usr/bin/arm-poky-linux-gnueabi
	./tmp/sysroots/x86_64-linux/usr/lib
	./tmp/sysroots/x86_64-linux/usr/include
4. Makefile / sample C		gpio control : open 開節點		
	control gpio1/2 (EIM_A25/EIM_D18) - gpio_test.c

=================================== USB over current issue ==========================================
MX6QDL_PAD_EIM_D22__GPIO3_IO22				0x1b0b0		/* USB_OTG_PWR_EN */
MX6QDL_PAD_EIM_D21__USB_OTG_OC				0x1b0b0		/* USB_OTG_OC */
//	disable-over-current;
/unit_tests/memtool 2184800 16			讀取register 2184800	(overcurrent 相關register)
		0x02184800:  00031402 		讀到 (overcurrent detect enable / high active)
=> 直接改在uboot source code, arch/arm/cpu/armv7/mx6/soc.c
	config : CONFIG_HW_OC
=================================== try to solve ==========================================	
yocto 3.14.28  --> yocto 4.1.15
change	/lib/module
	/usr/lib/
		libGAL*
		libEGL*
		libGL*
		libVIV*
		libVDK*
	/opt/*

Desktop display
	adduser rtx
	usermod -a -G rtx admin
			  sudo 
	apt-get install sudo
	visudo
	gnome - session  :  桌面無法出來 (Low graphic)
	/home/rtx/.xsession.er2or
	重新編譯 - OK ?

相關問題 fb , x11
EGL-fb.so	OpenGL		gstreamer
EGL-x11.so	GPU driver
APP	GTK		fb

=> 直接使用yocto 4.1.15


