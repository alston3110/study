********************************************************************************************************
***************		Bootloader from SD card. Kernel and NFS from Ethernet.  ****************************
********************************************************************************************************
**	Host-PC Setting 
*******************************************************************************
**	TFTP setting and restart
sudo apt-get install xinetd tftpd	---TFTP Server
sudo geany /etc/xinetd.d/tftp		---xinetd.conf
service tftp
{
	socket_type	= dgram
	protocol	= udp
	wait		= yes
	user		= root
	server		= /usr/sbin/in.tftpd
	server_args	= -s /home/tom/RTX/nfsroot
	disable		= no
	per_source	= 11
	cps		= 100 2
	flags		= IPv4
}
sudo /etc/init.d/xinetd restart		---restart TFTP

**	NFS setting and start
sudo apt-get install nfs-kernel-server nfs-common ---NFS Server for ubuntu 10.04
sudo apt-get install nfs-kernel-server		  ---NFS Server for ubuntu 11.04
sudo gedit /etc/exports		---NFS for Host
/home/tom/RTX/nfsroot/root/ *(rw,no_root_squash,no_subtree_check,async) 
sudo /etc/init.d/nfs-kernel-server restart				---restart NFS

**	DHCP setting
sudo apt-get install dhcp3-server	---DHCP server
sudo gedit /etc/dhcp/dhcpd.conf
sudo /etc/init.d/dhcp3-server status/restart/stop/start       ---NFS Server for ubuntu 10.04
sudo /etc/init.d/isc-dhcp-server  status/restart/stop/start   ---NFS Server for ubuntu 11.04

** Ubuntu 11.04 jdk/jre
手動安裝JDK
    sudo apt-get install python-software-properties
    sudo add-apt-repository ppa:ferramroberto/java
    sudo apt-get update
    sudo apt-get install sun-java6-jdk

手動安裝JRE
    sudo apt-get install python-software-properties
    sudo add-apt-repository ppa:ferramroberto/java
    sudo apt-get update
    sudo apt-get install sun-java6-jre sun-java6-plugin sun-java6-fonts

** Ubunt 12.04 手動安裝JDK1.6
	sudo ./jdk-6u31-linux-x64.bin
	sudo mv jdk1.6.0_31 /usr/lib/jvm/

** Build android need to install library:
*Installing required packages (Ubuntu 10.04 -- 11.10)
sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc
*Installing required packages (Ubuntu 12.04)
sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl libc6-dev lib32ncurses5-dev x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 libgl1-mesa-dev g++-multilib mingw32 openjdk-6-jdk tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 
sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
*LTIB Host 環境設定
sudo apt-get install gettext libgtk2.0-dev rpm bison m4 libfreetype6-dev libdbus-glib-1-dev liborbit2-dev intltool ccache ncurses-dev zlib1g zlib1g-dev gcc g++ libtool uuid-dev liblzo2-dev tcl dpkg ia32-libs libc6-dev-i386 lib32z1 
sudo apt-get install gparted openssh-server nfs-common nfs-kernel-server lintian git-core git-doc git-email git-gui gitk diffstat indent tofrodos fakeroot doxygen uboot-mkimage sendmail mailutils meld sharutils manpages-dev manpages-posix manpages-posix-dev linux-doc vnc4server xvnc4viewer xsltproc dos2unix

** adb tool setting:  
Run the SDK's tools to generate a configure file:
android-sdk-linux_86/tools/android update adb
Modify the files:~/.android/adb_usb.ini, to add freescale vendor id:
# ANDROID 3RD PARTY USB VENDOR ID LIST -- DO NOT EDIT.
# USE 'android update adb' TO GENERATE.
# 1 USB VENDOR ID PER LINE.
0x15a2

Create a new udev rule file under the PC's /etc/udev/rules.d/ named: imx-android.rules. And fill in the following line into the file:
SUBSYSTEM=="usb", SYSFS{idVendor}=="15a2", MODE="0666"

Change the new udev rule file's permission:
chmod a+r /etc/udev/rules.d/imx-android.rules

Connect the Android Device
Restart the adb server
adb kill-server
adb start-server
  
**************************************************************************************
**	NFS boot Target setting. serverip set by DHCP.
**************************************************************************************
setenv ethaddr 00:0C:6E:CE:21:88
setenv serverip 10.65.163.75
setenv nfsroot /home/tom/RTX/nfsroot/root/
setenv bootargs_kernel 'mmc dev 3;mmc read ${loadaddr} 0x6800 0x2800;'
setenv bootargs_kernel 'bootp ${loadaddr} ${serverip}:uImage;'
setenv bootargs_nfs 'setenv bootargs ${bootargs} ip=dhcp root=/dev/nfs init=/sbin/init nfsroot=${serverip}:${nfsroot},v3,tcp'
setenv bootargs_console 'setenv bootargs ${bootargs} console=ttymxc0,115200'
setenv bootcmd_nfs 'run bootargs_base bootargs_kernel bootargs_console bootargs_nfs;bootm'
setenv bootcmd_nfs 'run bootargs_base set_display set_gpu bootargs_android bootargs_console bootargs_nfs boot_kernel;bootm'
setenv bootcmd 'run bootcmd_nfs'

setenv bootargs_mmc01 'setenv bootargs ${bootargs} root=/dev/mmcblk1p1 rootfstype=ext4 rootwait rw'
setenv bootcmd_mmc 'run bootargs_base bootargs_mmc01; mmc dev 3;mmc read ${loadaddr} 0x6800 0x2800; bootm'
bootargs=console=ttymxc0,115200 root=/dev/mmcblk1p1 rootfstype=ext4 rootwait rw video=mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 fbmem=28M vmalloc=400M

setenv serverip 172.18.0.31
setenv nfsroot /home/tom/RTX/nfsroot/root/
setenv bootcmd 'dhcp;run bootcmd_nfs'
setenv bootcmd_nfs 'run bootargs_base set_display bootargs_nfs;bootm'
setenv bootargs_nfs 'setenv bootargs ${bootargs} ip=dhcp root=/dev/nfs nfsroot=${serverip}:${nfsroot},v3,tcp'

**************************************************************************************
**	NFS boot Target setting. serverip set by DHCP.
**************************************************************************************
setenv bootcmd 'dhcp;run bootcmd_recovery_nfs'
setenv bootcmd_recovery_nfs 'run bootargs_base bootargs_android_recovery bootargs_console bootargs_recovery_nfs; bootm'
setenv bootargs_recovery_nfs 'setenv bootargs ${bootargs} ip=dhcp root=/dev/nfs nfsroot=${serverip}:${nfsroot},v3,tcp'


**************************************************************************************
**	Write image from ethernet and bootp from ethernet.
**************************************************************************************
setenv ethaddr 00:0C:6E:CE:21:74
setenv serverip 192.168.4.15
setenv wdev 2
setenv fastboot_addr 0xA0000000;mmc dev 0
setenv fastboot_addr 0x80000000;mmc dev 1
setenv fastboot_addr 0x10800000;mmc dev 3

#write image to mmc device
setenv wuboot 'mmc dev ${wdev};bootp ${fastboot_addr} ${serverip}:u-boot-no-padding.bin;mmc write ${fastboot_addr} 2 200'
setenv wuImage 'bootp ${fastboot_addr} ${serverip}:uImage;mmc write ${fastboot_addr} 6800 2000'
setenv wuramdisk 'bootp ${fastboot_addr} ${serverip}:uramdisk.img;mmc write ${fastboot_addr} 9000 200'
setenv wsystem 'bootp ${fastboot_addr} ${serverip}:system.img;mmc write ${fastboot_addr} 697000 40000'
setenv wrecovery 'bootp ${fastboot_addr} ${serverip}:recovery.img;mmc write ${fastboot_addr} 746080 5800'
setenv wbootp 'mmc dev ${wdev};bootp ${fastboot_addr} ${serverip}:zero8k;mmc write ${fastboot_addr} 6000 10'

setenv wall 'run wuboot wuImage wuramdisk wsystem wrecovery'
saveenv

#clear uboot-parameter, data and cache
mw.l ${fastboot_addr} 0 1000;mmc write ${fastboot_addr} 600 10
setenv wdata 'bootp ${fastboot_addr} ${serverip}:data10.img;mmc write ${fastboot_addr} 6E2040 5000'
setenv wcache 'bootp ${fastboot_addr} ${serverip}:cache10.img;mmc write ${fastboot_addr} 714080 5000'
setenv wclear 'run wdata wcache'
savenv

#recovery all from partition7.
setenv wfsrecovery 'bootp ${fastboot_addr} ${serverip}:fsrecovery.img;mmc write ${fastboot_addr} 8000 1000'
setenv bootcmd_linux2 'mmc dev 1;mmc read ${loadaddr} 0x5800 0x2000;mmc read ${rd_loadaddr} 0x8000 0x1000;bootm ${loadaddr} ${rd_loadaddr}'
find . | cpio --create --format='newc' | gzip > ../ramdisk.img
mkimage -A arm -O linux -T ramdisk -C none -a 0x70508000 -n "Android Root Filesystem" -d ./ramdisk.img ./fsrecovery.img

#boot uImage and uramdisk.img from host
setenv bootcmd_SD 'run bootcmd_SD1 bootcmd_SD3'
setenv bootcmd_SD3 'mmc dev 1;bootp ${loadaddr} ${serverip}:uImage;bootp ${rd_loadaddr} ${serverip}:uramdisk.img;bootm ${loadaddr} ${rd_loadaddr}'

#adb push file to system fold or other fold.
mount -o remount,rw /dev/block/mmcblk0p2 /system
chmod 777 /system/framework/
chmod 777 /system/app/
chmod 777 /system/lib/
chmod 777 /system/lib/modules/
chmod 777 /system/
chmod 777 /system/bin/
chmod 777 /system/xbin/
chmod 777 /system/etc/
chmod 777 /system/etc/dhcpcd
chmod 777 /system/etc/dhcpcd/dhcpcd-hooks
chmod 777 /system/etc/permissions/
chmod 777 /system/usr/
chmod 777 /system/usr/keylayout/
chmod 777 /system/usr/keychars/
chmod 777 /system/lib/modules/

adb push libA.so system/lib/
adb shell cat /dev/ttymxc0

*****************************************************************************
*********************         Create Recovey image      *********************
*****************************************************************************
Create a directory called res to save the public key of your system.
fsl@fsl-desktop:~/recovery$ mkdir res
fsl@fsl-desktop:~/recovery$ ~/fs51/android1021/out/host/linux-x86/framework/dumpkey.jar ~/fs51/android1021/build/target/product/security/testkey.x509.pem > res/keys
fsl@fsl-desktop:~/recovery$ ~/fs51/test102/out/host/linux-x86/framework/dumpkey.jar ~/fs51/test102/build/target/product/security/testkey.x509.pem > res/keys

recovery.zip is located in the current directory. Then create a digital signature for recovery.zip package as follows.
fsl@fsl-desktop:~/recovery$ cd ~/fs51/android1021
fsl@fsl-desktop:~/myandroid$ make signapk

fsl@fsl-desktop:~/recovery$zip recovery.zip -r ./META-INF ./system ./res
fsl@fsl-desktop:~/recovery$ java -jar ~/fs51/android1021/out/host/linux-x86/framework/signapk.jar -w ~/fs51/android1021/build/target/product/security/testkey.x509.pem ~/fs51/android1021/build/target/product/security/testkey.pk8 recovery.zip update.zip
fsl@fsl-desktop:~/recovery$ java -jar ~/fs51/test102/out/host/linux-x86/framework/signapk.jar -w ~/fs51/test102/build/target/product/security/testkey.x509.pem ~/fs51/test102/build/target/product/security/testkey.pk8 recovery.zip rtxupdate.zip

**************************************************************************************
*********************	Create rootfs.img and write to eMMC.  *********************
**************************************************************************************
dd if=uramdisk.img of=ramdisk.img.gz skip=64 bs=1
gunzip ramdisk.img.gz; mkdir ramdisk; cd ramdisk; cpio -i < ../ramdisk.img
vim init.rc   (modify the init.rc, change the mmcblk0 to mmcblk1)
find . | cpio --create --format='newc' | gzip > ../ramdisk.img; cd ..
mkimage -A arm -O linux -T ramdisk -C none -a 0x11000000 -n "Android Root Filesystem" -d ./ramdisk.img ./uramdisk.img
mkimage -A arm -O linux -T ramdisk -C none -a 0x70508000 -n "Android Root Filesystem" -d ./ramdisk.img ./uramdisk.img
mkimage -A arm -O linux -T ramdisk -C none -a 0x90508000 -n "Android Root Filesystem" -d ./ramdisk.img ./uramdisk.img

mkdir system; sudo mount -o loop system.img system
mkyaffs2image system/ system.img;sudo umount system/;sudo rm -rf system/

mkdir recovery; sudo mount -o loop recovery.img recovery
sudo umount recovery/
sudo rm -rf recovery/
mkyaffs2image recovery/ recovery.img


sudo dd if=u-boot-no-padding.bin of=/dev/mmcblk0 bs=1024 seek=1	---write at 1KB address
sudo dd if=uImagesave of=/dev/mmcblk0 bs=1024 seek=1024			---write at 1MB address
sudo dd if=fsuramdisk.img of=/dev/mmcblk0 bs=1024 seek=6144 	---write at 6MB address
sudo dd if=uImage of=/dev/mmcblk0 bs=1024 seek=13312			---write at 13MB address
sudo dd if=uramdisk.img of=/dev/mmcblk0 bs=1024 seek=18432		---write at 18MB address

sudo dd if=07uImage of=/dev/mmcblk0 bs=1024 seek=1024   			---write at 1MB address
sudo dd if=51uImage of=/dev/mmcblk0 bs=1024 seek=5120				---write at 5MB address
sudo dd if=51-fsuramdisk.img of=/dev/mmcblk0 bs=1024 seek=9216		---write at 9MB address
sudo dd if=120uImage of=/dev/mmcblk0 bs=1024 seek=13312				---write at 13MB address
sudo dd if=53uImage of=/dev/mmcblk0 bs=1024 seek=18432				---write at 18MB address
sudo dd if=53-fsuramdisk.img of=/dev/mmcblk0 bs=1024 seek=23552		---write at 23MB address
sudo dd if=120uImage10 of=/dev/mmcblk0 bs=1024 seek=26624			---write at 26MB address

make menuconfig => Device Drivers => Block Drivers => RAM block device support
***for R007 tablet 1024    9216
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 1;mmc read 0x90800000 0x800 0x2000;mmc read 0x90D00000 0x3000 0x1000;bootm 0x90800000 0x90D00000'
run bootcmd_linux

***for R051 box 5120
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 1;mmc read 0x90800000 0x2800 0x2000;mmc read 0x90D00000 0x4800 0x1000;bootm 0x90800000 0x90D00000'
run bootcmd_linux

***for R120-Board REV0.1 	26624		23552
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 0;mmc read 0x70800000 0xD000 0x2000;mmc read 0x70D00000 0xB800 0x1000;bootm 0x70800000 0x70D00000'
run bootcmd_linux

***for R120-Board REV0.2 	13312
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 0;mmc read 0x70800000 0x6800 0x2000;mmc read 0x70D00000 0xB800 0x1000;bootm 0x70800000 0x70D00000'
run bootcmd_linux

***for R053 box 	18432       
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 0;mmc read 0x70800000 0x9000 0x2000;mmc read 0x70D00000 0xB800 0x1000;bootm 0x70800000 0x70D00000'
run bootcmd_linux

***for Q7 box 	18432       
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc1 root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 0;mmc read 0x70800000 0x800 0x2000;mmc read 0x70D00000 0x3000 0x1000;bootm 0x70800000 0x70D00000'
run bootcmd_linux

***for imx6     
setenv bootcmd 'run bootcmd_linux'
setenv bootcmd_linux 'run bootcmd_linux1 bootcmd_linux2'
setenv bootcmd_linux1 'setenv bootargs console=ttymxc0,115200 fbmem=28M vmalloc=400M root=/dev/ram0 rdinit=/sbin/init'
setenv bootcmd_linux2 'mmc dev 1;mmc read ${loadaddr} 0x800 0x2800;mmc read ${rd_loadaddr} 0x4000 0x1000;bootm ${loadaddr} ${rd_loadaddr}'
run bootcmd_linux

setenv bootargs 'console=ttymxc0,115200 root=/dev/mmcblk1p2 init=/sbin/init rootwait'
setenv bootcmd 'mmc dev 0;mmc read ${loadaddr} 0x800 0x2000;bootm'

**for debug img
sudo dd if=uImage of=/dev/mmcblk0 bs=1024 seek=31744				---write at 31MB address 0xF800
sudo dd if=uramdisk.img of=/dev/mmcblk0 bs=1024 seek=36864		---write at 36MB address 0x12000

setenv bootcmd_SD 'run bootcmd_SD1 bootcmd_SD3 bootcmd_SD4'
setenv bootcmd_SD3 'mmc dev 0;mmc read ${loadaddr} 0x6800 0x2000;'
setenv bootcmd_SD4 'mmc dev 1;mmc read ${rd_loadaddr} 0x9000 0x200;bootm ${loadaddr} ${rd_loadaddr}'
setenv bootcmd_SD1 'run bootargs_base set_display'

adb push uImage /sdcard/
dd if=/sdcard/uImage of=/dev/block/mmcblk0 bs=1024 seek=13312
sync

**************************************************************************************
******************************	control sysfs command.  ******************************
**************************************************************************************
**Configure kernel parameters at runtime
sysctl -a
sysctl -a | grep vm

**CPU information
cat proc/cpu/clocks						---view the clock setting or "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed"
echo 400000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed		---set cpu freq.

**Memory information
cat proc/meminfo						---view the memory information
echo 16000 > /proc/sys/vm/min_free_kbytes   ---Keep minimum free memory 
echo 1 1 > /proc/sys/vm/lowmem_reserve_ratio		---
echo 1 > /proc/sys/vm/drop_caches		---free page cache or "sysctl -w vm.drop_caches=1"
echo 2 > /proc/sys/vm/drop_caches		---free dentries and inodes
echo 3 > /proc/sys/vm/drop_caches		---free page cache, dentries and inodes

**dynamically change resolution
cat /sys/class/graphics/fb0/mode		---view edid support resolution
echo 1 > /sys/class/graphics/fb0/blank	---blank off the display because the switching noise
echo edid-support-resolution > /sys/class/graphics/fb0/mode		---switch display resolution
echo 0 > /sys/class/graphics/fb0/blank	---enable the display
pkill /system/bin/servicemanager

**power status
cat /sys/power/state					---view power status on(0),standby(1) and mem(3)
echo on > /sys/power/state				---device go to on mode
echo mem > /sys/power/state				---device go to mem mode
echo standby > /sys/power/state				---device go tostandby mode as some mem mode


**mount versual file system
mount -t proc none /proc
mount -t sysfs none /sys
mount -t usbfs none /proc/bus/usb
**************************************************************************************
******************************	device command.  ******************************
**************************************************************************************
mount -rw /dev/sda1 /mnt/sda
mount -rw -t vfat /dev/sda1 /mnt/sda
mount -rw -t ext4 /dev/sda1 /mnt/sda
mount -o remount,rw /dev/block/mmcblk0p2 /system

scp source target
scp source name@Host-IP:dest
scp /etc/wvdial.conf tom@172.18.0.38:/home/tom/temp/





**************************************************************************************
******************************	ubuntu command.  ******************************
**************************************************************************************
sudo passwd
sudo grub-setup /dev/sda

ssh name@IP
ssh -i private-key name@IP
scp -i ssh-key name@Device-IP:source dest


echo 0 > sys/class/graphics/fb0/blank
echo 1 > sys/class/graphics/fb0/blank

cat sys/class/graphics/fb0/blank

**************************************************************************************
******************************	Other test.  ******************************
**************************************************************************************
#define dev_info(dev, format, arg...)	printk(KERN_INFO "%s %s: " format ,dev_driver_string(dev) ,dev_name(dev) ,## arg)
#define pr_debug(format, arg...)	printk(KERN_INFO format , ## arg)
printk(KERN_INFO "Tom*** %s (%d)\n", __FUNCTION__, __LINE__);

    {
    	FILE *ofp ;
    	ofp = fopen("/dev/debug.txt","a+");
    	if (ofp)
    	{
    		fprintf(ofp,"%s\n",args[1]) ;
    		fclose(ofp) ;
    	}
    }


rm /data/app/jp.co.toppan.android.epop-1.apk
rm /data/app/jp.co.toppan.android.epop-2.apk

mount -o remount,rw /dev/block/mmcblk0p2 /system
chmod 777 /system/framework/

setenv bootcmd_SD 'run bootcmd_SD1 bootargs_console bootcmd_SD2'

dd if=/sdcard/uramdisk.img of=/dev/block/mmcblk0 bs=1024 seek=18432

logcat | grep KeyguardViewMediator
