=========================================基本設定 / 操作========================================================
環境設定 : 	
export ARCH=arm
export CROSS_COMPILE=/opt/freescale/usr/local/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/arm-none-linux-gnueabi-(Wrapping machine)
export CROSS_COMPILE=/home/retronix/work/SMARC/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi-(Android - SMARC)
export CROSS_COMPILE=arm-linux-gnueabihf- (Xfce4 - SMARC)
export CROSS_COMPILE=arm-linux-gnueabi- (Linux - SMARC)

Ubuntu分享cmd:
sudo mount -t vboxsf Share /home/retronix/work/Linux/Share

uboot編譯步驟 ：	
make distclean
make mx6dl_sabresd_config(imx6 DualLite)(若make mx6q_sabresd_config, Dual/Quad)
make

kernel編譯步驟 ：
make distclean
make imx6_defconfig
make uImage

DD檔案 (IN):
sudo dd if=u-boot.bin of=/dev/sdc bs=512 seek=2 skip=2(1K)
sudo dd if=uImage of=/dev/sdc bs=512 seek=26624(13M)
sudo dd if=/dev/zero of=/dev/sdc bs=512 seek=24576 count=10(12M)

SDCARD Auto-Update :
sudo dd if=extsmagic of=/dev/sdb  (0)
sudo dd if=uImage-update of=/dev/sdb bs=512 seek=2048 (1M)
sudo dd if=uramdisk-imx53.img of=/dev/sdb bs=512 seek=12288 (6M)

DD資料 (OUT): 
dd if=/dev/mmcblk0 of=ppp.txt bs=1024 skip=12288 count=10(12M)
cat ppp.txt (od -x ppp.txt,以 8 進位方式印出檔案中每個字組)

檔案partition/format :
sudo mkfs.ext4 -L AMD /dev/sdc1		(Format DISK, 給名稱)
sudo cp -avrf * /media/AMD		(複製所有資料到AMD去)
sudo tar czf ../rootfs.tgz *		(壓縮所有資料到rootfs.tgz)
sudo tar cjvf ../rootfs.tgz.bz *

sudo tar xzvf rootfs.tgz -C /media/AMD	(解壓縮到 AMD資料夾裡）
sudo tar -C /media/linaro-12.09/ -zxvf linaro-12.09.tar.gz

consol :
	ip addr : check ip
	a. ssh root@ip
	b. putty ip

Debug : 
	cat /var/log/Xorg.0.log

mount : 
a. 	掛載 /proc : mount -n -t proc proc /proc
	掛載 /sys  : mount -n -t sysfs sys /sys
b. udev filesystem .. 

To change all the directories to 755 (-rwxr-xr-x):
find /opt/lampp/htdocs -type d -exec chmod 755 {} \;
To change all the files to 644 (-rw-r--r--):
find /opt/lampp/htdocs -type f -exec chmod 644 {} \;

partition: 單位 = 磁區 之於 1 * 512 = 512 位元組
所用裝置 開機      開始         結束      區塊   識別號  系統
/dev/sdc1           65536     7744511     3839488   83  Linux   <== 0x10000  (32M)

cpu freq : cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq
check task (CPU的使用率) : ps -aus
CPU的使用率 : 指令 : top
cpu info : cat /proc/cpuinfo
clock : cat /proc/cpu/clocks
uboot : clk core 800

DDR測試(MX6) : setting
cmd : DDR_Stree_Tester -t mx6x -df MX6DL_sabreSD_DDR3.inc
	=>	(Y)	DDR configuration -OK
		(1)	ARM set to 800MHz
		(1)	DDR density select (MB) : 1024K
		(1)	On chip select	:CSDP
		(N)	write calibration
		(N)	read calibration
		(Y)	run the DDR stree Test
		(Y)	400MHz	Start freq
		(N)	29	End
========================================= check clock =========================================================
mount -t debugfs nodev /sys/kernel/debug
========================================= / GIT / LTIB / PKGS 相關問題  =========================================
★★★★GIT★★★★ 
Download Linux Source code :
a. https://172.18.10.75/LinuxBSP	輸入: alstonlai/please	(192.168.4.44)
b. 確定下載位置 : Example (LinuxBSP -> MX53_LinuxBSP.git -> Q7)
c. git clone ssh://gitolite@172.18.10.75/LinuxBSP/MX53_LinuxBSP.git -b Q7

GIT上傳 : (全部)
git commit -a -m "freescale-imx6"
切branch code (gitk) : Branch -> Visualize All Branches...
	點到要切的那一隻Branch(右鍵）-> Reset master branch to here -> Hard:Reset working tree and index
	(一般)
	a. git fetch	下載最新的資訊
	b. git status	觀察差異性
	c. git checkout 調整成相同(.config 若需要先複製,下載完再回貼)
	d. git pull	更新成最新的版本
git相關訊息及流程 : 
	git fetch -> 將Server資訊下載下來
	git status -> Check 目前更改狀況
	git checkout -- Path ->將有變動的地方還原..	(git reset --hard 若不行,就用此)
	git pull -> 更新與server相同

local 在建立一個新branch(Q7-AXIOMTEK)
	git checkout -b Q7-AXIOMTEK	(由現在的環境為基礎, 建立新的 branch )
	git checkout -b Q7-AXIOMTEK Q7	(由Q7環境為基礎, 建立新的 branch )

.gitignore : 記錄不被版本控制追蹤的檔案

Add Patch : (Example  pcre-6.3)
	a. pcre-6.3 （更改rpm/BUILD/pcre-6.3 -> pcre-6.3-new)
	b. ./ltib -m prep -p pcre (建立原先的pcre-6.3 有問題的)
	c. 使用Meld,比較兩個檔案. - 點選差異性(紅色部份)
	d. 文件(F) -> Format as patch -> cp to 文件 -> 改名為example : pcre-6.3-fix-pp.patch -> 放於ㄣpkgs/中
	e. 更改pcre-6.3.spec Add patch1 .. %patch1 -p1(原目錄下第幾層)
	f. 修改 pcre-6.3-fix-pp.patch
		--- (/home/retronix/work/linux/ppp/mx6_linuxBSP/rpm/BUILD/ 刪除)pcre-6.3/configure
		+++ (/home/retronix/work/linux/ppp/mx6_linuxBSP/rpm/BUILD/ 刪除)pcre-6.3-new/configure

★★★★LTIB★★★★ 
ltib 重新Build,不變Config :
	a. sudo rm -rf rootfs
	b. rpm/RPMS/ 全砍掉

ltib PKGS 載入順序 :
config/userspace/pkg_map
config/platform/imx/pkg_map

ltib config執行順序 : .config -> imx5_defconfig.dev -> defconfig.dev
.config : 目前所使用的config
imx5_defconfig.dev : 是執行ltib時,在make前copy .config而成
defconfig.dev : 若沒有.config / imx5_defconfig.dev, 則執行此config

LTIB使用:
./ltib -m prep -p rtx_setenv	(解pkgs)
./ltib -m shell 		(進LTIB shell裏)
	LTIB> cd rpm/Build/rtx_setenv-0.01/
	LTIB> make clean
	LTIB> make
或	LTIB> cc uart_server.c -o uart_server

LTIB : 套件管理程式(Synaptic)(os密碼:retronix)
透過 - sudo apt-get install php* (查詢相關套件) (Y/N) N
透過 - sudo apt-get source ZIP (下載相關套件 : ZIP)(下載 : a.Zip-3.0資料夾, b.Zip_3.0.orig.tar.gz, c.Zip_3.0-4.debian.tar.gz, d.Zip_3.0-4.dsc)
壓縮 Zip-3.0 => Zip-3.0.tar.gz
將Zip-3.0.tar.gz丟到pkgs,更改spec.

Add PKGS :
a. Google : pkgs - xfce4-4.8.0.3.tgz.gz => pkgs folder
b. Add dist/lfs-5.1/xfce4 folder
c. cp template.spec => dist/lfs-5.1/xfce4/xfce4_4.8.0.3.spec
d. change spec => Name / Version / Source
e. config/userspace/pkg_map => PKG_XFCE4 = xfce4_4.8.0.3
f. config/userspace/packages.lkc => config PKG_XFCE4

xorg.conf/ version/ mcu_version 參數修改置放在ltib : 
MX53_LinuxBSP/config/platform/imx/merge/etc/X11
MX53_LinuxBSP/config/platform/imx/merge/etc/

========================================= / uboot / kernel / rootfs 系統問題  =========================================
★★★★uboot★★★★ ltib
橋接 : 	
	a. MX6_LinuxBSP/config/platform/imx/main.lk (./ltib -m config) ==>  config BOARD_MX6DL_Q7
	b. MX6_LinuxBSP/dist/lfs-5.1/u-boot/u-boot-common.tmpl (.spec) ==>  PKG_U_BOOT_CONFIG_TYPE = mx6dl_q7_config
	c. MX6_LinuxBSP/u-boot/Makefile ==> board/freescale/mx6q_q7/config.tmp (..arm_cortexa8 mx6q_q7 freescale mx6..)
	d. MX6_LinuxBSP/u-boot/include/configs/mx6dl_q7.h
	g. MX6_LinuxBSP/u-boot/include/asm-arm/mach-types.h (#define MACH_TYPE_MX6Q_Q7	4480)
	e. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7 (folder)
	f. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7/u-boot.lds (need modify)
	h. MX6_LinuxBSP/u-boot/board/freescale/mx6q_q7/mx6q_q7.c (gd->bd->bi_arch_number = MACH_TYPE_MX6Q_Q7) ==> kernel
											   MACH_TYPE_MX6Q_SABRESD
	i. MX6_LinuxBSP/u-boot/include/config.mk (need modify)	

console output :	(Example : UART2)
	a. mx6q_sabresd.h	#define CONFIG_UART_BASE_ADDR	UART2_BASE_ADDR
	b. mx6q_sabresd.c	setup_uart(){	mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D26__UART2_TXD)
						mxc_iomux_v3_setup_pad(MX6Q_PAD_EIM_D27__UART2_RXD)	}
	c. mx6q_sabresd.h	#define	CONFIG_EXTRA_ENV_SETTINGS ... console=ttymxc1 ..

usb verify :
	a. 插入fat格式的隨身碟
	b. usb start	-> usb scan
	c. usb dev	-> 可見到隨身碟
	d. fatls usb 0	-> list usb data (usb 1)
	e. fatload usb 0 ${loadaddr} xxx	-> 將xxx檔載入
	f. md ${loadaddr}			-> 載入資料看

board for kernel : mx6q-q7
	a. include/config/mx6q_q7.h
	b. board/freescale/mx6q_q7 資料夾
	c. board/freescale/mx6q_q7/mx6q_q7.c
	d. mx6q_q7.c -> MACH_TYPE_MX6Q_SABRESD
	e. include/asm-arm/mach-types.h:3260: #define MACH_TYPE_MX6Q_SABRESD	       3980

GPIO test:(開機測試)
	a. start.S -> _start: b	reset (跳到reset)
	b. 若為無窮迴圈則寫 : _start: b	_start
	c.
		先定義 GPIO :
		.equ DEF_BASE_GPIO_GDIR		,0x0209C004	(GPIO direction register)
		.equ DEF_BASE_GPIO_DR		,0x0209C000	(GPIO data register)
		.equ DEF_BASE_GPIO_VALUE	,0x0000

		reset :
			ldr r0,	=DEF_BASE_GPIO_GDIR
			ldr r1,	=0xFFFFFFFF
			set r1, [r0]
			ldr r0, =DEF_BASE_GPIO_DR
			ldr r1,	=DEF_BASE_GPIO_VALUE
			set r1, [r0]
			b reset

★★★★kernel★★★★ 
橋接:
	a. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/board-mx6q_q7.c
	   MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/board-mx6q_q7.h
	   MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/mx6q_q7_pmic_pfuze100.c
	b. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/Kconfig (Kernel Configuration -> System Type -> 
			Freescale MXC Implementations -> Supporti.MX 6Quad platform -> Q7 platform)
	c. MX6_LinuxBSP/kernel_imx/arch/arm/mach-mx6/Makefile (CONFIG_MACH_MX6Q_Q7) (need modify)
	d. MX6_LinuxBSP/kernel_imx/arch/arm/plat-mxc/include/mach/common.h -> extern int mx6q_q7_init_pfuze100(u32 int_gpio);
	e. MX6_LinuxBSP/kernel_imx/arch/arm/tools/mach-types (mx6q_q7	MACH_MX6Q_Q7	MX6Q_Q7	  3980)
	f. MX6_LinuxBSP/kernel_imx/sound/soc/imx/Kconfig (config SND_SOC_IMX_SGTL5000 ..) (Driver有用到Machine-Type)
	   MX6_LinuxBSP/kernel_imx/sound/soc/imx/imx-sgtl5000.c (machine_is_mx6q_q7())
	g. MX6_LinuxBSP/kernel_imx/arch/arm/configs/imx6_android_defconfig(Kernel Config setting)

console output :	(Example : UART2)
	a. board-mx6q_sabresd.c	--- mx6_sabresd_timerinit(){	..	UART2	..}
	b. board-mx6q_sabresd.h

Debug : 
	make menuconfig : ----> kernel hacking  --->   Enable verbose x86 bootup info messages  --->  Early printk


★★★★rootfs★★★★ 
system issue : 		(cp: write error: No space left on device)
	a. df -h (可以見到空間不足訊息) : rwfs 512.0K(Size) 512.0K(Used) 0(Available) 100%(Use%)
	b. 更改 /etc/rc.d/rc.conf : export TMPFS_SIZE="512k" -> "128m"(更改512K -> 128M)
	c. df -h : rwfs 128.0M(Size) 3.7M(Used)  124.3M(Available) 3%(Use%) (空間充足)
	d. du -m (check 檔案大小)

========================================= / Debug / Info / Environment 相關問題  =========================================
★★★★Debug★★★★ 
Debug Print相關輸出 : 
printk("%s(%d)\n",__FILE__,__LINE__);	(列印Debug Message)
printk("%s(%d) : cmd=%d, value=%d\n",__FILE__,__LINE__,cmd,value);

Net連線 :
ifconfig eth0 up (UP PHY HW)
udhcpc -i eth0 (Get IP)
ifconfig

WIFI連線 : 
ifconfig wlan0 up
iwconfig
iwlist scan

Audio :
播放檔案 aplay -D plughw:0,0 /unit_tests/audio8k16S.wav -v (plughw : card number, device number)
錄音存檔 arecord -t wav -f cd -d 10 ./audio.wav (錄10 sec)
更改設定 amixer set "function" 狀態 (example : amixer set 'Jack Function' on)

Vedio : 調整color
export TERM=linux
echo -n 32 > /sys/class/graphics/fb0/bits_per_pixel
setterm -inversescreen on > /dev/tty0
setterm -foreground green > /dev/tty0
setterm -clear all > /dev/tty0
fbdata顯示在螢幕上
dd if=fbdata of=/dev/fb0 bs=1024 count=768	(1024Byte * 768 = 768KByte)

mac : write mac(LAN 9514)
ethtool -E eth1 magic 0x9500 offset 1 value 0x22 (write address 1 = 0x22)
ethtool -E eth1 magic 0x9500 offset 2 value 0x33 ...(smsc95xx.c -> LAN95xx_EEPROM_MAGIC=0x9500)
ethtool -e eth1 (read info)

★★★★Environment★★★★ 
MFG_TOOL : 	wrapping_machine(imx6)
	a. HID-compliant device, 硬體識別碼 : HID\VID-51A2 & PID_0061
	b. profiles/MX6Q Linux Update/OS Firmware/ucl2 : 原DL為 51A2:54(更改為vid=51A2 pid=0061)
	c. uboot(mfg uboot code for DualLite) 才能跑得動, 或從官網直接下載Dual-Lite MFG 最快!!

autologin : 自動登入
	a. /etc/inittab -> (::respawn:/etc/rc.d/rc_mxc.S)
	b. rc_mxc.S -> (/sbin/getty -n -l /sbin/autologin -L ttymxc3 115200 vt100)
	c. /sbin/autologin -> (chmod +x autologin)
			#!/bin/sh
			exec /bin/login -f root

/root/.profile : 個人設定 - 所要執行的程式.

console UART1 test:
	main.sh | tee /dev/ttymxc0

UART port Baud Rate設定 : 
stty -F /dev/ttymxc4 115200 (設定baudrate速率=115200)
stty -F /dev/ttymxc4 -echo (關閉回顯)
stty -F /dev/ttymxc4 raw (設置原始输入

搜(Sagasu) :
Editor command - gedit +%n %f	使用gedit編輯.

ln [-sf] 來源檔 目標檔

ln -s passwd passwd-so
passwd 為要指定之路徑資料夾，passwd-so 為產生出來之link名稱

★★★★Info★★★★ 
video :
cat /sys/class/graphics/fb0/mode  ===> S:1280x720p-60 (目前resolution)
cat /sys/class/graphics/fb0/modes ===> ...(所有support resolution)
echo S:1280x720p-50 > /sys/class/graphics/fb0/mode (切換)
----------------------------------------------------------------------------------------------------------------------------------------
Uboot設定 ：video=mxcfb1:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666 video=mxcfb2:off video=mxcfb3:off
fb0(uboot setting lvds) : echo 1 > /sys/class/graphics/fb0/blank (close lvds)
fb1(uboot setting hdmi) : echo 0 > /sys/class/graphics/fb2/blank (open hdmi)
---------------------------------------------------------------------------------
IPU : 
fb0 => 	/sys/class/graphics/fb0/blank 背景
	/sys/class/graphics/fb1/blank 前景
fb1 => 	/sys/class/graphics/fb2/blank 背景
	/sys/class/graphics/fb3/blank 前景
---------------------------------------------------------------------------------
VPU : 
fb0 =>	/dev/video16
	/dev/video17
fb1 =>	/dev/video18
	/dev/video19
-----------------------------------------------------------------------------------
GStreamer : (script setting & ./t.sh /000.mp4 /001.mp4)
#!/bin/sh
gst-launch filesrc location=$1 typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video17 &
gst-launch filesrc location=$2 typefind=true ! aiurdemux ! vpudec ! mfw_v4lsink device=/dev/video19
(chase rootfs + uImage + uboot)
---------------------------------------------------------------------------------------------------------------

I2C debug:
i2cdetect -y -r 0 (detect i2c bus0 devices)
i2cdump -y -f 0 0x1c (dump i2c bus0 device addr = 0x1C 所有register的值)
i2cget -y -f 0 0x1c 0x02 (get i2c bus0 devices addr=0x1c register=0x02 的值

audio: sgtl5000(reg read)
cat /sys/devices/platform/soc-audio.1/Hifi/codec_reg

GPIO button: (Keyboard button)
	cat /dev/input/by-path/platform-gpio-keys-event- (IMX6-Q7)
	printk("gpio_keys_report_event : %d, %d, %s \n",button->code,button->gpio,button->desc);(gpio_key_report_event function)
		button->code ==> SMARC/kernel_imx/include/linux/input.h (#define KEY_HOME		102 ...)

mcu_version
cat /sys/devices/platform/mcu_efm.0/mcu_version

lsusb : list usb device

pci : wireless driver(intel)
/sys/bus/pci/drivers/iwlagn

Debug Print相關輸出 : 
printk("%s(%d)\n",__FILE__,__LINE__);	(列印Debug Message)
printk("%s(%d) : cmd=%d, value=%d\n",__FILE__,__LINE__,cmd,value);

尋找資料 : 
grep -r "cpu is" arch/

cat /proc/cmdline	cat cmdline參數

touchscreen :
cat /dev/input/event1	(抓touch panel的info)
cat /sys/class/input/input1/name  (device = max11801_ts)

X11 :
cat /usr/var/log/Xorg.0.log

=========================================Demo 平台 ========================================================
1.Q7-imx6-quad (Linux-xfce4, MPtest + QC-UI) 2013/10/14
	mini-sdcard 開機
	a. fdisk (/dev/sdc : uboot/ uImage/ parameter, /dev/sdc1 : rootfs)
	b. mkfs.ext4 - /dev/sdc1
	c. dd uboot/ uImage/ parameter
	d. cp rootfs (rebuild : udev175以前/ ncurse5.3)
	e. re-set uboot parameter : minisd card dev=2
	f. cp (version/ mcu_version/ 85-usb-sdcard-insert)
	g. MP_TEST_WINDOW (model name : imx6-linux) (MP_TEST_WINDOW_03+QC03)
=========================================Video Flow============================================================
1. board-mx6q_sabresd.c : 
	imx6q_add_ipuv3(0, &ipu_data[0]);		註冊 => devices-common.h => platform-imx_ipuv3.c => "imx-ipuv3"
	imx6q_add_ipuv3fb(i, &sabresd_fb_data[i]);	註冊 => devices-common.h => platform-imx_ipuv3.c => "mxc_sdc_fb"
	imx6q_add_ldb(&ldb_data);			註冊 => devices-imx6q.h	=> platform-imx_ldb.c => "mxc_ldb"
2. Driver :
	"imx-ipuv3"	=> ipu_common.c		(ipu : Image Process Unit)
	"mxc_sdc_fb"	=> mxc_ipuv3_fb.c	(fb : framebuffer)
	"mxc_ldb"	=> ldb.c		(LDB : lvds display bridge)
3. iobase :
	MX6Q_IPU1_ARB_BASE_ADDR		0x02400000


==========================================Video Debug ===========================================================
1. kernel define : 
	- imx6q_add_mxc_hdmi_core(&hdmi_core_data); 	---> IPU0/DISP1 (system default : HDMI use IPU0/DISP1)
	- imx6q_add_ldb(&ldb_data);			---> IPU1/DISP0		IPU1/DISP1 (system default : LVDS use IPU1/DISP1)
	- imx6q_add_ipuv3				---> Define IPU
	- imx6q_add_ipuv3fb(i, &q7_fb_data[i]);		---> Define fb0,fb1,fb2,fb3(ex:hdmi,ldb,lcd,
2. uboot define :
	- src=setenv bootargs ${bootargs} video=mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 video=mxcfb1:dev=ldb,LDB-XGA,if=RGB666 video=mxcfb2:off video=mxcfb3:off
		指定 : fb0 -> hdmi / fb1 -> ldb
	- fbmem=28M,28M,28M vmalloc=400M		---> framebuffer fb0=28M fb1=28M fb2=28M
3. mxc_ipuv3_fb.c : 
		fb0 ---> /sys/class/graphics/fb0/name	---> DISP3 BG (HDMI)
			 /sys/class/graphics/fb1/name	---> DISP3 FG (HDMI)
		fb1 ---> /sys/class/graphics/fb2/name	---> DISP4 BG (LDB)
			 /sys/class/graphics/fb3/name	---> DISP4 FG (LDB)
4.
	 	/sys/devices/platform/mxc_hdmi/name	---> DISP3 BG
		/sys/devices/platform/mxc_ldb		--->
		/sys/devices/platform/mxc_hdmi_core	---> 

5.	xserver-xorg-video-imx-viv-3.0.35-4.0.0.tar.gz	===>	vivante_display.c
		xf86DrvMsg( 0, X_INFO , "Alston(vivDisplayPreInit) -'%s' \n" , vivPtr->mFB.fbDeviceName ) ;

============> ???? Configuration ??
1) Device Drivers -> Graphics Support -> <M> /dev/agpgart (AGP Support) ---> 
1a) and under /dev/agpgart (AGP Support) ---> <M> AMD Opteron/Athlon64 on-CPU GART support 

2) Device Drivers -> Graphics Support -> <M> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) ---> 
2a) and under Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) ---> <M> ATI Radeon 
                                                                                   [*]   Enable modesetting on radeon by default - NEW DRIVER3) Device Drivers -> Graphics Support -> {*} Support for frame buffer devices ---> 
3a) and under Support for frame buffer devices ---> [*]   Enable firmware EDID 
                                                    [ ]   Framebuffer foreign endianness support  ---> 
                                                    [*]   Enable Video Mode Handling Helpers 
                                                    [*]   Enable Tile Blitting Support 

and do not select any framebuffer drivers.
4) Device Drivers -> Generic Driver Options ---> -*- Userspace firmware loading support 
                                                  []    Include in-kernel firmware blobs in kernel binary 
                                                  ()    External firmware blobs to build into the kernel binary
================================================MFG-Tool==========================================================================
					
  <LIST name="ubuntu-SabreSD-eMMC" desc="Choose eMMC android as media">
    <CMD state="BootStrap" type="boot" body="BootStrap" file ="files/linux/u-boot.bin" >Loading U-boot....Alston</CMD>
    <CMD state="BootStrap" type="jump" > Jumping to OS image. </CMD>
-----------> 跳到我們要的UBOOT

================================================Uboot/reg read========================================================================

Boot Mode Register --> HW
20D_8004 SRC Boot Mode Register 1 (SRC_SBMR1) 32 R 0000_0000h   
20D_801C SRC Boot Mode Register 2 (SRC_SBMR2) 32 R 0000_0000h
Uboot : ==>  md 20d8004 (讀register)
020d8004: 00001040 00000001 00000000 00000000    @...............
020d8014: 00000000 0000001f 3a000001 00000000    ...........:....
020d8024: 00000000 00000000 00000000 00000000    ................
020d8034: 00000000 00000000 00000000 00000000    ................

================================================QC : 程式解釋=========================================================================
Host(X86 CPU) --> 系統 :X86(ARM)--> Compile GetDlgItem(Windows)(Linux Windows Compile )	---> elf(arm)/pe(Win32)
		  X86(WINDOWS)--->Wine configuration(arm)

execute loader

WinMain() : Windows第一個執行檔 --> Loading resource.rc / resource.h(DLG_MAIN)
ResEdit : Resource 編輯器(Win32) -->產生 resource.rc / resource.h 視窗
resource 編輯器 --> .o
DlgMain() : WM_INITDIALOG 第一個承接的message
===================================================================================================================================
first install流程 : VirtualBox 相關更動
1. VirtualBox - 存放裝置"加入硬碟" example : Linux.vdi
2. StartUp - Terminal : ls /dev/sd* - 可以查詢到 example :/dev/sda /dev/sda1 /dev/sda2 /dev/sdb(新加入硬碟)
3. sudo mkfs.ext4 /dev/sdb (對新硬碟format)
4. 透過ls -l /dev/disk/by-uuid (查詢UUID)	example : b0b35dc8-0297-4a87-bc39-ba9ba863b1e0
5. 修改 /etc/fstab	UUID=b0b35dc8-0297-4a87-bc39-ba9ba863b1e0 /home/retronix/work/Linux   auto  defaults 0 2
		或	UUID=b0b35dc8-0297-4a87-bc39-ba9ba863b1e0 /home/retronix/work/Linux   ext4  error=remout-ro 0 2	(前)
	XXXXa. 掛上VM VirtualBox - Second HDD : /home/retronix/work/Linux
	XXXXb. /etc/fstab : uuid ---位置 ext4 default 0 2 (無效)
	XXXXc. sudo chown root:retronix Linux (更改為home權限)

Config setting :
	1 ./ltib -m config 
		=> Select "Freescale iMX reference board"
		=> platform type => imx6q
		profiles : Min profile
		=> uboot : mx6q_sabresd
		=> cp .config => defconfig.dev

====================================================reg read/write=========================================================
	Uboot : 
		md 2020000 1 (read Absolute Address 1個32bit)
		mw 2020040 41 (write UART1_UTXD 輸出A)

	kernel : ???
		ldb->reg = ioremap(base_addr, res->end - res->start + 1);
		ldb->control_reg = ldb->reg + 2;
		ldb->gpr3_reg = ldb->reg + 3;
		readl(ldb->control_reg);	(Read)
		writel(reg, ldb->control_reg);	(Write)
===================================================Driver Print info======================================================
	xf86Msg(X_ERROR,"Alston (xf86BusConfig) layout->screen->device :  %s --------->\n", layout->screen->id);
	xf86DrvMsg( 0, X_INFO , "Alston(xf86BusConfig) --------'%s''%s''%d''%s'\n" , xf86ConfigLayout.id,xf86ConfigLayout.screens->screen->id
			 , xf86ConfigLayout.screens->screen->screennum, xf86ConfigLayout.screens->screen->device) ;
============================================使能linux驱动中的dev_dbg ========================================================
linux设备驱动调试，我们在内核中看到内核使用dev_dbg来控制输出信息，这个函数的实质是调用 printk(KERN_DEBUG )来输出打印信息。要打开这个开关需要下面两步。
1、打開調適開關： 你調適的文件中必然包含了<linux/device.h>，或者《linux /paltforam_device.h》，後者包含了前者，
		使用#define DEBUG 1 來打開調適開關，在包含此頭文件之前
2、修改文件kernel/printk文件 : 
	其中DEFAULT_CONSOLE_LOGLEVEL 为终端console输出的最低级别，比这严重的都将输出。原来该值为7，则调试信息无法输出，修改为8则全部有输出

linux/kernel文件中 
#define    KERN_EMERG    	"<0>"    	/* system is unusable            	*/ 
#define    KERN_ALERT    	"<1>"   	/* action must be taken immediately    	*/ 
#define    KERN_CRIT    	"<2>"    	/* critical conditions            	*/ 
#define    KERN_ERR    		"<3>"    	/* error conditions            		*/ 
#define    KERN_WARNING    	"<4>"    	/* warning conditions            	*/ 
#define    KERN_NOTICE    	"<5>"    	/* normal but significant condition    	*/ 
#define    KERN_INFO    	"<6>"   	/* informational            		*/ 
#define    KERN_DEBUG    	"<7>"   	/* debug-level messages        		*/

===============================================Wrapping Machine - BSP BIN 製作==========================================
0. 外卡 SDCARD - kernel 要先將protection機制移除 （drivers/mmc/card/block.c) -( mmc_blk_alloc_parts -> //if (!mmc_card_mmc(card)) )
1. 清除emmc資料	(外卡開機 : 	1. dd if=/dev/zero of=/dev/mmcblk0 bs=1024)	(od -x /dev/mmcblk0   check mmcblk0內容)
				2. echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				3. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=1 count=1023
				4. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
2. MFG 重新燒錄 (燒錄BSP)
3. emmc dd到檔案 (取BSP檔)	1. mount /dev/sda1 /mnt (8G USB mount)
				2. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 count=1 		(先dd 0-1k)
				3. echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				4. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 seek=1 skip=1 count=767	(再dd 1K-768K)
				5. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				6. dd if=/dev/mmcblk0 of=/mnt/WM_PVT_BSP.bin bs=1024 seek=768 skip=768	(dd 768K-4G)
4. 清除emmc資料			1. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 count=1 （清 0 - 1K)
				2. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=768 (清 768K - )
				3. echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config
				4. dd if=/dev/zero of=/dev/mmcblk0 bs=1024 seek=1 count=767 (清 1K - 768K)

5. 檔案dd到emmc (驗證BSP)

附	-dd zero 進入emmc,使用mini-SD開機失敗,eth0要插著網路線? 再試一次 OK!!
	-dd zero 進入emmc時,出現infomation: dd: writing '/dev/mmcblk0':No space left on device

For: freescale iMx6-kernel protection機制
(註 : 先移除掉 mmcblk0boot0/mmcblk1boot1,避免變更emmc設定時,當機)
cat /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_info	查看目前emmc設定
echo 1 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config 設定emmc - PARTITION_ACCESS : 1
	=> 	才可以read/write,及dd 1K-1M(emmc)
	a. dd if=/dev/mmcblk0 of=/mnt/WR_PVT_BSP.bin bs=1M (emmc dd到檔案)
	b. (dd if=/dev/zero of=/dev/mmcblk0 bs=1M)清除
	c. (dd if=/mnt/WR_PVT_BSP.bin of=/dev/mmcblk0 bs=1M count=1) (檔案dd到emmc)
echo 8 > /sys/devices/platform/sdhci-esdhc-imx.3/mmc_host/mmc0/mmc0\:0001/boot_config 設定emmc - PARTITION_ACCESS : 0
	=>	才可以read/write,及dd  0-1K和1M-以後(emmc)
	a. dd if=/dev/mmcblk0 of=/mnt/WR_PVT_BSP.bin bs=1M seek=1 skip=1 (emmc dd到檔案)
	b. (dd if=/dev/zero of=/dev/mmcblk0 bs=1M seek=1)清除
	c. (dd if=/mnt/WR_PVT_BSP.bin of=/dev/mmcblk0 bs=1M seek=1 skip=1) (檔案dd到emmc)
要切回 - 設定emmc - PARTITION_ACCESS : 0  才可以開機

小程式 : ddmmcblk0.c	(清除mmcblk0前面1K, 8Byte*128=1KByte)
compile : ubuntu terminal --> arm-linux-gnueabi-gcc -static ddmmcblk0.c -o ddmmcblk0
#include <sys/types.h>
#include <sys/time.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <stdlib.h>
int main()
{
	int loop,size=128;
	char cbuf[8]={1,2,3,4,5,6,7,8};
	int fp;
	fp=open("/dev/mmcblk0", O_RDWR | O_NOCTTY );
        printf("OPEN mmcblk0 OK\n");  
	if(fp){	
		for(loop=0;loop<size;loop++)
			write(fp,cbuf,8);			
        	printf("write mmcblk0 OK\n");    								
    	}
	close(fp);
}
回讀: dd if=/dev/mmcblk0 of=value.txt bs=1024 count=1 (回讀 1024Byte*1=1KByte)
顯示: od -x value.txt (可以check value)

===================================Wrapping Machine - MP測試相關問題======================================================
udhcpc -b -i eth0	//獲取eth0的ip地址 (-b : udhcpc切换到后台,避免script停住)
busybox hwclock -w	//将系统時鐘寫入硬件時鐘

包裝機,外卡MP測試 (Flow 變更)	---------------------------
a. 配合客戶 : 變更uboot ->	1. #define CONFIG_ENV_OFFSET	(768 * 1024)
				2. mmc read ${loadaddr} 0x800 0x2000    Kernel位置變更為1M
b. 內卡 : MFG燒錄客戶FW ->	1. /dev/zero -> 768K
				2. uImage -> 1M
				3. 開機一次,save uboot參數!!!
c. 變更 rtx_setenv -> 		1. /dev/mmcblk0 -> 12M 變更為 768K
	rtx_setenv_mmcblk1 ->	2. /dev/mmcblk1 -> 12M 變更為 768K
d. MP測試程式變更 ->		1. MP_Test -> 設定內/外卡 -> Mem_Test=Redo (set serial_number後)
				2. func_DDR() -> 讀外卡 Mem_Test -> 寫內卡Mem_Test -> 清除外卡 Mem_Test
e. miniSD card -> 		1. uboot -> a.
				2. kernel -> dd 1M位置
				3. /dev/zero -> 768K
				4. rootfs -> 不變
				5. cp MP_Test
				6. mkdir SDCARD_TEST
				7. cp rtx_setenv/rtx_setenv_mmcblk1 ->/usr/bin/
包裝機,外卡MP測試 (SD-AutoUpdate 變更) ---------------------
a. 外卡 : uboot ->		1. 原位置 #define CONFIG_ENV_OFFSET	(12 * 1024 * 1024)
				2. mmc read ${loadaddr} 0x6800 0x2000 Kernel原位置 13M
b. 內卡 : 原MFG燒錄客戶FW ->	1. /dev/zero -> 12M
				2. uImage -> 13M
				3. 開機自動會寫入參數
c. 變更 rtx_setenv -> 		1. /dev/mmcblk0 -> 12M 
	rtx_setenv_mmcblk1 ->	2. /dev/mmcblk1 -> 12M
d. MP測試程式變更 ->		1. MP_Test -> 設定內/外卡 -> Mem_Test=Redo (set serial_number後)
				2. func_DDR() -> 讀外卡 Mem_Test -> 寫內卡Mem_Test -> 清除外卡 Mem_Test
e. miniSD card -> 		1. uboot -> a.
				2. kernel -> dd 13M位置
				3. /dev/zero -> 12M
				4. rootfs -> 不變
				5. cp MP_Test
				6. mkdir SDCARD_TEST
				7. cp rtx_setenv/rtx_setenv_mmcblk1 ->/usr/bin/

=================================================Wrapping Machine - MP======================================================
1. uboot.bin + uImage + rootfs + parameter change(external SD card boot)
	開關機測試 : (runintest)
	a. /etc/rc.d/rcS -> Add /home/user/runintest
	b. /home/user -> Add file runintest (count計數)
	c. /home/user -> Add file mmc_2M_count (write count to emmc 2M position)
	d. 紀錄 : 	(1) /home/user/mmc_2M_count -l (程式透過rtx_setenv-0.0.1實現)
			(2) /etc/count 也有備份
	f. 製作 : 	(1) cfg select name = i.MX6DL-SABRESD-MINISD
			(2) mfg - > OK
			(3) uboot parameter - > bootcmd=run bootcmd_microsd
			(4) add a,b,c,(a1,b1,c1)
	MP測試 : 製作注意事項
	a1. MP_Test -> Add folder /MP_Test/	(MP_Test_config need modify)
	b1. SDCARD_TEST -> Add /SDCARD_TEST/
	c1. rtx_setenv_mmcblk1 -> Add /usr/bin/

================================================uboot GPIO Debug=============================================================================
cpu/arm_cortexa8/start.S 

+.equ DEF_BASE_GPIO_ADRESS , 0x209C000
+.equ DEF_BASE_GPIO_ADRESS1 , 0x209C004
+.equ DEF_BASE_GPIO_VALUE  , 0x00000000
 
 .globl _start
 _start: b	reset
@@ -101,6 +104,14 @@ FIQ_STACK_START:
  */
 
 reset:
+
+	ldr r0 ,=DEF_BASE_GPIO_ADRESS1
+	ldr r1 ,=0xFFFFFFFF
+	str r1,[r0]
+	ldr r0 ,=DEF_BASE_GPIO_ADRESS
+	ldr r1 ,=DEF_BASE_GPIO_VALUE
+	str r1,[r0]
+/*	b reset	*/

================================================UBOOT MCU COUNT DEBUG==========================================================================

lib_arm/board.c

@@ -445,6 +445,8 @@ void start_armboot (void)
 #if defined(CONFIG_VFD) || defined(CONFIG_LCD)
 	unsigned long addr;
 #endif
+	ulong MCUcount=0;
+	uint8_t mcu_count[4];
 
 	/* Pointer is writable since we allocated a register for it */
 	gd = (gd_t*)(_armboot_start - CONFIG_SYS_MALLOC_LEN - sizeof(gd_t));
@@ -611,8 +613,14 @@ extern void davinci_eth_set_mac_addr (const u_int8_t *addr);
 //		usb_stor_scan(1);
 //	}

+	i2c_read(0x0C,0xEB,1,&mcu_count,4);
+	MCUcount = mcu_count[0]+mcu_count[1]*256+mcu_count[2]*256*256;
+	printf("\n\n MCU_COUNT = %d \n\n",MCUcount);
+
 	s = getenv ("Mem_Test");
 	if (!strcmp(s,"Redo")) {
+//	for(MCUcount=1;MCUcount<999999;MCUcount++){
+//		printf("\nMemory_Test_COUNT = %d \n",MCUcount); 
 		mem_test(6, 0, 0, 0);
 	}
================================================Uboot Auto Update=======================================================================
a. SDCARD - autorun.sh / check_code / uImage-recovery / uramdisk-imx6.img / 更新的code
b. Uboot - bootsel.c / makefile + bootsel.o /  CONFIG_BOOT_SYSTEM(define)
c. Config - Selsec 
		General setup ---> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
		Device Drivers  ---> [*] Block devices  ---> <*>   RAM block device support : 	(1)     Default number of RAM disks)
												(4096)  Default RAM disk size (kbytes)
d. kernel - 把EFM-i2C註冊 mask掉.(因為開機會當機) -> 更名 uImage-recovery (i2c_register_board_info(1, mxc_i2c1_board_info,...)
e. 開機 -> miniSD_CARD -> check_code -> autorun.sh -> 更新code -> OK!!
f. (需要 autorun.sh -> 建立 /tmp/restart -> 才不至於重複開機2次)

==================================================Memory Test =======================================================================
a. include/config/mx6dl_sabresd.h -->  uboot parameter
			1. bootcmd=run bootcmd_microsd
			2. Mem_Test=Mem_Test
b. lib_arm/board.c
	if (!strcmp(s,"Redo")) 
 		mem_test(6, 0, 0, 0);
	else if (!strcmp(s,"Test_2_Hours")) {				//Check Mem_Test = Test_2_Hours (start test)
		printf("\nMem_Test = %s ",s); 				//Print uboot parameter setting	
		for(MCUcount=1;MCUcount<21;MCUcount++){			//Memory Test 20 times
			printf("\nMemory_Test_COUNT = %d ",MCUcount); 
			mem_test(6, 0, 0, 0);
		}
		setenv ("Test", "FINISH 2 HOURS !!");			//finish test & Mem_Test = FINISH 2 HOURSE !!
		printf("\n TEST FINISH !!! \n"); 
		saveenv();
 	}




==================================================Android============================================================
橋接 : 
1. SMARC/device/fsl/sabresd_6dq/init-R064.rc
2. SMARC/device/fsl/sabresd_6dq/recovery-SMARC.fstab
3. SMARC/device/fsl/sabresd_6dq/vold-SMARC.fstab



==================================================Android============================================================
Download Android Source code : (192.168.4.44)
a. https://172.18.10.75/trac/StarFish -> Howto -> Attachments -> repo -> download.sh(download_Android.sh -> imx6)
b. https://172.18.10.75/cgi-bin/cgit.cgi/platform/manifest.git/?h=AAI4.2.2-1(預先知道要下載哪一個 search mani -> AAI4.2.2-1)
c. ./download.sh SMARC AAI4.2.2-1 (建SMARC folder, 自AAI4.2.2-1 branch下載)
d. ./build_4.2.2.sh all(cp build_4.2.2.sh SMARC folder)
e. error ----------> (z, lzo2, uuid, m, c)incompatible衝突
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libz.so when searching for -lz
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libz.a when searching for -lz
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/liblzo2.so when searching for -llzo2
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/liblzo2.a when searching for -llzo2
	/usr/bin/ld: cannot find -llzo2
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libuuid.so when searching for -luuid
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libuuid.a when searching for -luuid
	/usr/bin/ld: cannot find -luuid
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libm.so when searching for -lm
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libm.a when searching for -lm
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libc.so when searching for -lc
	/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libc.a when searching for -lc
	collect2: ld 回傳 1
	make: *** [out/host/linux-x86/obj/EXECUTABLES/mkfs.ubifs_intermediates/mkfs.ubifs] Error 1
f. 	(libz.so -> /lib/x86_64-linux-gnu/libz.so.1.2.3.4)
	(libm.so -> /lib/x86_64-linux-gnu/libm.so.6)
	(libc.so)
	(liblzo2.so -> liblzo2.so.2.0.0)
	(libuuid.so -> /lib/x86_64-linux-gnu/libuuid.so.1.3.0)
	安裝ubuntu12.04所需pkgs==> http://source.android.com/source/initializing.html.
g.
	下列的額外套件將被安裝：
  	libc-bin libc-dev-bin libc6 libc6:i386 libc6-dev:i386 libc6-dev-i386 libc6-i386 libgl1-mesa-glx libglapi-mesa libglapi-mesa:i386 libx11-6
  	libx11-6:i386 libx11-dev mesa-common-dev
	建議套件：
  	gnupg-curl gnupg-doc glibc-doc glibc-doc:i386 locales:i386 manpages-dev:i386 ncurses-doc:i386
	推薦套件：
  	gcc:i386 c-compiler:i386
	下列套件將會被【移除】：
  	lib32ncurses5-dev libkaya-ncurses-dev libncurses5-dbg libncurses5-dev
	下列【新】套件將會被安裝：
  	libncurses5-dev:i386
	下列套件將會被升級：
  	curl gnupg libc-bin libc-dev-bin libc6 libc6:i386 libc6-dev libc6-dev:i386 libc6-dev-i386 libc6-i386 libgl1-mesa-dev libgl1-mesa-glx
  	libgl1-mesa-glx:i386 libglapi-mesa libglapi-mesa:i386 libx11-6 libx11-6:i386 libx11-dev libx11-dev:i386 libxml2-utils mesa-common-dev
  	x11proto-core-dev xsltproc
	安裝 => sudo apt-get install uuid

	?? sudo apt-get install liblzo2-dev uuid-dev (無效)
h.
	更改external/mtd-utils/mkfs.ubifs/Android.mk
		#LOCAL_CFLAGS+= -Wmissing-prototypes -Winline
		LOCAL_CFLAGS+= -Wmissing-prototypes -Winline -m64
		LOCAL_LDFLAGS += -L/usr/lib/x86_64-linux-gnu
		#LOCAL_LDLIBS:= -lz -llzo2 -lm -luuid
		LOCAL_LDLIBS:= -lz -llzo2 -lm -lc -lgcc -luuid -m64

i.
	./repo forall -c git reset --hard (checkout all)
	./repo forall -c git status

j. 切換BRANCH:
git checkout -b Q7-AXIOMTEK Q7	(由Q7環境為基礎, 建立新的 branch )

========================================Android Update Tool===========================================================================
1. https://192.168.4.44/trac/StarFish/wiki 	--> alstonlai / please
2. wiki  -->  OS-Release Note
3. ----> Download file, Please search ticket 355. 
4. Attachments  --> Attach file  -->  Add attachment

========================================Android uart issue=================================================================
SMARC/device/fsl/imx6/etc/ueventd.freescale.rc  -- 更改 mask : #/dev/ttymxc4              0660   bluetooth  bluetooth    XX無效

========================================Wifi driver============================================================================
android :
1. insmod /mnt/mmcblk1p1/MP_Test/rt2800usb.ko (SMARC/hardware/imx/wlan/rt2800/os/linux/rt2800usb.ko)
2. /system/etc/wifiRT/RT2870STA.dat (Initialized need)
3. ifconfig wlan0 up
4. /usr/sbin/wpa_supplicant -iwlan0 -c/etc/wpa_supplicant/wpa_supplicant.conf &
wep method :
wpa_cli -iwlan0 -p/var/run/wpa_supplicant add_network
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 ssid \"Air_Remote\"
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 key_mgmt NONE
wpa_cli -iwlan0 -p/var/run/wpa_supplicant set_network 0 wep_key0 \"1234567890123\"
wpa_cli -iwlan0 -p/var/run/wpa_supplicant enable_network 0
udhcpc -i wlan0 &
ping 8.8.8.8
========================================SATA Enable=====================================================================
1. kernel config :
	<*> ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
		[*]   Support for SATA (deprecated; conflicts with libata SATA driver)
		[*]     ATA disk support
	<*> Serial ATA and Parallel ATA drivers  --->
		[ ]   SATA Port Multiplier support 
		<*>   Platform AHCI SATA support
2. read information
	cat /sys/block/sda/device/model
3. SATA info :
	cat /sys/devices/platform/ahci.0/host0/target0\:0\:0/0\:0\:0\:0/block/sda/sda1/size
========================================smarc-android (linux)====================================================================
kernel : 紀錄--
#	arch/arm/configs/imx6_SC64_android_defconfig (Linux)
#	arch/arm/mach-mx6/Kconfig (Linux)
#	arch/arm/mach-mx6/Makefile (Linux)
#	arch/arm/mach-mx6/board-mx6dl_smarc (Linux).h
#	arch/arm/mach-mx6/board-mx6q_smarc (Linux).h
#	arch/arm/mach-mx6/board-mx6q_smarc (Linux).c
#	arch/arm/mach-mx6/mx6q_smarc_pmic_pfuze100 (Linux).c
#	arch/arm/plat-mxc/include/mach/common (Linux).h
#	arch/arm/tools/mach-types (Linux)
#	sound/soc/imx/Kconfig (Linux)
#	sound/soc/imx/imx-sgtl5000 (Linux).c
uboot : 紀錄--
#	Makefile (Linux)
#	board/freescale/mx6q_smarc (Linux)/	資料夾中檔案要更改
#	include/asm-arm/mach-types (Linux).h
#	include/configs/mx6_SC64_android (Linux).h

========================================command issue ================================================================
mount	(util-linux - X)(busybox - O)
setterm (util-linux - O)
所以path : 可以決定我使用的是busybox or util-linux mount 
透過spec --> rm util-linux (mount) --> rm $RPM_BUILD_ROOT/%{pfx}/bin/mount
=======================================================================================================================
包裝機 MP 測試步驟 : 
A. Board Ready :
	Jump : 56 ON (Serial Download)
	MFG : cfg(name = Teraoka-eMMC) 燒錄.
	Jump : 12367 ON (Emmc Boot)
	開機1次.
	關機,移除RTC battery.
B. MP Test :
	Jump : 27 ON (MiniSD Boot)
	Connect 接上, UART線接上, RTC battery 接上, 電錶接上, OTG線接上, USB storage接上..
	external SD - FTP IP / Passward 要正確. (runintest)

	Runintest : 
		開關機120次.
	紀錄: /home/user/mmc_2M_Count -l (check次數)

	PC QC8 開啟 :
		開始測試 - - 移除runintets程式.
		1. Power On - Console有顯示.
		2. serial number / mac1 / mac2
		3. restart - DDR test (6-7min)
		1. HW測試 - FAN 燈, 13 Voltage
		2. RTC測試 - time(開機系統時間)
		3. LED測試 - LED flash
		4. GPIO測試 - RIO / DSR GPIO
		5. Audio測試 - Mic / LineIn / HP / Speaker
		6. 3AXIS測試 - 
		7. TouchPanel -
		8. USB
		9. WIFI
		10. Net0
		11. Net1
		12. RS232
		13. DDR
		14. SDCARD
	紀錄..
	J9 	jump拿掉
	J36	電池上.
	J32 x40
	MiniSD x40
========================================================PMIC register=======================================================================
		pfuze_reg_read(pfuze, 0x6c , &value);
		printk("vgen1 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6d , &value);
		printk("vgen2 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6e , &value);
		printk("vgen3 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x6f , &value);
		printk("vgen4 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x70 , &value);
		printk("vgen5 = %2x \n",value);
		pfuze_reg_read(pfuze, 0x71 , &value);
		printk("vgen6 = %2x \n",value);
==========================================================install xfce4======================================================
1. ubuntu - initial 
2. lightdm (視窗管理系統)-(管理-桌面管理器)
3. xfce4 (桌面管理器)
4. gmone - lib (美觀 - icon)

install : cmd (記得接網路線)
ip addr 
1. apt-get install xfce4
2. apt-get update (install fail)
3. apt-get install  lightdm
4. passwd admin(更改admin的密碼)
apt-get install gnome-session* (顯示相關pkg)(密碼輸入錯誤)
5. apt-get install gnome-session ( X )
5. apt-get install xfce4-session
6. apt-get install synaptic (套件管理程式)

check:
/etc/network# vi interfaces
#auto eth0 (mask)
#iface eth0 inet loopback (mask)
ping www.google.com (OK)
/etc/hosts
/etc/resolv.conf
/etc/resolvconf/resolv.conf.d/tail
sudo firefox (OK - 提高權限)  ==========> kernel config 所造成 ===> (CROSS_COMPILE選)arm-linux-gnueabihf-
=> SMARC/kernel_imx/net/ipv4/af_inet.c  => current_has_network(void) => CONFIG_ANDROID_PARANOID_NETWORK (X)
	=> SMARC/kernel_imx/security/commoncap.c => AID_NET_RAW (91) / AID_NET_ADMIN (93) Mask掉

=> sudo apt-get install ubuntu-restricted-extras (flash player) ??

-----------------------------------------權限-----------------------------------
cat /etc/group  
cat /etc/passwd
ls -l /etc
cat securetty
cat /etc/security/access.conf

cat /etc/pam.conf
cat /etc/pam.d/ ....
cat /etc/pam.d/login
cat /etc/default/locale
cat /etc/environment
cat /etc/login.defs
cat /etc/shadow

--------------------------------------------------------------------------------
fcitx - 中文化
====================================================xfce4 已裝==============================================================
modify  /etc/hosts
	/etc/hostname
install	ibus
	ibus-chewing
	gnome-icon-theme-full
	fonts-arphic-uming	中文字型
=====================================================freescale ubuntu : upgrade=====================================================
1. del /var/cache/apt/archives/*.deb (空間太大,先移除)
2. depmod -a
3. add console : 
			/etc/init/serial-auto-detect-console.conf
			/bin/serial-console
4. module
		:	make uImage
		:	make modules
		: 	make DEPMOD=/bin/true INSTALL_MOD_PATH=../tmp/kernel modules_install 
		:	make DEPMOD=/bin/true INSTALL_HDR_PATH=../tmp/kernel/usr/src/linux headers_install
		:	sudo chown -R root:root ../tmp/kernel/*
		:	sudo cp -avrf ./tmp/kernel/* ./rootfs/.
4.1. upgrade	:	do-release-upgrade
5. 登入 
		:	sudo passwd linaro -> admin
6. ssh
		: 	ps -A | grep ssh
7. ip addr	
		:	inet 192.168.4.60
8. 另台電腦
		:	putty : SSH : 192.168.4.60
				login : linaro / admin

============================================================================================================================
/etc/services 這個檔案看看！搜尋一下 domain 這個關鍵字，就可以查到 53 這個 port 啦(DNS 使用的 port number)

===============================================Compile 順序=================================================================
1. patch -p1 patch-file		(Patch file)
2. ./configure --prefix=/usr	(創建Makefile)
3. make				(Compile)
4. make install			(Install)
============================================================================================================================
uboot : 
	make distclean
	make mx6q_q7_config
	make
kernel :
	make distclean
	make imx6_defconfig
	make menuconfig
	make uImage

建立LVDS : 1024x600
struct fb_videomode {
	const char *name;	/* optional */
	u32 refresh;		/* optional */
	u32 xres;
	u32 yres;
	u32 pixclock;
	u32 left_margin;
	u32 right_margin;
	u32 upper_margin;
	u32 lower_margin;
	u32 hsync_len;
	u32 vsync_len;
	u32 sync;
	u32 vmode;
	u32 flag;
};
	static struct fb_videomode ldb_modedb[] = {
	 	"LDB-SMARC", 60, 1024, 600, 19528,
		160, 80,
	 	18, 10,
	 	80, 7,
	 	0,
	 	FB_VMODE_NONINTERLACED,
	 	B_MODE_IS_DETAILED,},	

名稱 : LDB-SMARC	刷新頻率 : 60
分辨率 : 1024 x 600	時鐘 : 10^12 / (1024+160+80+80)*(600+18+10+7)*60=19528
sync : 0		vmode : FB_VMODE_NONINTERLACED
flag : B_MODE_IS_DETAILED
===============================================Q7-Quad Android========================================================
(借助SMARC android)
Android : Q7 --> Q064 --> ./build_4.2.2.sh
IMX6Q : 
	uboot : 
		1. MX6_Q064_android.h
			"set_display=run lvds\0" \
			"lvds=setenv bootargs ${bootargs} video=mxcfb0:dev=ldb,LDB-1024x600,if=RGB666,bpp=32 video=mxcfb1:off video=mxcfb2:off fbmem=28M vmalloc=400M\0" \

	kernel :
		1. board-mx6q_q7.c
			.mode_str = "LDB-1024x600",
		2. ldb.c
			"LDB-1024x600", 60, 1024, 600, 19528,
		3. hid-multitouch.c
			USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352) },
		4. hid-ids.h
			#define USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352	0x7352
		5. hid-core.c
			{ HID_USB_DEVICE(USB_VENDOR_ID_DWAV, USB_DEVICE_ID_DWAV_EGALAX_MULTITOUCH_7352) },
=============================================Q7 Solo Android======================================================================
New PC :
1. Download Android Source : ./download.sh SMARC AAI4.2.2-1
	a. Download download.sh and modify git ip -> server (192.168.4.44)
		ssh://gitolite@192.168.4.44/android/platform/manifest.git...
	b. Download repo and modify git ip
	c. Add .ssh (copy ssh to new pc)
	d. new pc update : .13.10 -> http://forum.xda-developers.com/showthread.php?t=2464683
		install Android Environment
		-> update error -> change /etc/apt/sources.list server
			-> sudo gedit -> /etc/apt/sources.list ->  us.archive.ubuntu.com(replace -> tw.archive.ubuntu.com)
		->Update environment and Start Download
	e. git config --global user.email "alston_lai@aai.com.tw"
	f. Start download success (user name : rtx-3110)
2. Building Code : ./build_4.2.2.sh all
	a. copy build_4.2.2.sh to SMARC folder
	b. new kernel-imx/arch/arm/config/imx6_Q062_android_defconfig (same as imx6_Q064_android_defconfig)
	c. compile : fatal error: uuid/uuid.h: --> need modify /external/mtd-utils/mkfs.ubifs/Android.mk
			LOCAL_CFLAGS+= -Wmissing-prototypes -Winline -m64	(Add -m64)
			LOCAL_LDLIBS:= -lz -llzo2 -lm -luuid -m64		(Add -m64)
	d. sudo apt-get install uuid uuid-dev liblzo2-dev --> uuid-dev:i386 / zib1g-dev:i386 / liblzo2-dev:i386
	e. compile success
3. install android
	a. sudo apt-get install git-cola
	b. sudo apt-get install Meld
	c. modify build_4.2.2.sh to Q061
	d. building finish
	e. copy bin to MFG and Update system
4. install apk
	a. copy apk to storage (fat32)
	b. Use AAI Tools - Install APK from storage

5. install touch-driver
	ldb.c add ldvs=1024x600
	add (__set_bit(INPUT_PROP_DIRECT, ts..)
	setting panel - lvds 1024x600 : LDB-Q7, RGB24

6. memory
	fbmem =  1920 * 1080 * 4(RGB alpha) * 3（預留 swapper) = 23.7M
	      =  1024 *600 * 4 *3 = 7.37M ( fbmem=8M )
	vmalloc=256M (DMA virtual memory ) 動態 效能 (128M X)
	gpu_memory=32M (給gpu使用) (64M X)



7. (vmalloc=256M gpu_memory=32M) 
	apk - wait 5 min - stable.

8. check memory	(free, vmstat, ps -aux, top, watch cat /proc/meminfo)
	cat /proc/meminfo
	ps



9. Android performace tunning (free memory..) - Android infrastructures
	- imx6.mk (device/fsl/imx6/) 需要調整
	- generic.mk (build/target/product/)
	- mini.mk 
	- full.mk
	
=============================================SMARC Quad LInux===================================================================
uboot : 
	mx6_SC64_linux_defconfig
kernel :
	modules 調整
rootfs :
	1. mask vivita
		/etc/X11/xorg.conf	
	2. sudo gedit /etc/group
		add mlocate::124:root
===============================================SMARC Quad Ubuntu=================================================================
New PC :
uboot-imx
	cp configs/mx6_SC64_android.h (need modify parameter, usb-keyboard need plug-out)
#	include/asm-arm/mach-types (Linux).h

kernal-imx :
	cp mach-mx6/Kconfig Makefile board-mx6dl_smarc.h board-mx6q_smarc.h board-mx6q_smarc.c mx6q_smarc_pmic_pfuze100.c
	cp sound/soc/imx/Kconfig imx-sgtl5000.c 
	cp tools/mach-types
	cp include/mach/common.h
	cp configs/imx6_SC64_linux_defconfig

	make menuconfig : <*> Switch class support
	process.c --> #ifdef CONFIG_RTC_DRV_EFM32
	"mkimage" command not found --> sudo apt-get install u-boot-tools
ubuntu :
	1. kernel : make modules --> cp /usr /lib to filesystem
	2. depmod -a
	3. mask vivita -> /etc/X11/xorg.conf (尚未連結成功)
	4. alt+ctrl+F1 -> passwd root -> change passwd
			  passwd linaro -> change passwd
	5. apt-get update
	6. apt-get upgrade
	7. do-release-upgrade 	(X)
Test :
	keyboard - no response!!
	1. uboot - keyboard detect .Fail (usb info)
	2. plug-out mouse - reboot to uboot - keyboard detect OK
	3. Boot to filesystem - plug-in mouse
	4. keyboard / mouse is OK
	=======================================================
	1. 先插上keyboard,再上mouse. --- OK
GPU : (Fail Pkgs)
	1. CP GPU hardfp/usr/include -> /usr/include
		  hardfp/usr/lib     -> /usr/lib
	2. ldd /hardfp/opt/viv_samples/vdk/tutorial1 (link is OK)
	3. find opengl ES2 sample code
	4. modify file /usr/include/EGL/eglvivante.h (#define LINUX , #define EGL_API_FB)
	5. gcc Hello.c -o Hello -lX11 -lEGL -lGLESv2 (compile)
	6. gdb ./Hello (debug)
	7. change GPU pkgs --> Fail
Linux-kernel :
	1. rebuild linux kernel+uboot
GPU : (OK)
	1. gpu-viv-wl-bin-mx6q-3.0.35-4.0.0 --> opt/viv_samples/vdk/tutorial1 --> success  !!!!!
	2. change link to X11
		/usr/lib/libVIVANTE.so  -->x11	
		/usr/lib/libGAL.so
		/usr/lib/libEGL.so
		/usr/lib/libEGL.so.1

			synaptic : install ntp / quicksynergy
			ntpd -q -n -p time.stdtime.gov.tw

			sudo cp -avrf lib/* /usr/lib/.
			sudo cp -avrf include/* /usr/include/.
			sync

			ls -la /usr/lib/libVIVANTE*
			sudo rm /usr/lib/libVIVANTE.so
			sudo ln -s /usr/lib/libVIVANTE-x11.so /usr/lib/libVIVANTE.so

			ls -la /usr/lib/libGA*
			sudo rm /usr/lib/libGAL.so
			sudo ln -s /usr/lib/libGAL-x11.so /usr/lib/libGAL.so

			ls -la /usr/lib/libEGL*
			sudo rm /usr/lib/libEGL.so
			sudo rm /usr/lib/libEGL.so.1
			sudo ln -s /usr/lib/libEGL-x11.so /usr/lib/libEGL.so
			sudo ln -s /usr/lib/libEGL-x11.so /usr/lib/libEGL.so.1

	3. build xserve-xorg-video-imx-viv-3.0.35-4.0.0.tar.gz (原生) -> "XFree86-DRI" missing on display ":0"
		((synaptic : install ntp : time setting ok / synergy)
		./build.sh --> 	(sudo ./build.sh)
				EXA :
					-> RANDR issue -> 
								mask RANDR check (configure.ac)
							  	mask RENDER check
							  	mask XV check
					-> XORG_CFLAGS / XORG_LIBS issue (No package 'Xorg-server' ..)
								export BOARD_CODE_ROOT=/home/../xserve-xorg-video-imx-viv-3.0.35-4.0.0

		-> apt-get upgrade -> dpkg: syntax error: unknown group `mlocate' in statoverride file -> sudo groupadd mlocate

==================================================Porting melfas driver===============================================
Timer -> polling (X) -> clk_enable (i2C)
schedule_delayed_work() -> polling

struct melfas_ts_data{ ....; struct delayed_work work; ....} 
static struct melfas_ts_data *tspoll;
static struct timer_list led_timer;
probe:
	struct melfas_ts_data *ts;
	INIT_DELAYED_WORK(&ts->work,melfas_ts_work);
	inti_timer(&led_timer); led_timer.function=(void *)iRTXFatTimer_Proc; led_timer.data=((unsigned long) 0);
	led_timer.expires=jiffies + HZ; add_timer(led_timer);
	tspoll=ts;

iRTXFatTimer_Proc(void) -> schedule_delayed_work(&tspoll->work,HZ/8); led_timer.expires= jiffies +HZ/8; add_timer(&led_timer);

static void melfas_ts_work(struct work_struct *work){ ------------------------- }
=====================================================Android Debug===========================================================
logcat - check information
getevent - check event
filesystem : fstab.freescale	/dev/block/mmcblk1p5	(setting 外卡) ---> dd boot.img 到  /dev/block/mmcblk1p1
		(SMARC/device/fsl/imx6/etc/fstab.freescale)

Android - mini.mk :
1. 修改init.rc里面	:	mount rootfs rootfs / ro remount 改成 mount rootfs rootfs / rw remount  (X)
2. 修改 -> W/GraphicBufferAllocator( 2468): WOW! gralloc alloc failed, waiting for pending frees!
	a. SMARC/frameworks/native/services/surfaseflinger/DisplayDevice.cpp
	b. SMARC/frameworks/native/services/surfaseflinger/Android.mk
3. Can't boot (mini.mk) :
		Add pkgs - core.mk to mini.mk
4. 修改 settings (SMARC/packages/app/Settings..)	src/com/android/settings/中找到Settings.java(主界面）
							res/xml/settings_headers.xml(与设置主界面一一对应)
==================================================VPU install (video codec)===================================================
1. libfslcodec-3.0.7 => 1 tar zxvf libfslcodec


=================================================Wrapping Machine MP===========================================================
1. 製作 20 pcs 包裝機 RUN-IN 的 SDCARD 
	(使用MFG-tool, rootfs - 20140102(04:19), uImage - 20131230(06:24), u-boot - 20140107(02:24))
	Modify rcS and Add runintest mmc_2M_Count


